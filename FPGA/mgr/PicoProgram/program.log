KCPSM6 Assembler log file for program 'C:\studia\MGR\FPGA\mgr\PicoProgram\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 26 Nov 2015
Assembly timestamp: 21:44:44

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 391 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 914
Memory locations available: 3182


Assembly listing

 Addr Code                        Instruction

 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Copyright © 2011-2013, Xilinx, Inc.
 000                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 000                              ; protected under U.S. and international copyright and other intellectual property laws.
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; Disclaimer:
 000                              ; This disclaimer is not a license and does not grant any rights to the materials
 000                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 000                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 000                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 000                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 000                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 000                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 000                              ; (whether in contract or tort, including negligence, or under any other theory
 000                              ; of liability) for any loss or damage of any kind or nature related to, arising
 000                              ; under or in connection with these materials, including for any direct, or any
 000                              ; indirect, special, incidental, or consequential loss or damage (including loss
 000                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 000                              ; of any action brought by a third party) even if such damage or loss was
 000                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 000                              ;
 000                              ; CRITICAL APPLICATIONS
 000                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 000                              ; application requiring fail-safe performance, such as life-support or safety
 000                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 000                              ; related to the deployment of airbags, or any other applications that could lead
 000                              ; to death, personal injury, or severe property or environmental damage
 000                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 000                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 000                              ; subject only to applicable laws and regulations governing limitations on product
 000                              ; liability.
 000                              ;
 000                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;             _  ______ ____  ____  __  __  __
 000                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 000                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 000                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 000                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 000                              ;
 000                              ;
 000                              ; KCPSM6 reference design using 'uart_tx6' and 'uart_rx6' macros.
 000                              ;
 000                              ; Ken Chapman - Xilinx Ltd
 000                              ;
 000                              ;      11th May 2011 - Initial version
 000                              ;   6th October 2011 - Corrections to comments only
 000                              ;    23rd April 2012 - UART interface routines placed into 'uart_interface_routines.psm'
 000                              ;                      to facilitate reuse and provide an INCLUDE directive example.
 000                              ; 7th September 2012 - Corrections to comments only
 000                              ;    12th March 2013 - Constant directives defining ASCII control characters removed
 000                              ;                        (pre-defined in KCPSM6 assembler v2.43 or later).
 000                              ;     28th June 2013 - Corrections to comment only
 000                              ;
 000                              ;
 000                              ; INTRODUCTION
 000                              ;
 000                              ; This program interacts with the 'uart_tx6' and 'uart_rx6' macros providing some simple
 000                              ; and fundamental examples of UART based communication. As such, this example is intended
 000                              ; to display messages on a PC based terminal (e.g. PicoTerm or HyperTerminal) and receive
 000                              ; inputs typed on a keyboard by the user.
 000                              ;
 000                              ; The user is prompted to enter a 4-digit hexadecimal value which KCPSM6 converts to
 000                              ; decimal and displays if it is valid. It is hoped that this will also provide you with
 000                              ; several routines that you will find useful in your own programs.
 000                              ;
 000                              ; Please see 'UART6_User_Guide_30Sept12.pdf' for more detailed descriptions of the
 000                              ; hardware circuit. The 'UART_TX' and 'UART_RX' routines that form the software interface
 000                              ; with the macros are contained in 'uart_interface_routines.psm' together with a set of
 000                              ; constants which define the allocation of I/O ports and the signals within them. The
 000                              ; 'uart_interface_routines.psm' also presents an example of using the INCLUDE directive
 000                              ; introduced with KCPSM6 Assembler v2.00.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Port definitions
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; The only I/O ports used in this design are those that interface with the UART macros.
 000                              ; CONSTANT directives defining the port addresses and the allocation of signals within
 000                              ; those ports are defined in 'uart_interface_routines.psm'.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Special Register usage
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; No registers are given special names in this program.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Scratch Pad Memory Locations
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              CONSTANT hex_value0, 00                                ;16-bit value (lower byte)
 000                              CONSTANT hex_value1, 01                                ;16-bit value (upper byte)
 000                              ;
 000                              CONSTANT decimal0, 02                                  ;5 digit decimal value
 000                              CONSTANT decimal1, 03                                  ;  Suitable for 16-bit values up to
 000                              CONSTANT decimal2, 04                                  ;   65,536
 000                              CONSTANT decimal3, 05
 000                              CONSTANT decimal4, 06
 000                              CONSTANT green, 03
 000                              CONSTANT red, 07
 000                              CONSTANT blue, 01
 000                              CONSTANT clear, 0F
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Useful data constants
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Initialise the system
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; A delay of 1 second is implemented which is intended to give time for all the hardware
 000                              ; to settle into a stable condition before starting to doing anything. This can be
 000                              ; particularly beneficial when dealing with long cables where serial lines can take some
 000                              ; time to reach the initial idle state following power being applied.
 000                              ;
 000  2034B           cold_start: CALL 34B[delay_1s]                                     ;
 001                              ;
 001  20361                       CALL 361[reset_UART_macros]                            ;Reset buffers in UART macros
 002                              ;
 002                              ;
 002                              ; Initialised terminal display and display welcome messages
 002                              ;
 002  20101                       CALL 101[clear_screen]
 003  20113                       CALL 113[welcome_message]
 004                              ;
 004                              ;
 004                              ;------------------------------------------------------------------------------------------
 004                              ; Main Program
 004                              ;------------------------------------------------------------------------------------------
 004                              ;
 004                              ;
 004  202C9                 main: CALL 2C9[send_CR]
 005  01F1B                       LOAD sF, 1B[ESC]
 006  0151B                       LOAD s5, 1B[ESC]
 007  20372                       CALL 372[LCD_send]
 008  20368                       CALL 368[UART_TX]
 009  01F4C                       LOAD sF, 4C["L"]
 00A  20372                       CALL 372[LCD_send]
 00B  20368                       CALL 368[UART_TX]
 00C  01F50                       LOAD sF, 50["P"]
 00D  20372                       CALL 372[LCD_send]
 00E  20368                       CALL 368[UART_TX]
 00F  01F43                       LOAD sF, 43["C"]
 010  20372                       CALL 372[LCD_send]
 011  20368                       CALL 368[UART_TX]
 012  01F32                       LOAD sF, 32["2"]
 013  20372                       CALL 372[LCD_send]
 014  20368                       CALL 368[UART_TX]
 015  01F33                       LOAD sF, 33["3"]
 016  20372                       CALL 372[LCD_send]
 017  20368                       CALL 368[UART_TX]
 018                              ;jump UART_THREAD
 018                              ;jump LPC_THREAD
 018                    IR_petla: 
 018                              ;CALL send_CR
 018                              ;load s4, sA
 018                              ;call send_hex_byte
 018                              ;CALL send_space
 018                              ;load s4, sB
 018                              ;call send_hex_byte
 018                              ;CALL send_space
 018                              ;load s4, sC
 018                              ;call send_hex_byte
 018  01A00                       LOAD sA, 00[00000000'b]
 019  01B00                       LOAD sB, 00[00000000'b]
 01A  01C00                       LOAD sC, 00[00000000'b]
 01B                              ;CALL delay_200ms
 01B  0900B            IR_czekaj: INPUT s0, 0B[IR_PORT]
 01C  0D001                       TEST s0, 01[00000001'b]
 01D  3A01B                       JUMP C, 01B[IR_czekaj]
 01E  20343                       CALL 343[delay_ir_1_8_bit]
 01F  01403               IR_rx1: LOAD s4, 03                                            ;8-bits to transmit and receive
 020  20337         next_IR_bit1: CALL 337[my_delay_ir_bit]                              ;prepare next bit to transmit
 021  0930B                       INPUT s3, 0B[IR_PORT]                                  ;read input bit
 022  0D301                       TEST s3, 01[00000001'b]                                ;carry flag becomes value of received bit
 023  14A00                       SLA sA                                                 ;shift new data into result and move to next transmit bit
 024  19401                       SUB s4, 01                                             ;count bits
 025  36020                       JUMP NZ, 020[next_IR_bit1]                             ;repeat until last bit
 026  01405               IR_rx2: LOAD s4, 05                                            ;8-bits to transmit and receive
 027  20337         next_IR_bit2: CALL 337[my_delay_ir_bit]                              ;prepare next bit to transmit
 028  0930B                       INPUT s3, 0B[IR_PORT]                                  ;read input bit
 029  0D301                       TEST s3, 01[00000001'b]                                ;carry flag becomes value of received bit
 02A  14B00                       SLA sB                                                 ;shift new data into result and move to next transmit bit
 02B  19401                       SUB s4, 01                                             ;count bits
 02C  36027                       JUMP NZ, 027[next_IR_bit2]                             ;repeat until last bit
 02D  01406               IR_rx3: LOAD s4, 06                                            ;8-bits to transmit and receive
 02E  20337         next_IR_bit3: CALL 337[my_delay_ir_bit]                              ;prepare next bit to transmit
 02F  0930B                       INPUT s3, 0B[IR_PORT]                                  ;read input bit
 030  0D301                       TEST s3, 01[00000001'b]                                ;carry flag becomes value of received bit
 031  14C00                       SLA sC                                                 ;shift new data into result and move to next transmit bit
 032  19401                       SUB s4, 01                                             ;count bits
 033  3602E                       JUMP NZ, 02E[next_IR_bit3]                             ;repeat until last bit
 034  202C9                       CALL 2C9[send_CR]
 035  004A0                       LOAD s4, sA
 036  202D1                       CALL 2D1[send_hex_byte]
 037  202CB                       CALL 2CB[send_space]
 038  004B0                       LOAD s4, sB
 039  202D1                       CALL 2D1[send_hex_byte]
 03A  202CB                       CALL 2CB[send_space]
 03B  004C0                       LOAD s4, sC
 03C  202D1                       CALL 2D1[send_hex_byte]
 03D  00FC0                       LOAD sF, sC
 03E  2037C                       CALL 37C[LPC_send]
 03F  22018                       JUMP 018[IR_petla]
 040                              ;jump LPC_THREAD
 040                              ;LOAD s5, sA
 040                              ;CALL UART_TX
 040                              ;LOAD s5, sB
 040                              ;CALL UART_TX
 040                              ;LOAD s5, sC
 040                              ;CALL UART_TX
 040  00FC0                       LOAD sF, sC
 041  20372                       CALL 372[LCD_send]
 042  2B01A           LPC_THREAD: OUTPUTK 01[LPC_ready_syg], A[LPC_IN_ready_port]
 043  09009                       INPUT s0, 09[LPC_IN_data_valid_port]
 044  0D001                       TEST s0, 01[LPC_data_valid_syg]                        ;Z=0 and C=1 when data present
 045  32042                       JUMP Z, 042[LPC_THREAD]
 046  09508                       INPUT s5, 08[LPC_IN_data_port]
 047  20368                       CALL 368[UART_TX]
 048  20056                       CALL 056[which_banner]
 049                              ;LOAD s5, "C"
 049  2B00A          LPC_DV_down: OUTPUTK 00[00000000'b], A[LPC_IN_ready_port]
 04A  09009                       INPUT s0, 09[LPC_IN_data_valid_port]                   ;Sprawdza czy driver odebra³ dane
 04B  0D001                       TEST s0, 01[LPC_data_valid_syg]
 04C  3A049                       JUMP C, 049[LPC_DV_down]
 04D                              ;CALL LPC_send
 04D                              ;CALL LCD_send
 04D                              ;CALL UART_TX
 04D  2201B                       JUMP 01B[IR_czekaj]
 04E  09000          UART_THREAD: INPUT s0, 00[UART_status_port]
 04F  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 050  3204E                       JUMP Z, 04E[UART_THREAD]
 051  09501                       INPUT s5, 01[UART_RX6_input_port]
 052  00F50                       LOAD sF, s5
 053                              ;CALL UART_TX
 053  2037C                       CALL 37C[LPC_send]
 054  20372                       CALL 372[LCD_send]
 055  2204E                       JUMP 04E[UART_THREAD]
 056  00650         which_banner: LOAD s6, s5
 057  19603                       SUB s6, 03[green]
 058  3A05F                       JUMP C, 05F[next_banner1]
 059  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 05A  3605F                       JUMP NZ, 05F[next_banner1]
 05B  01F1B                       LOAD sF, 1B[ESC]
 05C  20372                       CALL 372[LCD_send]
 05D  20285                       CALL 285[banner_message]
 05E  25000                       RETURN 
 05F  00650         next_banner1: LOAD s6, s5
 060  19601                       SUB s6, 01[blue]
 061  3A068                       JUMP C, 068[next_banner2]
 062  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 063  36068                       JUMP NZ, 068[next_banner2]
 064  01F1B                       LOAD sF, 1B[ESC]
 065  20372                       CALL 372[LCD_send]
 066  20291                       CALL 291[banner2_message]
 067  25000                       RETURN 
 068  00650         next_banner2: LOAD s6, s5
 069  19607                       SUB s6, 07[red]
 06A  3A071                       JUMP C, 071[next_banner3]
 06B  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 06C  36071                       JUMP NZ, 071[next_banner3]
 06D  01F1B                       LOAD sF, 1B[ESC]
 06E  20372                       CALL 372[LCD_send]
 06F  2029B                       CALL 29B[banner3_message]
 070  25000                       RETURN 
 071  00650         next_banner3: LOAD s6, s5
 072  1960F                       SUB s6, 0F[clear]
 073  3A07A                       JUMP C, 07A[just_return]
 074  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 075  3607A                       JUMP NZ, 07A[just_return]
 076  01F1B                       LOAD sF, 1B[ESC]
 077  20372                       CALL 372[LCD_send]
 078  202A4                       CALL 2A4[banner4_message]
 079  25000                       RETURN 
 07A  25000          just_return: RETURN 
 07B  09000             UART_RX2: INPUT s0, 00[UART_status_port]
 07C  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 07D  3207B                       JUMP Z, 07B[UART_RX2]
 07E  09501                       INPUT s5, 01[UART_RX6_input_port]
 07F  20368                       CALL 368[UART_TX]
 080  2207B                       JUMP 07B[UART_RX2]
 081                              ;
 081  202C9        bad_hex_input: CALL 2C9[send_CR]
 082  01B00                       LOAD sB, 00[bad_hex_msg'upper]                         ;tell user input was invalid hex
 083  01AAF                       LOAD sA, AF[bad_hex_msg'lower]
 084  2027E                       CALL 27E[send_message]
 085  22004                       JUMP 004[main]
 086                              ;
 086                              ;
 086                              ; Text messages used in main section of the program
 086                              ;
 086                              STRING prompt$, "Please enter a 4-digit hexadecimal value"
 086                              STRING bad_hex$, "Sorry, that was not a valid 4-digit hexadecimal value!"
 086                              STRING result$, "The decimal equivalent of "
 086                              ;
 086  21550           prompt_msg: LOAD&RETURN s5, 50[prompt$:"P"]
 087  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 088  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 089  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 08A  21573                       LOAD&RETURN s5, 73[prompt$:"s"]
 08B  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 08C  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 08D  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 08E  2156E                       LOAD&RETURN s5, 6E[prompt$:"n"]
 08F  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 090  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 091  21572                       LOAD&RETURN s5, 72[prompt$:"r"]
 092  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 093  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 094  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 095  21534                       LOAD&RETURN s5, 34[prompt$:"4"]
 096  2152D                       LOAD&RETURN s5, 2D[prompt$:"-"]
 097  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 098  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 099  21567                       LOAD&RETURN s5, 67[prompt$:"g"]
 09A  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 09B  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 09C  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 09D  21568                       LOAD&RETURN s5, 68[prompt$:"h"]
 09E  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 09F  21578                       LOAD&RETURN s5, 78[prompt$:"x"]
 0A0  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 0A1  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 0A2  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 0A3  21563                       LOAD&RETURN s5, 63[prompt$:"c"]
 0A4  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 0A5  2156D                       LOAD&RETURN s5, 6D[prompt$:"m"]
 0A6  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 0A7  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 0A8  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 0A9  21576                       LOAD&RETURN s5, 76[prompt$:"v"]
 0AA  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 0AB  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 0AC  21575                       LOAD&RETURN s5, 75[prompt$:"u"]
 0AD  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 0AE  21500                       LOAD&RETURN s5, 00[NUL]
 0AF                              ;
 0AF  21553          bad_hex_msg: LOAD&RETURN s5, 53[bad_hex$:"S"]
 0B0  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 0B1  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 0B2  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 0B3  21579                       LOAD&RETURN s5, 79[bad_hex$:"y"]
 0B4  2152C                       LOAD&RETURN s5, 2C[bad_hex$:","]
 0B5  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0B6  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 0B7  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 0B8  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0B9  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 0BA  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0BB  21577                       LOAD&RETURN s5, 77[bad_hex$:"w"]
 0BC  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0BD  21573                       LOAD&RETURN s5, 73[bad_hex$:"s"]
 0BE  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0BF  2156E                       LOAD&RETURN s5, 6E[bad_hex$:"n"]
 0C0  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 0C1  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 0C2  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0C3  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0C4  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0C5  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 0C6  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0C7  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0C8  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0C9  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 0CA  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0CB  21534                       LOAD&RETURN s5, 34[bad_hex$:"4"]
 0CC  2152D                       LOAD&RETURN s5, 2D[bad_hex$:"-"]
 0CD  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 0CE  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0CF  21567                       LOAD&RETURN s5, 67[bad_hex$:"g"]
 0D0  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0D1  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 0D2  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0D3  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 0D4  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0D5  21578                       LOAD&RETURN s5, 78[bad_hex$:"x"]
 0D6  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0D7  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 0D8  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0D9  21563                       LOAD&RETURN s5, 63[bad_hex$:"c"]
 0DA  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0DB  2156D                       LOAD&RETURN s5, 6D[bad_hex$:"m"]
 0DC  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0DD  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0DE  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0DF  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 0E0  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0E1  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0E2  21575                       LOAD&RETURN s5, 75[bad_hex$:"u"]
 0E3  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0E4  21521                       LOAD&RETURN s5, 21[bad_hex$:"!"]
 0E5  21500                       LOAD&RETURN s5, 00[NUL]
 0E6                              ;
 0E6  21554           result_msg: LOAD&RETURN s5, 54[result$:"T"]
 0E7  21568                       LOAD&RETURN s5, 68[result$:"h"]
 0E8  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0E9  21520                       LOAD&RETURN s5, 20[result$:" "]
 0EA  21564                       LOAD&RETURN s5, 64[result$:"d"]
 0EB  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0EC  21563                       LOAD&RETURN s5, 63[result$:"c"]
 0ED  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0EE  2156D                       LOAD&RETURN s5, 6D[result$:"m"]
 0EF  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0F0  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0F1  21520                       LOAD&RETURN s5, 20[result$:" "]
 0F2  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0F3  21571                       LOAD&RETURN s5, 71[result$:"q"]
 0F4  21575                       LOAD&RETURN s5, 75[result$:"u"]
 0F5  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0F6  21576                       LOAD&RETURN s5, 76[result$:"v"]
 0F7  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0F8  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0F9  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0FA  2156E                       LOAD&RETURN s5, 6E[result$:"n"]
 0FB  21574                       LOAD&RETURN s5, 74[result$:"t"]
 0FC  21520                       LOAD&RETURN s5, 20[result$:" "]
 0FD  2156F                       LOAD&RETURN s5, 6F[result$:"o"]
 0FE  21566                       LOAD&RETURN s5, 66[result$:"f"]
 0FF  21520                       LOAD&RETURN s5, 20[result$:" "]
 100  21500                       LOAD&RETURN s5, 00[NUL]
 101                              ;
 101                              ;
 101                              ;------------------------------------------------------------------------------------------
 101                              ; Software Delays
 101                              ;------------------------------------------------------------------------------------------
 101                              ;
 101                              ; All based on 50MHz clock
 101                              ; The number of iterations of a delay loop required to form each delay required are
 101                              ; loaded into the register set [s2,s1,s0] and then the delay loop is started.
 101                              ;
 101                              ; Registers used s0, s1, s2
 101                              ;
 101                              ;1ms is 50,000 clock cycles requiring 6,250 delay iterations
 101                              ;
 101                              ;
 101                              ;
 101                              ;------------------------------------------------------------------------------------------
 101                              ; Clear terminal and home cursor sequences for HyperTerminal (or similar)
 101                              ;------------------------------------------------------------------------------------------
 101                              ;
 101                              ; ANSI Escape Sequences/codes (VT100)
 101                              ;
 101  0151B         clear_screen: LOAD s5, 1B[ESC]                                       ;clear terminal sequence
 102  20368                       CALL 368[UART_TX]
 103  0155B                       LOAD s5, 5B["["]
 104  20368                       CALL 368[UART_TX]
 105  01532                       LOAD s5, 32["2"]
 106  20368                       CALL 368[UART_TX]
 107  0154A                       LOAD s5, 4A["J"]
 108  20368                       CALL 368[UART_TX]
 109  2034F                       CALL 34F[delay_1ms]                                    ;Delay for reliable operation
 10A  25000                       RETURN 
 10B                              ;
 10B  0151B          cursor_home: LOAD s5, 1B[ESC]                                       ;Send cursor to upper-left of display
 10C  20368                       CALL 368[UART_TX]
 10D  0155B                       LOAD s5, 5B["["]
 10E  20368                       CALL 368[UART_TX]
 10F  01548                       LOAD s5, 48["H"]
 110  20368                       CALL 368[UART_TX]
 111  2034F                       CALL 34F[delay_1ms]                                    ;Delay for reliable operation
 112  25000                       RETURN 
 113                              ;
 113                              ;
 113                              ;------------------------------------------------------------------------------------------
 113                              ; Welcome Message.
 113                              ;------------------------------------------------------------------------------------------
 113                              ;
 113                              ; The welcome message includes a display of the version information available from the
 113                              ; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
 113                              ;
 113  01B01      welcome_message: LOAD sB, 01[welcome_msg'upper]
 114  01A1A                       LOAD sA, 1A[welcome_msg'lower]
 115  2027E                       CALL 27E[send_message]
 116  14580                       HWBUILD s5                                             ;hardware version defines ASCII letter
 117  20368                       CALL 368[UART_TX]
 118  202C9                       CALL 2C9[send_CR]
 119  25000                       RETURN 
 11A                              ;
 11A                              ; Welcome message
 11A                              ;
 11A                              STRING banner1$, "  _  ______ ____  ____  __  __  __"
 11A                              STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
 11A                              STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
 11A                              STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
 11A                              STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
 11A                              ;
 11A                              ; Welcome message
 11A                              ;
 11A                              STRING welcome1$, "Przyklad aplikacji obslugujacej portu IR z wykorzystaniem Picoblaze"
 11A                              STRING welcome11$, "Autor: Sebastian Kupis"
 11A                              STRING welcome2$, "Data zbudoawania: "
 11A                              STRING welcome3$, "   Czas: "
 11A                              STRING welcome4$, "Version: "
 11A                              STRING welcome5$, "Hardware Design: "
 11A                              ;
 11A                              ;
 11A  21520          welcome_msg: LOAD&RETURN s5, 20[banner1$:" "]
 11B  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 11C  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 11D  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 11E  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 11F  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 120  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 121  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 122  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 123  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 124  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 125  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 126  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 127  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 128  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 129  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 12A  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 12B  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 12C  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 12D  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 12E  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 12F  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 130  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 131  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 132  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 133  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 134  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 135  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 136  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 137  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 138  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 139  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 13A  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 13B  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 13C  2150D                       LOAD&RETURN s5, 0D[CR]
 13D  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 13E  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 13F  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 140  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 141  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 142  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 143  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 144  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 145  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 146  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 147  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 148  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 149  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 14A  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 14B  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 14C  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 14D  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 14E  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 14F  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 150  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 151  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 152  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 153  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 154  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 155  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 156  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 157  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 158  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 159  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 15A  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 15B  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 15C  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 15D  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 15E  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 15F  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 160  2150D                       LOAD&RETURN s5, 0D[CR]
 161  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 162  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 163  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 164  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 165  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 166  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 167  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 168  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 169  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 16A  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 16B  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 16C  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 16D  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 16E  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 16F  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 170  21529                       LOAD&RETURN s5, 29[banner3$:")"]
 171  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 172  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 173  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 174  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 175  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 176  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 177  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 178  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 179  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 17A  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 17B  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 17C  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 17D  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 17E  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 17F  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 180  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 181  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 182  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 183  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 184  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 185  2150D                       LOAD&RETURN s5, 0D[CR]
 186  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 187  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 188  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 189  2152E                       LOAD&RETURN s5, 2E[banner4$:"."]
 18A  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 18B  2155C                       LOAD&RETURN s5, 5C[banner4$:"\"]
 18C  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 18D  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 18E  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 18F  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 190  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 191  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 192  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 193  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 194  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 195  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 196  2152F                       LOAD&RETURN s5, 2F[banner4$:"/"]
 197  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 198  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 199  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 19A  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 19B  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 19C  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 19D  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 19E  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 19F  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 1A0  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 1A1  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 1A2  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 1A3  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 1A4  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 1A5  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 1A6  21528                       LOAD&RETURN s5, 28[banner4$:"("]
 1A7  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 1A8  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 1A9  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 1AA  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 1AB  2150D                       LOAD&RETURN s5, 0D[CR]
 1AC  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1AD  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1AE  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1AF  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1B0  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 1B1  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B2  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 1B3  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B4  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B5  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B6  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B7  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1B8  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B9  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1BA  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1BB  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1BC  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1BD  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1BE  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1BF  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1C0  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1C1  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1C2  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 1C3  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1C4  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1C5  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1C6  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1C7  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1C8  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1C9  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1CA  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1CB  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 1CC  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1CD  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1CE  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1CF  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 1D0  2150D                       LOAD&RETURN s5, 0D[CR]
 1D1  2150D                       LOAD&RETURN s5, 0D[CR]
 1D2  21550                       LOAD&RETURN s5, 50[welcome1$:"P"]
 1D3  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1D4  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 1D5  21579                       LOAD&RETURN s5, 79[welcome1$:"y"]
 1D6  2156B                       LOAD&RETURN s5, 6B[welcome1$:"k"]
 1D7  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 1D8  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1D9  21564                       LOAD&RETURN s5, 64[welcome1$:"d"]
 1DA  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1DB  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1DC  21570                       LOAD&RETURN s5, 70[welcome1$:"p"]
 1DD  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 1DE  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 1DF  2156B                       LOAD&RETURN s5, 6B[welcome1$:"k"]
 1E0  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1E1  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 1E2  2156A                       LOAD&RETURN s5, 6A[welcome1$:"j"]
 1E3  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 1E4  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1E5  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 1E6  21562                       LOAD&RETURN s5, 62[welcome1$:"b"]
 1E7  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 1E8  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 1E9  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1EA  21567                       LOAD&RETURN s5, 67[welcome1$:"g"]
 1EB  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1EC  2156A                       LOAD&RETURN s5, 6A[welcome1$:"j"]
 1ED  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1EE  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 1EF  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 1F0  2156A                       LOAD&RETURN s5, 6A[welcome1$:"j"]
 1F1  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1F2  21570                       LOAD&RETURN s5, 70[welcome1$:"p"]
 1F3  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 1F4  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1F5  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1F6  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1F7  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1F8  21549                       LOAD&RETURN s5, 49[welcome1$:"I"]
 1F9  21552                       LOAD&RETURN s5, 52[welcome1$:"R"]
 1FA  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1FB  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 1FC  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1FD  21577                       LOAD&RETURN s5, 77[welcome1$:"w"]
 1FE  21579                       LOAD&RETURN s5, 79[welcome1$:"y"]
 1FF  2156B                       LOAD&RETURN s5, 6B[welcome1$:"k"]
 200  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 201  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 202  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 203  21579                       LOAD&RETURN s5, 79[welcome1$:"y"]
 204  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 205  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 206  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 207  2156E                       LOAD&RETURN s5, 6E[welcome1$:"n"]
 208  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 209  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 20A  2156D                       LOAD&RETURN s5, 6D[welcome1$:"m"]
 20B  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 20C  21550                       LOAD&RETURN s5, 50[welcome1$:"P"]
 20D  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 20E  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 20F  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 210  21562                       LOAD&RETURN s5, 62[welcome1$:"b"]
 211  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 212  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 213  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 214  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 215  2150D                       LOAD&RETURN s5, 0D[CR]
 216  21541                       LOAD&RETURN s5, 41[welcome11$:"A"]
 217  21575                       LOAD&RETURN s5, 75[welcome11$:"u"]
 218  21574                       LOAD&RETURN s5, 74[welcome11$:"t"]
 219  2156F                       LOAD&RETURN s5, 6F[welcome11$:"o"]
 21A  21572                       LOAD&RETURN s5, 72[welcome11$:"r"]
 21B  2153A                       LOAD&RETURN s5, 3A[welcome11$:":"]
 21C  21520                       LOAD&RETURN s5, 20[welcome11$:" "]
 21D  21553                       LOAD&RETURN s5, 53[welcome11$:"S"]
 21E  21565                       LOAD&RETURN s5, 65[welcome11$:"e"]
 21F  21562                       LOAD&RETURN s5, 62[welcome11$:"b"]
 220  21561                       LOAD&RETURN s5, 61[welcome11$:"a"]
 221  21573                       LOAD&RETURN s5, 73[welcome11$:"s"]
 222  21574                       LOAD&RETURN s5, 74[welcome11$:"t"]
 223  21569                       LOAD&RETURN s5, 69[welcome11$:"i"]
 224  21561                       LOAD&RETURN s5, 61[welcome11$:"a"]
 225  2156E                       LOAD&RETURN s5, 6E[welcome11$:"n"]
 226  21520                       LOAD&RETURN s5, 20[welcome11$:" "]
 227  2154B                       LOAD&RETURN s5, 4B[welcome11$:"K"]
 228  21575                       LOAD&RETURN s5, 75[welcome11$:"u"]
 229  21570                       LOAD&RETURN s5, 70[welcome11$:"p"]
 22A  21569                       LOAD&RETURN s5, 69[welcome11$:"i"]
 22B  21573                       LOAD&RETURN s5, 73[welcome11$:"s"]
 22C  2150D                       LOAD&RETURN s5, 0D[CR]
 22D  2150D                       LOAD&RETURN s5, 0D[CR]
 22E  21544                       LOAD&RETURN s5, 44[welcome2$:"D"]
 22F  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 230  21574                       LOAD&RETURN s5, 74[welcome2$:"t"]
 231  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 232  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 233  2157A                       LOAD&RETURN s5, 7A[welcome2$:"z"]
 234  21562                       LOAD&RETURN s5, 62[welcome2$:"b"]
 235  21575                       LOAD&RETURN s5, 75[welcome2$:"u"]
 236  21564                       LOAD&RETURN s5, 64[welcome2$:"d"]
 237  2156F                       LOAD&RETURN s5, 6F[welcome2$:"o"]
 238  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 239  21577                       LOAD&RETURN s5, 77[welcome2$:"w"]
 23A  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 23B  2156E                       LOAD&RETURN s5, 6E[welcome2$:"n"]
 23C  21569                       LOAD&RETURN s5, 69[welcome2$:"i"]
 23D  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 23E  2153A                       LOAD&RETURN s5, 3A[welcome2$:":"]
 23F  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 240  21532                       LOAD&RETURN s5, 32[datestamp$:"2"]
 241  21536                       LOAD&RETURN s5, 36[datestamp$:"6"]
 242  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 243  2154E                       LOAD&RETURN s5, 4E[datestamp$:"N"]
 244  2156F                       LOAD&RETURN s5, 6F[datestamp$:"o"]
 245  21576                       LOAD&RETURN s5, 76[datestamp$:"v"]
 246  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 247  21532                       LOAD&RETURN s5, 32[datestamp$:"2"]
 248  21530                       LOAD&RETURN s5, 30[datestamp$:"0"]
 249  21531                       LOAD&RETURN s5, 31[datestamp$:"1"]
 24A  21535                       LOAD&RETURN s5, 35[datestamp$:"5"]
 24B  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 24C  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 24D  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 24E  21543                       LOAD&RETURN s5, 43[welcome3$:"C"]
 24F  2157A                       LOAD&RETURN s5, 7A[welcome3$:"z"]
 250  21561                       LOAD&RETURN s5, 61[welcome3$:"a"]
 251  21573                       LOAD&RETURN s5, 73[welcome3$:"s"]
 252  2153A                       LOAD&RETURN s5, 3A[welcome3$:":"]
 253  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 254  21532                       LOAD&RETURN s5, 32[timestamp$:"2"]
 255  21531                       LOAD&RETURN s5, 31[timestamp$:"1"]
 256  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 257  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 258  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 259  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 25A  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 25B  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 25C  2150D                       LOAD&RETURN s5, 0D[CR]
 25D  21556                       LOAD&RETURN s5, 56[welcome4$:"V"]
 25E  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 25F  21572                       LOAD&RETURN s5, 72[welcome4$:"r"]
 260  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 261  21569                       LOAD&RETURN s5, 69[welcome4$:"i"]
 262  2156F                       LOAD&RETURN s5, 6F[welcome4$:"o"]
 263  2156E                       LOAD&RETURN s5, 6E[welcome4$:"n"]
 264  2153A                       LOAD&RETURN s5, 3A[welcome4$:":"]
 265  21520                       LOAD&RETURN s5, 20[welcome4$:" "]
 266  21576                       LOAD&RETURN s5, 76[KCPSM6_version$:"v"]
 267  21532                       LOAD&RETURN s5, 32[KCPSM6_version$:"2"]
 268  2152E                       LOAD&RETURN s5, 2E[KCPSM6_version$:"."]
 269  21537                       LOAD&RETURN s5, 37[KCPSM6_version$:"7"]
 26A  21530                       LOAD&RETURN s5, 30[KCPSM6_version$:"0"]
 26B  2150D                       LOAD&RETURN s5, 0D[CR]
 26C  21548                       LOAD&RETURN s5, 48[welcome5$:"H"]
 26D  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 26E  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 26F  21564                       LOAD&RETURN s5, 64[welcome5$:"d"]
 270  21577                       LOAD&RETURN s5, 77[welcome5$:"w"]
 271  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 272  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 273  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 274  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 275  21544                       LOAD&RETURN s5, 44[welcome5$:"D"]
 276  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 277  21573                       LOAD&RETURN s5, 73[welcome5$:"s"]
 278  21569                       LOAD&RETURN s5, 69[welcome5$:"i"]
 279  21567                       LOAD&RETURN s5, 67[welcome5$:"g"]
 27A  2156E                       LOAD&RETURN s5, 6E[welcome5$:"n"]
 27B  2153A                       LOAD&RETURN s5, 3A[welcome5$:":"]
 27C  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 27D  21500                       LOAD&RETURN s5, 00[NUL]
 27E                              ;
 27E                              ;
 27E                              ;------------------------------------------------------------------------------------------
 27E                              ; Send a message to the UART
 27E                              ;------------------------------------------------------------------------------------------
 27E                              ;
 27E                              ; A message is transmitted to the USB-UART.
 27E                              ; The start address of the message must be provided in [sB,sA].
 27E                              ; Terminate the transmission with a NULL character (00 hex).
 27E                              ;
 27E  24BA0         send_message: CALL@ (sB, sA)
 27F  1D500                       COMPARE s5, 00                                         ;terminate on NUL character
 280  31000                       RETURN Z
 281  20368                       CALL 368[UART_TX]
 282  11A01                       ADD sA, 01[1'd]
 283  13B00                       ADDCY sB, 00[0'd]
 284  2227E                       JUMP 27E[send_message]
 285                              ;
 285                              ;
 285                              ;------------------------------------------------------------------------------------------
 285                              ; Send Carriage Return to UART
 285                              ;------------------------------------------------------------------------------------------
 285                              ;
 285                              ; Registers used s0, s1, s2, and s5.
 285                              ;
 285  01B02       banner_message: LOAD sB, 02[banner_msg'upper]
 286  01A8A                       LOAD sA, 8A[banner_msg'lower]
 287  202C2                       CALL 2C2[send_banner]
 288  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 289                              ;CALL send_CR
 289  25000                       RETURN 
 28A                              ;
 28A                              ; Welcome message
 28A                              ;
 28A                              STRING bannert$, "greeen"
 28A                              ;
 28A                              ;
 28A  21F67           banner_msg: LOAD&RETURN sF, 67[bannert$:"g"]
 28B  21F72                       LOAD&RETURN sF, 72[bannert$:"r"]
 28C  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 28D  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 28E  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 28F  21F6E                       LOAD&RETURN sF, 6E[bannert$:"n"]
 290  21F00                       LOAD&RETURN sF, 00[NUL]
 291                              ;
 291                              ;
 291                              ;
 291  01B02      banner2_message: LOAD sB, 02[banner2_msg'upper]
 292  01A96                       LOAD sA, 96[banner2_msg'lower]
 293  202C2                       CALL 2C2[send_banner]
 294  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 295  25000                       RETURN 
 296                              ;
 296                              ; Welcome message
 296                              ;
 296                              STRING bannert2$, "blue"
 296                              ;
 296                              ;
 296  21F62          banner2_msg: LOAD&RETURN sF, 62[bannert2$:"b"]
 297  21F6C                       LOAD&RETURN sF, 6C[bannert2$:"l"]
 298  21F75                       LOAD&RETURN sF, 75[bannert2$:"u"]
 299  21F65                       LOAD&RETURN sF, 65[bannert2$:"e"]
 29A  21F00                       LOAD&RETURN sF, 00[NUL]
 29B  01B02      banner3_message: LOAD sB, 02[banner3_msg'upper]
 29C  01AA0                       LOAD sA, A0[banner3_msg'lower]
 29D  202C2                       CALL 2C2[send_banner]
 29E  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 29F                              ;CALL send_CR
 29F  25000                       RETURN 
 2A0                              ;
 2A0                              ; Welcome message
 2A0                              ;
 2A0                              STRING bannert3$, "red"
 2A0                              ;
 2A0                              ;
 2A0  21F72          banner3_msg: LOAD&RETURN sF, 72[bannert3$:"r"]
 2A1  21F65                       LOAD&RETURN sF, 65[bannert3$:"e"]
 2A2  21F64                       LOAD&RETURN sF, 64[bannert3$:"d"]
 2A3  21F00                       LOAD&RETURN sF, 00[NUL]
 2A4  01B02      banner4_message: LOAD sB, 02[banner4_msg'upper]
 2A5  01AA9                       LOAD sA, A9[banner4_msg'lower]
 2A6  202C2                       CALL 2C2[send_banner]
 2A7  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 2A8                              ;CALL send_CR
 2A8  25000                       RETURN 
 2A9                              ;
 2A9                              ; Welcome message
 2A9                              ;
 2A9                              STRING bannert4$, "i czyszcze sobiecale UOP"
 2A9                              ;
 2A9                              ;
 2A9  21F69          banner4_msg: LOAD&RETURN sF, 69[bannert4$:"i"]
 2AA  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 2AB  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 2AC  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 2AD  21F79                       LOAD&RETURN sF, 79[bannert4$:"y"]
 2AE  21F73                       LOAD&RETURN sF, 73[bannert4$:"s"]
 2AF  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 2B0  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 2B1  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 2B2  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 2B3  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 2B4  21F73                       LOAD&RETURN sF, 73[bannert4$:"s"]
 2B5  21F6F                       LOAD&RETURN sF, 6F[bannert4$:"o"]
 2B6  21F62                       LOAD&RETURN sF, 62[bannert4$:"b"]
 2B7  21F69                       LOAD&RETURN sF, 69[bannert4$:"i"]
 2B8  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 2B9  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 2BA  21F61                       LOAD&RETURN sF, 61[bannert4$:"a"]
 2BB  21F6C                       LOAD&RETURN sF, 6C[bannert4$:"l"]
 2BC  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 2BD  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 2BE  21F55                       LOAD&RETURN sF, 55[bannert4$:"U"]
 2BF  21F4F                       LOAD&RETURN sF, 4F[bannert4$:"O"]
 2C0  21F50                       LOAD&RETURN sF, 50[bannert4$:"P"]
 2C1  21F00                       LOAD&RETURN sF, 00[NUL]
 2C2                              ;
 2C2                              ;
 2C2                              ; Send a banner to LCD
 2C2                              ;------------------------------------------------------------------------------------------
 2C2                              ;
 2C2                              ; A message is transmitted to the USB-UART.
 2C2                              ; The start address of the message must be provided in [sB,sA].
 2C2                              ; Terminate the transmission with a NULL character (00 hex).
 2C2                              ;
 2C2  24BA0          send_banner: CALL@ (sB, sA)
 2C3  1DF00                       COMPARE sF, 00                                         ;terminate on NUL character
 2C4  31000                       RETURN Z
 2C5                              ;LOAD sF,s5
 2C5  20372                       CALL 372[LCD_send]
 2C6  11A01                       ADD sA, 01[1'd]
 2C7  13B00                       ADDCY sB, 00[0'd]
 2C8  222C2                       JUMP 2C2[send_banner]
 2C9                              ;
 2C9                              ;
 2C9                              ;------------------------------------------------------------------------------------------
 2C9                              ; Send Carriage Return to UART
 2C9                              ;------------------------------------------------------------------------------------------
 2C9                              ;
 2C9                              ; Registers used s0, s1, s2, and s
 2C9  0150D              send_CR: LOAD s5, 0D[CR]
 2CA  22368                       JUMP 368[UART_TX]                                      ;includes RETURN
 2CB                              ;
 2CB                              ;
 2CB                              ;------------------------------------------------------------------------------------------
 2CB                              ; Send a Space to UART
 2CB                              ;------------------------------------------------------------------------------------------
 2CB                              ;
 2CB                              ; Registers used s0, s1, s2, and s5.
 2CB                              ;
 2CB  01520           send_space: LOAD s5, 20[" "]
 2CC  22368                       JUMP 368[UART_TX]                                      ;includes RETURN
 2CD                              ;
 2CD                              ;
 2CD                              ;------------------------------------------------------------------------------------------
 2CD                              ; Send Hex Value of 16-bit word to UART
 2CD                              ;------------------------------------------------------------------------------------------
 2CD                              ;
 2CD                              ; Value provided in register pair [sB,sA] is sent as ASCII HEX to the UART
 2CD                              ; transmitter.
 2CD                              ;
 2CD                              ; Registers used s0, s1, s2, s4, s5, sA and sB.
 2CD                              ;
 2CD  004B0        send_hex_word: LOAD s4, sB
 2CE  202D1                       CALL 2D1[send_hex_byte]
 2CF  004A0                       LOAD s4, sA
 2D0  222D1                       JUMP 2D1[send_hex_byte]                                ;includes RETURN
 2D1                              ;
 2D1                              ;
 2D1                              ;------------------------------------------------------------------------------------------
 2D1                              ; Send Hex Value of Byte to UART
 2D1                              ;------------------------------------------------------------------------------------------
 2D1                              ;
 2D1                              ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
 2D1                              ;
 2D1                              ; Registers used s0, s4 (preserved) and s5.
 2D1                              ;
 2D1  00540        send_hex_byte: LOAD s5, s4                                            ;isolate upper nibble
 2D2  1450E                       SR0 s5
 2D3  1450E                       SR0 s5
 2D4  1450E                       SR0 s5
 2D5  1450E                       SR0 s5
 2D6  202DD                       CALL 2DD[hex_to_ASCII]                                 ; convert to ASCII
 2D7  20368                       CALL 368[UART_TX]                                      ;send upper digit to UART
 2D8  00540                       LOAD s5, s4                                            ;isolate lower nibble
 2D9  0350F                       AND s5, 0F
 2DA  202DD                       CALL 2DD[hex_to_ASCII]                                 ; convert to ASCII
 2DB  20368                       CALL 368[UART_TX]                                      ;send lower digit to UART
 2DC  25000                       RETURN 
 2DD                              ;
 2DD                              ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
 2DD                              ;
 2DD                              ; Register used s5
 2DD                              ;
 2DD  1950A         hex_to_ASCII: SUB s5, 0A                                             ;test if value is in range 0 to 9
 2DE  3A2E0                       JUMP C, 2E0[number_char]
 2DF  11507                       ADD s5, 07                                             ;ASCII char A to F in range 41 to 46
 2E0  1153A          number_char: ADD s5, 3A                                             ;ASCII char 0 to 9 in range 30 to 40
 2E1  25000                       RETURN 
 2E2                              ;
 2E2                              ;
 2E2                              ;------------------------------------------------------------------------------------------
 2E2                              ; Converts character to upper case
 2E2                              ;------------------------------------------------------------------------------------------
 2E2                              ;
 2E2                              ; Tests and converts character in 's5' (if necessary).
 2E2                              ;
 2E2                              ; To convert character to upper case
 2E2                              ;
 2E2                              ; If the character is in the range 'a' to 'z', it is converted
 2E2                              ; to the equivalent upper case character in the range 'A' to 'Z'.
 2E2                              ; All other characters remain unchanged.
 2E2                              ;
 2E2  1D561           upper_case: COMPARE s5, 61["a"]                                    ;eliminate character codes below 'a' (61 hex)
 2E3  39000                       RETURN C
 2E4  1D57B                       COMPARE s5, 7B                                         ;eliminate character codes above 'z' (7A hex)
 2E5  3D000                       RETURN NC
 2E6  035DF                       AND s5, DF[11011111'b]                                 ;force bit5 Low to convert to upper case
 2E7  25000                       RETURN 
 2E8                              ;
 2E8                              ;
 2E8                              ;------------------------------------------------------------------------------------------
 2E8                              ; Convert ASCII character to an equivalent HEX value.
 2E8                              ;------------------------------------------------------------------------------------------
 2E8                              ;
 2E8                              ; Converts the ASCII character presented in 's5' to an equivalent HEX value.
 2E8                              ; If character is not valid for hex, then CARRY is set on return.
 2E8                              ;
 2E8                              ; Register used s5
 2E8                              ;
 2E8  115B9         ASCII_to_hex: ADD s5, B9                                             ;test for above ASCII code 46 ('F')
 2E9  39000                       RETURN C
 2EA  195E9                       SUB s5, E9                                             ;normalise 0 to 9 with A-F in 11 to 16 hex
 2EB  39000                       RETURN C                                               ;reject below ASCII code 30 ('0')
 2EC  19511                       SUB s5, 11                                             ;isolate A-F down to 00 to 05 hex
 2ED  3E2F2                       JUMP NC, 2F2[ASCII_letter]
 2EE  11507                       ADD s5, 07                                             ;test for above ASCII code 46 ('F')
 2EF  39000                       RETURN C
 2F0  195F6                       SUB s5, F6                                             ;convert to range 00 to 09
 2F1  25000                       RETURN 
 2F2  1150A         ASCII_letter: ADD s5, 0A                                             ;convert to range 0A to 0F
 2F3  25000                       RETURN 
 2F4                              ;
 2F4                              ;
 2F4                              ;------------------------------------------------------------------------------------------
 2F4                              ; Read ASCII-HEX value up to 8-digits (for 32-bit value) from UART
 2F4                              ;------------------------------------------------------------------------------------------
 2F4                              ;
 2F4                              ; Read up to 8 hex characters from UART and convert to a binary value in the [sD,sC,sB,sA]
 2F4                              ; register set. The number of characters to be read must be defined in sE. When less than
 2F4                              ; 8 characters are read the value is returned in the least significant bits of the register
 2F4                              ; set with the 8-bits above the defined value being zero to ensure ensuring that the upper
 2F4                              ; nibble will be zero if an odd number of digits are read.
 2F4                              ;
 2F4                              ; If any character received from the UART is not in the range 0 to F then the routine will
 2F4                              ; end immediately with the CARRY flag set and this should be checked by the calling process
 2F4                              ; upon return.
 2F4                              ;
 2F4  01A00         obtain_value: LOAD sA, 00                                            ;initialise potentially unused bits to zero
 2F5  20389         obtain_digit: CALL 389[UART_RX]                                      ;wait for a character and return in s5
 2F6  322F5                       JUMP Z, 2F5[obtain_digit]                              ;continue to wait if timeout occurs
 2F7  20368                       CALL 368[UART_TX]                                      ;echo character as entered
 2F8  20368                       CALL 368[UART_TX]
 2F9  20368                       CALL 368[UART_TX]
 2FA  202E2                       CALL 2E2[upper_case]                                   ;convert to upper case if necessary
 2FB  202E8                       CALL 2E8[ASCII_to_hex]                                 ;convert value in s5 to hex nibble
 2FC  39000                       RETURN C                                               ;If invalid hex digit then return immediately
 2FD  01004                       LOAD s0, 04[4'd]                                       ;shift [sD,sC,sB,sA] left by 4 bits
 2FE  14A06          build_value: SL0 sA                                                 ;  to make space for new digit value
 2FF  14B00                       SLA sB
 300  14C00                       SLA sC
 301  14D00                       SLA sD
 302  19001                       SUB s0, 01[1'd]
 303  362FE                       JUMP NZ, 2FE[build_value]
 304  04A50                       OR sA, s5                                              ;merge value of new digit into existing value
 305  19E01                       SUB sE, 01                                             ;count number of digits obtained
 306  362F5                       JUMP NZ, 2F5[obtain_digit]
 307  25000                       RETURN 
 308                              ;
 308                              ;
 308                              ;------------------------------------------------------------------------------------------
 308                              ; Send integer in decimal format to UART Tx
 308                              ;------------------------------------------------------------------------------------------
 308                              ;
 308                              ; The 16-bit value provided in [s3,s2] should be a positive integer and will be displayed
 308                              ; using 1 to 5 digits for values up to 65535 (i.e. leading zeros are blanked).
 308                              ;
 308                              ;
 308  1D200         send_integer: COMPARE s2, 00                                         ;test for special case of zero
 309  1F300                       COMPARECY s3, 00
 30A  32318                       JUMP Z, 318[zero_integer]
 30B                              ;
 30B  2031B                       CALL 31B[integer16_to_BCD]                             ;Convert to BCD in SPM
 30C                              ;
 30C  01A06                       LOAD sA, 06[decimal4]                                  ;pointer to BCD in SPM
 30D  01B00                       LOAD sB, 00[0'd]                                       ;flag for leading zero blanking
 30E  0A5A0    send_integer_loop: FETCH s5, (sA)
 30F  10B50                       ADD sB, s5                                             ;make sB non-zero to stop blanking
 310  1DB00                       COMPARE sB, 00[0'd]                                    ;Test for blanking
 311  32314                       JUMP Z, 314[next_int_digit]
 312  11530                       ADD s5, 30["0"]                                        ;convert to ASCII
 313  20368                       CALL 368[UART_TX]                                      ;send digit
 314  1DA02       next_int_digit: COMPARE sA, 02[decimal0]
 315  31000                       RETURN Z
 316  19A01                       SUB sA, 01[1'd]                                        ;move pointer to next digit
 317  2230E                       JUMP 30E[send_integer_loop]
 318                              ;
 318  01530         zero_integer: LOAD s5, 30["0"]                                       ;special response for zero
 319  20368                       CALL 368[UART_TX]
 31A  25000                       RETURN 
 31B                              ;
 31B                              ;
 31B                              ;------------------------------------------------------------------------------------------
 31B                              ; 16-bit integer to BCD conversion
 31B                              ;------------------------------------------------------------------------------------------
 31B                              ;
 31B                              ; Convert the 16 bit value up to FFFF hex in register set [s3,s2]
 31B                              ; into the BCD decimal equivalent up to 65,535 located in the scratch pad memory
 31B                              ; locations 'decimal0' to 'decimal4' which must be in ascending locations.
 31B                              ;
 31B                              ; Each digit is formed in turn starting with the least significant. The value
 31B                              ; contained in [s3,s2] is divided by 10 and the remainder of that integer division
 31B                              ; is the value of each digit in the range 0 to 9.
 31B                              ;
 31B                              ; Registers used s0,s2,s3,s4,s8,s9,sA,sB
 31B                              ;
 31B  01402     integer16_to_BCD: LOAD s4, 02[decimal0]                                  ;pointer for LS-Digit in scratch pad memory
 31C  20322      int_to_BCD_loop: CALL 322[divide_16bit_by_10]
 31D  2EA40                       STORE sA, (s4)                                         ;remainder is the digit value
 31E  1D406                       COMPARE s4, 06[decimal4]                               ;test for MS-Digit completed
 31F  31000                       RETURN Z
 320  11401                       ADD s4, 01[1'd]                                        ;advance pointer to next digit
 321  2231C                       JUMP 31C[int_to_BCD_loop]
 322                              ;
 322                              ; Divide 16-bit binary integer by 10
 322                              ;
 322                              ; The value to be divided by 10 should be provided in register set [s3,s2].
 322                              ; The routine will return the integer result [s3,s2]/10 back in[s3,s2]
 322                              ; with any remainder in (0 to 9) in register sA.
 322                              ;
 322                              ; Registers used s0,s2,s3,s8,s9,sA,sB
 322                              ;
 322  00A20   divide_16bit_by_10: LOAD sA, s2                                            ;copy input value into [sB,sA]
 323  00B30                       LOAD sB, s3
 324  01200                       LOAD s2, 00                                            ;clear division result
 325  01300                       LOAD s3, 00
 326  019A0                       LOAD s9, A0                                            ;initialise [s9,s8] with '10' in MSBs
 327  01800                       LOAD s8, 00
 328  0100D                       LOAD s0, 0D[13'd]                                      ;13 subtract and shift iterations to be performed
 329  18A80           div10_loop: SUB sA, s8                                             ;perform 16-bit subtract [sB,sA]-[s9,s8]
 32A  1AB90                       SUBCY sB, s9
 32B  3A32E                       JUMP C, 32E[div10_restore]                             ;if carry then could not subtract from total
 32C  14207                       SL1 s2                                                 ;shift '1' into result because subtract ok
 32D  22331                       JUMP 331[div10_shifts]
 32E  10A80        div10_restore: ADD sA, s8                                             ;perform 16-bit addition [sB,sA]+[s9,s8]
 32F  12B90                       ADDCY sB, s9                                           ;to restore total
 330  14206                       SL0 s2                                                 ;shift '0' into result because could no subtract
 331  14300         div10_shifts: SLA s3                                                 ;complete 16-bit shift left into [s3,s2]
 332  1490E                       SR0 s9                                                 ;divide '10' value by 2 (shift right 1 place)
 333  14808                       SRA s8
 334  19001                       SUB s0, 01                                             ;count iterations
 335  31000                       RETURN Z                                               ;on return the remainder of division is in sA
 336  22329                       JUMP 329[div10_loop]
 337                              ;
 337                              ;
 337                              ;------------------------------------------------------------------------------------------
 337                              ; Include PSM files
 337                              ;------------------------------------------------------------------------------------------
 337                              ;
 337                              ; The INCLUDE directive enables commonly routines to be kept in their own PSM files and
 337                              ; easily reused in different programs (i.e. avoiding 'cut and paste'). It also allows
 337                              ; each PSM to remain a more manageable size.
 337                              ;
 337                              ;
 337  01200      my_delay_ir_bit: LOAD s2, 00
 338  01122                       LOAD s1, 22
 339  010BA                       LOAD s0, BA
 33A  2235B                       JUMP 35B[software_delay]
 33B  01200         delay_ir_bit: LOAD s2, 00
 33C  01122                       LOAD s1, 22
 33D  010BA                       LOAD s0, BA
 33E  2235B                       JUMP 35B[software_delay]
 33F  01200    delay_ir_half_bit: LOAD s2, 00
 340  01111                       LOAD s1, 11
 341  0105D                       LOAD s0, 5D
 342  2235B                       JUMP 35B[software_delay]
 343  01200     delay_ir_1_8_bit: LOAD s2, 00
 344  01104                       LOAD s1, 04
 345  01057                       LOAD s0, 57
 346  2235B                       JUMP 35B[software_delay]
 347  0121E          delay_200ms: LOAD s2, 1E
 348  01184                       LOAD s1, 84
 349  01010                       LOAD s0, 10
 34A  2235B                       JUMP 35B[software_delay]
 34B  0125F             delay_1s: LOAD s2, 5F
 34C  0115E                       LOAD s1, 5E
 34D  01010                       LOAD s0, 10
 34E  2235B                       JUMP 35B[software_delay]
 34F                              ;
 34F                              ; 2ms is 10,000 x 200ns     (10,000 = 002710 hex)
 34F  01200            delay_1ms: LOAD s2, 00                                            ;2ms !
 350  01127                       LOAD s1, 27
 351  01010                       LOAD s0, 10
 352  2235B                       JUMP 35B[software_delay]
 353                              ;
 353                              ; 40ms is 200,000 x 200ns     (200,000 = 030D40 hex)
 353                              ;
 353  01203           delay_40ms: LOAD s2, 03
 354  0110D                       LOAD s1, 0D
 355  01040                       LOAD s0, 40
 356  2235B                       JUMP 35B[software_delay]
 357                              ;
 357                              ;
 357                              ; 2s is 10,000,000 x 200ns     (10,000,000 = 989680 hex)
 357                              ;
 357  01298             delay_2s: LOAD s2, 98
 358  01196                       LOAD s1, 96
 359  01080                       LOAD s0, 80
 35A  2235B                       JUMP 35B[software_delay]
 35B                              ;
 35B                              ; The delay loop decrements [s2,s1,s0] until it reaches zero
 35B                              ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
 35B                              ;
 35B  00000       software_delay: LOAD s0, s0                                            ;pad loop to make it 10 clock cycles (5 instructions) 200ns u mnie
 35C  19001                       SUB s0, 01[1'd]
 35D  1B100                       SUBCY s1, 00[0'd]
 35E  1B200                       SUBCY s2, 00[0'd]
 35F  3635B                       JUMP NZ, 35B[software_delay]
 360  25000                       RETURN 
 361                              ; Include routines that implement interface with UART macros.
 361                              ; -----------------------------------------------------------
 361                              ;
 361                              INCLUDE "C:\studia\MGR\FPGA\mgr\PicoProgram\communication_routines.psm"["communication_routines.psm"]
 361                              ;
 361                              ;------------------------------------------------------------------------------------------
 361                              ; Copyright © 2011-2012, Xilinx, Inc.
 361                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 361                              ; protected under U.S. and international copyright and other intellectual property laws.
 361                              ;------------------------------------------------------------------------------------------
 361                              ;
 361                              ; Disclaimer:
 361                              ; This disclaimer is not a license and does not grant any rights to the materials
 361                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 361                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 361                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 361                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 361                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 361                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 361                              ; (whether in contract or tort, including negligence, or under any other theory
 361                              ; of liability) for any loss or damage of any kind or nature related to, arising
 361                              ; under or in connection with these materials, including for any direct, or any
 361                              ; indirect, special, incidental, or consequential loss or damage (including loss
 361                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 361                              ; of any action brought by a third party) even if such damage or loss was
 361                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 361                              ;
 361                              ; CRITICAL APPLICATIONS
 361                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 361                              ; application requiring fail-safe performance, such as life-support or safety
 361                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 361                              ; related to the deployment of airbags, or any other applications that could lead
 361                              ; to death, personal injury, or severe property or environmental damage
 361                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 361                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 361                              ; subject only to applicable laws and regulations governing limitations on product
 361                              ; liability.
 361                              ;
 361                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 361                              ;
 361                              ;------------------------------------------------------------------------------------------
 361                              ;
 361                              ;             _  ______ ____  ____  __  __  __
 361                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 361                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 361                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 361                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 361                              ;
 361                              ;
 361                              ;                PicoBlaze Reference Design.
 361                              ;
 361                              ;
 361                              ; Ken Chapman - Xilinx Ltd
 361                              ;
 361                              ; 23rd April 2012 - Initial Release
 361                              ; 24th July 2012 - Corrections to comments only
 361                              ;
 361                              ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
 361                              ; and was first supplied with a reference design called 'uart6_605' included in the
 361                              ; PicoBlaze package. The routines enable characters to be transmitted to and received
 361                              ; from the UART macros as well as perform a reset of the FIFO the buffers.
 361                              ;
 361                              ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
 361                              ;            the reference design stated above includes this file and calls the routines
 361                              ;            contained in this file.
 361                              ;
 361                              ;                INCLUDE "uart_interface_routines.psm"
 361                              ;
 361                              ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
 361                              ;
 361                              ;
 361                              ; Whilst the reference design stated above was presented for the UART macros connected to
 361                              ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
 361                              ; any design for any board simply by setting the appropriate values in the CONSTANT
 361                              ; directives described below.
 361                              ;
 361                              ;
 361                              ;------------------------------------------------------------------------------------------
 361                              ; Hardware Constants
 361                              ;------------------------------------------------------------------------------------------
 361                              ;
 361                              ; The CONSTANT directives below define the input and output ports assigned to the UART
 361                              ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
 361                              ; Additional constants identify the allocation of signals to bits within a port.
 361                              ;
 361                              ;
 361                              ;
 361                              ; UART Status
 361                              ; -----------
 361                              ;
 361                              CONSTANT UART_status_port, 00                          ; Read status
 361                              CONSTANT UART_Tx_data_present, 00000001'b              ; Tx   data_present - bit0
 361                              CONSTANT UART_Tx_half_full, 00000010'b                 ;         half_full - bit1
 361                              CONSTANT UART_Tx_full, 00000100'b                      ;              full - bit2
 361                              CONSTANT UART_Rx_data_present, 00001000'b              ; Rx   data_present - bit3
 361                              CONSTANT UART_Rx_half_full, 00010000'b                 ;         half_full - bit4
 361                              CONSTANT UART_Rx_full, 00100000'b                      ;              full - bit5
 361                              ;
 361                              ; Write data to UART_TX6
 361                              ; ----------------------
 361                              ;
 361                              CONSTANT UART_TX6_output_port, 01
 361                              ;
 361                              ; Read data from UART_RX6
 361                              ; -----------------------
 361                              ;
 361                              CONSTANT UART_RX6_input_port, 01
 361                              ;
 361                              ; Reset UART buffers (Constant Optimised Port)
 361                              ; --------------------------------------------
 361                              ;
 361                              CONSTANT LCD_driver_send_port, 02
 361                              CONSTANT LCD_driver_en_port, 03
 361                              CONSTANT LCD_driver_ready_port, 04
 361                              CONSTANT LPC_data_port, 05
 361                              CONSTANT LPC_data_valid_port, 06
 361                              CONSTANT LPC_ready_port, 07
 361                              CONSTANT LPC_IN_data_port, 08                          ; from LPC
 361                              CONSTANT LPC_IN_data_valid_port, 09                    ; from LPC
 361                              CONSTANT LPC_IN_ready_port, 0A                         ; to LPC
 361                              CONSTANT IR_PORT, 0B
 361                              CONSTANT reset_UART_port, 01
 361                              CONSTANT UART_tx_reset, 00000001'b                     ; uart_tx6 reset - bit0
 361                              CONSTANT UART_rx_reset, 00000010'b                     ; uart_rx6 reset - bit1
 361                              CONSTANT UART_reset, 00000011'b                        ; reset Tx and Rx
 361                              CONSTANT UART_operate, 00000000'b                      ; Tx and Rx free to operate
 361                              CONSTANT LCD_en_reset, 00000000'b                      ; reset lcd en
 361                              CONSTANT LCD_en_syg, 00000001'b                        ; send lcd en
 361                              CONSTANT LCD_ready_syg, 00000001'b                     ; send lcd en
 361                              CONSTANT LCD_odebral_syg, 00000000'b
 361                              CONSTANT LPC_ready_syg, 00000001'b                     ; LPC ready to get data
 361                              CONSTANT LPC_data_valid_syg, 00000001'b                ; Pico data valid
 361                              CONSTANT LPC_dv_reset, 00000000'b                      ; reset Eth en
 361                              ;
 361                              ;
 361                              ;--------------------------------------------------------------------------------------
 361                              ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
 361                              ;--------------------------------------------------------------------------------------
 361                              ;
 361                              ; This routine will generate and apply an active High reset pulse to  the FIFO
 361                              ; buffers in both the transmitter and receiver macros.
 361                              ;
 361                              ; Note that the reset signals have been assigned to a constant optimised output port
 361                              ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
 361                              ;
 361                              ;
 361  2B031    reset_UART_macros: OUTPUTK 03[UART_reset], 1[reset_UART_port]
 362  2B001                       OUTPUTK 00[UART_operate], 1[reset_UART_port]
 363  25000                       RETURN 
 364  2B003  reset_lcd_en_status: OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 365  25000                       RETURN 
 366  2B006  reset_Eth_en_status: OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 367  25000                       RETURN 
 368                              ;
 368                              ;
 368                              ;--------------------------------------------------------------------------------------
 368                              ; Routine to send one character to the UART Transmitter 'uart_tx6'
 368                              ;--------------------------------------------------------------------------------------
 368                              ;
 368                              ; This routine will transmit the character provided in register 's5'.
 368                              ;
 368                              ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
 368                              ; is checked to see if there is space. If the buffer is full then this routine will
 368                              ; wait for space to become available (e.g. the time required for a previous character
 368                              ; to be transmitted by the UART).
 368                              ;
 368                              ; Registers used s0 and s5 for the data (which is preserved)
 368                              ;
 368  09000              UART_TX: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 369  0D004                       TEST s0, 04[UART_Tx_full]
 36A  36368                       JUMP NZ, 368[UART_TX]                                  ;wait if full
 36B  2D501                       OUTPUT s5, 01[UART_TX6_output_port]
 36C  25000                       RETURN 
 36D  09000             UART_TX2: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 36E  0D004                       TEST s0, 04[UART_Tx_full]
 36F  3636D                       JUMP NZ, 36D[UART_TX2]                                 ;wait if full
 370  2D801                       OUTPUT s8, 01[UART_TX6_output_port]
 371  25000                       RETURN 
 372                              ;--------------------------------------------------------------------------------------
 372                              ; Routine to wywsy³anie znaków do drivera lcd
 372                              ;--------------------------------------------------------------------------------------
 372  09004             LCD_send: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver mo¿e odbieraæ dane
 373  0D001                       TEST s0, 01[LCD_ready_syg]
 374  32372                       JUMP Z, 372[LCD_send]                                  ;czeka a¿ bêdzie gotowy
 375  2DF02                       OUTPUT sF, 02[LCD_driver_send_port]
 376  2B013                       OUTPUTK 01[LCD_en_syg], 3[LCD_driver_en_port]
 377  09004      LCD_czy_odebral: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver odebra³ dane
 378  0D001                       TEST s0, 01[LCD_ready_syg]
 379  3A377                       JUMP C, 377[LCD_czy_odebral]
 37A  2B003                       OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 37B  25000                       RETURN 
 37C  20368             LPC_send: CALL 368[UART_TX]
 37D  09007                       INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC mo¿e odbieraæ dane
 37E  0D001                       TEST s0, 01[LPC_ready_syg]
 37F                              ;INPUT s5, LPC_ready_port
 37F                              ;CALL UART_TX
 37F  3237C                       JUMP Z, 37C[LPC_send]
 380  2DF05                       OUTPUT sF, 05[LPC_data_port]
 381  2B016                       OUTPUTK 01[LPC_data_valid_syg], 6[LPC_data_valid_port]
 382  09007      LPC_czy_odebral: INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC odebra³ dane
 383  0D001                       TEST s0, 01[LPC_ready_syg]
 384  3A382                       JUMP C, 382[LPC_czy_odebral]
 385  2B006                       OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 386  25000                       RETURN 
 387                       petla: 
 387  20368                       CALL 368[UART_TX]
 388  22387                       JUMP 387[petla]
 389                              ;
 389                              ;
 389                              ;--------------------------------------------------------------------------------------
 389                              ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
 389                              ;--------------------------------------------------------------------------------------
 389                              ;
 389                              ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
 389                              ; successful, will return that character in register 's5' and the Zero flag will be
 389                              ; reset (Z=0).
 389                              ;
 389                              ; If there are no characters available to be read from the FIFO buffer within the
 389                              ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
 389                              ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
 389                              ; cannot become stuck in this routine if no characters are received. If you do want
 389                              ; KCPSM6 to wait indefinitely for a character to be received then either modify this
 389                              ; routine or perform a test of the Zero flag and repeat the call to this routine as
 389                              ; shown in this example...
 389                              ;
 389                              ;          wait_for_UART_RX: CALL UART_RX
 389                              ;                            JUMP Z, wait_for_UART_RX
 389                              ;
 389                              ;
 389                              ; Registers used s0, s1 and s5.
 389                              ;
 389  011A7              UART_RX: LOAD s1, A7[167'd]                                     ;Timeout = 167 x (6 instructions x 2 clock cycles)
 38A  09000           rx_timeout: INPUT s0, 00[UART_status_port]
 38B  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 38C  36390                       JUMP NZ, 390[read_Rx]
 38D  19101                       SUB s1, 01[1'd]
 38E  31000                       RETURN Z                                               ;Timeout returns with Z=1 and C=0
 38F  2238A                       JUMP 38A[rx_timeout]
 390                              ;
 390  09501              read_Rx: INPUT s5, 01[UART_RX6_input_port]                      ;read character from buffer
 391  25000                       RETURN 
 392                              ;
 392                              ;
 392                              ;------------------------------------------------------------------------------------------
 392                              ; End of 'uart_interface_routines.psm"'
 392                              ;------------------------------------------------------------------------------------------
 392                              ;
 392                              ;
 392                              ;
 392                              ;------------------------------------------------------------------------------------------
 392                              ; End of Program
 392                              ;------------------------------------------------------------------------------------------
 392                              ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\studia\MGR\FPGA\mgr\PicoProgram\program.psm
C:\studia\MGR\FPGA\mgr\PicoProgram\communication_routines.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        21'd         
 timestamp_minutes      44'd         
 timestamp_seconds      44'd         
 datestamp_year         15'd         
 datestamp_month        11'd         
 datestamp_day          26'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 hex_value0             00           program.psm
 hex_value1             01           program.psm
 decimal0               02           program.psm
 decimal1               03           program.psm
 decimal2               04           program.psm
 decimal3               05           program.psm
 decimal4               06           program.psm
 green                  03           program.psm
 red                    07           program.psm
 blue                   01           program.psm
 clear                  0F           program.psm
 UART_status_port       00           communication_routines.psm
 UART_Tx_data_present   00000001'b   communication_routines.psm
 UART_Tx_half_full      00000010'b   communication_routines.psm
 UART_Tx_full           00000100'b   communication_routines.psm
 UART_Rx_data_present   00001000'b   communication_routines.psm
 UART_Rx_half_full      00010000'b   communication_routines.psm
 UART_Rx_full           00100000'b   communication_routines.psm
 UART_TX6_output_port   01           communication_routines.psm
 UART_RX6_input_port    01           communication_routines.psm
 LCD_driver_send_port   02           communication_routines.psm
 LCD_driver_en_port     03           communication_routines.psm
 LCD_driver_ready_port  04           communication_routines.psm
 LPC_data_port          05           communication_routines.psm
 LPC_data_valid_port    06           communication_routines.psm
 LPC_ready_port         07           communication_routines.psm
 LPC_IN_data_port       08           communication_routines.psm
 LPC_IN_data_valid_port 09           communication_routines.psm
 LPC_IN_ready_port      0A           communication_routines.psm
 IR_PORT                0B           communication_routines.psm
 reset_UART_port        01           communication_routines.psm
 UART_tx_reset          00000001'b   communication_routines.psm
 UART_rx_reset          00000010'b   communication_routines.psm
 UART_reset             00000011'b   communication_routines.psm
 UART_operate           00000000'b   communication_routines.psm
 LCD_en_reset           00000000'b   communication_routines.psm
 LCD_en_syg             00000001'b   communication_routines.psm
 LCD_ready_syg          00000001'b   communication_routines.psm
 LCD_odebral_syg        00000000'b   communication_routines.psm
 LPC_ready_syg          00000001'b   communication_routines.psm
 LPC_data_valid_syg     00000001'b   communication_routines.psm
 LPC_dv_reset           00000000'b   communication_routines.psm



No TABLEs defined



List of text strings

 STRING name       String                                                                 Source PSM File

 KCPSM6_version$   "v2.70"                                                                
 datestamp$        "26 Nov 2015"                                                          
 timestamp$        "21:44:44"                                                             
 prompt$           "Please enter a 4-digit hexadecimal value"                             program.psm
 bad_hex$          "Sorry, that was not a valid 4-digit hexadecimal value!"               program.psm
 result$           "The decimal equivalent of "                                           program.psm
 banner1$          "  _  ______ ____  ____  __  __  __"                                   program.psm
 banner2$          " | |/ / ___|  _ \/ ___||  \/  |/ /_"                                  program.psm
 banner3$          " | ' / |   | |_) \___ \| |\/| | '_ \"                                 program.psm
 banner4$          " | . \ |___|  __/ ___) | |  | | (_) )"                                program.psm
 banner5$          " |_|\_\____|_|   |____/|_|  |_|\___/"                                 program.psm
 welcome1$         "Przyklad aplikacji obslugujacej portu IR z wykorzystaniem Picoblaze"  program.psm
 welcome11$        "Autor: Sebastian Kupis"                                               program.psm
 welcome2$         "Data zbudoawania: "                                                   program.psm
 welcome3$         "   Czas: "                                                            program.psm
 welcome4$         "Version: "                                                            program.psm
 welcome5$         "Hardware Design: "                                                    program.psm
 bannert$          "greeen"                                                               program.psm
 bannert2$         "blue"                                                                 program.psm
 bannert3$         "red"                                                                  program.psm
 bannert4$         "i czyszcze sobiecale UOP"                                             program.psm



List of line labels

   Label                 Addr  Source PSM File

 * cold_start            000   program.psm
   main                  004   program.psm
   IR_petla              018   program.psm
   IR_czekaj             01B   program.psm
 * IR_rx1                01F   program.psm
   next_IR_bit1          020   program.psm
 * IR_rx2                026   program.psm
   next_IR_bit2          027   program.psm
 * IR_rx3                02D   program.psm
   next_IR_bit3          02E   program.psm
   LPC_THREAD            042   program.psm
   LPC_DV_down           049   program.psm
   UART_THREAD           04E   program.psm
   which_banner          056   program.psm
   next_banner1          05F   program.psm
   next_banner2          068   program.psm
   next_banner3          071   program.psm
   just_return           07A   program.psm
   UART_RX2              07B   program.psm
 * bad_hex_input         081   program.psm
 * prompt_msg            086   program.psm
   bad_hex_msg           0AF   program.psm
 * result_msg            0E6   program.psm
   clear_screen          101   program.psm
 * cursor_home           10B   program.psm
   welcome_message       113   program.psm
   welcome_msg           11A   program.psm
   send_message          27E   program.psm
   banner_message        285   program.psm
   banner_msg            28A   program.psm
   banner2_message       291   program.psm
   banner2_msg           296   program.psm
   banner3_message       29B   program.psm
   banner3_msg           2A0   program.psm
   banner4_message       2A4   program.psm
   banner4_msg           2A9   program.psm
   send_banner           2C2   program.psm
   send_CR               2C9   program.psm
   send_space            2CB   program.psm
 * send_hex_word         2CD   program.psm
   send_hex_byte         2D1   program.psm
   hex_to_ASCII          2DD   program.psm
   number_char           2E0   program.psm
   upper_case            2E2   program.psm
   ASCII_to_hex          2E8   program.psm
   ASCII_letter          2F2   program.psm
   obtain_value          2F4   program.psm
   obtain_digit          2F5   program.psm
   build_value           2FE   program.psm
   send_integer          308   program.psm
   send_integer_loop     30E   program.psm
   next_int_digit        314   program.psm
   zero_integer          318   program.psm
   integer16_to_BCD      31B   program.psm
   int_to_BCD_loop       31C   program.psm
   divide_16bit_by_10    322   program.psm
   div10_loop            329   program.psm
   div10_restore         32E   program.psm
   div10_shifts          331   program.psm
   my_delay_ir_bit       337   program.psm
   delay_ir_bit          33B   program.psm
   delay_ir_half_bit     33F   program.psm
   delay_ir_1_8_bit      343   program.psm
   delay_200ms           347   program.psm
   delay_1s              34B   program.psm
   delay_1ms             34F   program.psm
   delay_40ms            353   program.psm
 * delay_2s              357   program.psm
   software_delay        35B   program.psm
   reset_UART_macros     361   communication_routines.psm
 * reset_lcd_en_status   364   communication_routines.psm
   reset_Eth_en_status   366   communication_routines.psm
   UART_TX               368   communication_routines.psm
   UART_TX2              36D   communication_routines.psm
   LCD_send              372   communication_routines.psm
   LCD_czy_odebral       377   communication_routines.psm
   LPC_send              37C   communication_routines.psm
   LPC_czy_odebral       382   communication_routines.psm
   petla                 387   communication_routines.psm
   UART_RX               389   communication_routines.psm
   rx_timeout            38A   communication_routines.psm
   read_Rx               390   communication_routines.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             94
 STAR              -

 AND               2
 OR                1
 XOR               -

 ADD              11
 ADDCY             3
 SUB              18
 SUBCY             3

 TEST             19
 TESTCY            -
 COMPARE           8
 COMPARECY         1

 SL0               2
 SL1               1
 SLX               -
 SLA               7
 RL                -
 SR0               5
 SR1               -
 SRX               -
 SRA               1
 RR                -

 REGBANK           -

 INPUT            19
 OUTPUT            4
 OUTPUTK          10

 STORE             1
 FETCH             1

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             57
 JUMP@             -
 CALL             79
 CALL@             2
 RETURN           40
 LOAD&RETURN     520

 HWBUILD           5



End of KCPSM6 log file.
