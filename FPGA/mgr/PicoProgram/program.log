KCPSM6 Assembler log file for program 'C:\fpga_proj\mgr\PicoProgram\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 28 Oct 2015
Assembly timestamp: 23:13:34

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 2C0 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 705
Memory locations available: 3391


Assembly listing

 Addr Code                        Instruction

 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Copyright © 2011-2013, Xilinx, Inc.
 000                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 000                              ; protected under U.S. and international copyright and other intellectual property laws.
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; Disclaimer:
 000                              ; This disclaimer is not a license and does not grant any rights to the materials
 000                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 000                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 000                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 000                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 000                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 000                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 000                              ; (whether in contract or tort, including negligence, or under any other theory
 000                              ; of liability) for any loss or damage of any kind or nature related to, arising
 000                              ; under or in connection with these materials, including for any direct, or any
 000                              ; indirect, special, incidental, or consequential loss or damage (including loss
 000                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 000                              ; of any action brought by a third party) even if such damage or loss was
 000                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 000                              ;
 000                              ; CRITICAL APPLICATIONS
 000                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 000                              ; application requiring fail-safe performance, such as life-support or safety
 000                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 000                              ; related to the deployment of airbags, or any other applications that could lead
 000                              ; to death, personal injury, or severe property or environmental damage
 000                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 000                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 000                              ; subject only to applicable laws and regulations governing limitations on product
 000                              ; liability.
 000                              ;
 000                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;             _  ______ ____  ____  __  __  __
 000                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 000                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 000                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 000                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 000                              ;
 000                              ;
 000                              ; KCPSM6 reference design using 'uart_tx6' and 'uart_rx6' macros.
 000                              ;
 000                              ; Ken Chapman - Xilinx Ltd
 000                              ;
 000                              ;      11th May 2011 - Initial version
 000                              ;   6th October 2011 - Corrections to comments only
 000                              ;    23rd April 2012 - UART interface routines placed into 'uart_interface_routines.psm'
 000                              ;                      to facilitate reuse and provide an INCLUDE directive example.
 000                              ; 7th September 2012 - Corrections to comments only
 000                              ;    12th March 2013 - Constant directives defining ASCII control characters removed
 000                              ;                        (pre-defined in KCPSM6 assembler v2.43 or later).
 000                              ;     28th June 2013 - Corrections to comment only
 000                              ;
 000                              ;
 000                              ; INTRODUCTION
 000                              ;
 000                              ; This program interacts with the 'uart_tx6' and 'uart_rx6' macros providing some simple
 000                              ; and fundamental examples of UART based communication. As such, this example is intended
 000                              ; to display messages on a PC based terminal (e.g. PicoTerm or HyperTerminal) and receive
 000                              ; inputs typed on a keyboard by the user.
 000                              ;
 000                              ; The user is prompted to enter a 4-digit hexadecimal value which KCPSM6 converts to
 000                              ; decimal and displays if it is valid. It is hoped that this will also provide you with
 000                              ; several routines that you will find useful in your own programs.
 000                              ;
 000                              ; Please see 'UART6_User_Guide_30Sept12.pdf' for more detailed descriptions of the
 000                              ; hardware circuit. The 'UART_TX' and 'UART_RX' routines that form the software interface
 000                              ; with the macros are contained in 'uart_interface_routines.psm' together with a set of
 000                              ; constants which define the allocation of I/O ports and the signals within them. The
 000                              ; 'uart_interface_routines.psm' also presents an example of using the INCLUDE directive
 000                              ; introduced with KCPSM6 Assembler v2.00.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Port definitions
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; The only I/O ports used in this design are those that interface with the UART macros.
 000                              ; CONSTANT directives defining the port addresses and the allocation of signals within
 000                              ; those ports are defined in 'uart_interface_routines.psm'.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Special Register usage
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; No registers are given special names in this program.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Scratch Pad Memory Locations
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              CONSTANT hex_value0, 00                                ;16-bit value (lower byte)
 000                              CONSTANT hex_value1, 01                                ;16-bit value (upper byte)
 000                              ;
 000                              CONSTANT decimal0, 02                                  ;5 digit decimal value
 000                              CONSTANT decimal1, 03                                  ;  Suitable for 16-bit values up to
 000                              CONSTANT decimal2, 04                                  ;   65,536
 000                              CONSTANT decimal3, 05
 000                              CONSTANT decimal4, 06
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Useful data constants
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Initialise the system
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; A delay of 1 second is implemented which is intended to give time for all the hardware
 000                              ; to settle into a stable condition before starting to doing anything. This can be
 000                              ; particularly beneficial when dealing with long cables where serial lines can take some
 000                              ; time to reach the initial idle state following power being applied.
 000                              ;
 000  200B3           cold_start: CALL 0B3[delay_1s]                                     ;
 001                              ;
 001  20290                       CALL 290[reset_UART_macros]                            ;Reset buffers in UART macros
 002                              ;
 002                              ;
 002                              ; Initialised terminal display and display welcome messages
 002                              ;
 002  200BC                       CALL 0BC[clear_screen]
 003  200CE                       CALL 0CE[welcome_message]
 004                              ;
 004                              ;
 004                              ;------------------------------------------------------------------------------------------
 004                              ; Main Program
 004                              ;------------------------------------------------------------------------------------------
 004                              ;
 004                              ;
 004  2021F                       CALL 21F[send_CR]
 005  2021F                       CALL 21F[send_CR]
 006                        main: 
 006  01F1B                       LOAD sF, 1B[ESC]
 007  0151B                       LOAD s5, 1B[ESC]
 008  202A1                       CALL 2A1[LCD_send]
 009  20297                       CALL 297[UART_TX]
 00A  01F4C                       LOAD sF, 4C["L"]
 00B  202A1                       CALL 2A1[LCD_send]
 00C  20297                       CALL 297[UART_TX]
 00D  01F50                       LOAD sF, 50["P"]
 00E  202A1                       CALL 2A1[LCD_send]
 00F  20297                       CALL 297[UART_TX]
 010  01F43                       LOAD sF, 43["C"]
 011  202A1                       CALL 2A1[LCD_send]
 012  20297                       CALL 297[UART_TX]
 013  01F32                       LOAD sF, 32["2"]
 014  202A1                       CALL 2A1[LCD_send]
 015  20297                       CALL 297[UART_TX]
 016  01F33                       LOAD sF, 33["3"]
 017  202A1                       CALL 2A1[LCD_send]
 018  20297                       CALL 297[UART_TX]
 019  2B01A           LPC_THREAD: OUTPUTK 01[LPC_ready_syg], A[LPC_IN_ready_port]
 01A  09009                       INPUT s0, 09[LPC_IN_data_valid_port]
 01B  0D001                       TEST s0, 01[LPC_data_valid_syg]                        ;Z=0 and C=1 when data present
 01C  32019                       JUMP Z, 019[LPC_THREAD]
 01D  09508                       INPUT s5, 08[LPC_IN_data_port]
 01E                              ;INPUT sf, LPC_IN_data_port
 01E                              ;load sf,s5
 01E                              ;LOAD sF, "z"
 01E                              ;load s5,sf
 01E                              ;CALL LCD_send
 01E  20297                       CALL 297[UART_TX]
 01F                              ;LOAD s5, "C"
 01F  2B00A          LPC_DV_down: OUTPUTK 00[00000000'b], A[LPC_IN_ready_port]
 020  09009                       INPUT s0, 09[LPC_IN_data_valid_port]                   ;Sprawdza czy driver odebra³ dane
 021  0D001                       TEST s0, 01[LPC_data_valid_syg]
 022  3A01F                       JUMP C, 01F[LPC_DV_down]
 023                              ;CALL LPC_send
 023                              ;CALL LCD_send
 023                              ;CALL UART_TX
 023  22019                       JUMP 019[LPC_THREAD]
 024  09000          UART_THREAD: INPUT s0, 00[UART_status_port]
 025  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 026  32024                       JUMP Z, 024[UART_THREAD]
 027  09501                       INPUT s5, 01[UART_RX6_input_port]
 028  00F50                       LOAD sF, s5
 029  202AB                       CALL 2AB[LPC_send]
 02A                              ;CALL LCD_send
 02A  22024                       JUMP 024[UART_THREAD]
 02B  2021F        bad_hex_input: CALL 21F[send_CR]
 02C  01B00                       LOAD sB, 00[bad_hex_msg'upper]                         ;tell user input was invalid hex
 02D  01A59                       LOAD sA, 59[bad_hex_msg'lower]
 02E  20218                       CALL 218[send_message]
 02F  22006                       JUMP 006[main]
 030                              ;
 030                              ;
 030                              ; Text messages used in main section of the program
 030                              ;
 030                              STRING prompt$, "Please enter a 4-digit hexadecimal value"
 030                              STRING bad_hex$, "Sorry, that was not a valid 4-digit hexadecimal value!"
 030                              STRING result$, "The decimal equivalent of "
 030                              ;
 030  21550           prompt_msg: LOAD&RETURN s5, 50[prompt$:"P"]
 031  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 032  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 033  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 034  21573                       LOAD&RETURN s5, 73[prompt$:"s"]
 035  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 036  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 037  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 038  2156E                       LOAD&RETURN s5, 6E[prompt$:"n"]
 039  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 03A  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 03B  21572                       LOAD&RETURN s5, 72[prompt$:"r"]
 03C  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 03D  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 03E  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 03F  21534                       LOAD&RETURN s5, 34[prompt$:"4"]
 040  2152D                       LOAD&RETURN s5, 2D[prompt$:"-"]
 041  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 042  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 043  21567                       LOAD&RETURN s5, 67[prompt$:"g"]
 044  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 045  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 046  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 047  21568                       LOAD&RETURN s5, 68[prompt$:"h"]
 048  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 049  21578                       LOAD&RETURN s5, 78[prompt$:"x"]
 04A  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 04B  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 04C  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 04D  21563                       LOAD&RETURN s5, 63[prompt$:"c"]
 04E  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 04F  2156D                       LOAD&RETURN s5, 6D[prompt$:"m"]
 050  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 051  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 052  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 053  21576                       LOAD&RETURN s5, 76[prompt$:"v"]
 054  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 055  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 056  21575                       LOAD&RETURN s5, 75[prompt$:"u"]
 057  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 058  21500                       LOAD&RETURN s5, 00[NUL]
 059                              ;
 059  21553          bad_hex_msg: LOAD&RETURN s5, 53[bad_hex$:"S"]
 05A  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 05B  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 05C  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 05D  21579                       LOAD&RETURN s5, 79[bad_hex$:"y"]
 05E  2152C                       LOAD&RETURN s5, 2C[bad_hex$:","]
 05F  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 060  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 061  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 062  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 063  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 064  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 065  21577                       LOAD&RETURN s5, 77[bad_hex$:"w"]
 066  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 067  21573                       LOAD&RETURN s5, 73[bad_hex$:"s"]
 068  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 069  2156E                       LOAD&RETURN s5, 6E[bad_hex$:"n"]
 06A  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 06B  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 06C  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 06D  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 06E  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 06F  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 070  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 071  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 072  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 073  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 074  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 075  21534                       LOAD&RETURN s5, 34[bad_hex$:"4"]
 076  2152D                       LOAD&RETURN s5, 2D[bad_hex$:"-"]
 077  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 078  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 079  21567                       LOAD&RETURN s5, 67[bad_hex$:"g"]
 07A  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 07B  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 07C  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 07D  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 07E  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 07F  21578                       LOAD&RETURN s5, 78[bad_hex$:"x"]
 080  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 081  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 082  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 083  21563                       LOAD&RETURN s5, 63[bad_hex$:"c"]
 084  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 085  2156D                       LOAD&RETURN s5, 6D[bad_hex$:"m"]
 086  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 087  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 088  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 089  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 08A  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 08B  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 08C  21575                       LOAD&RETURN s5, 75[bad_hex$:"u"]
 08D  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 08E  21521                       LOAD&RETURN s5, 21[bad_hex$:"!"]
 08F  21500                       LOAD&RETURN s5, 00[NUL]
 090                              ;
 090  21554           result_msg: LOAD&RETURN s5, 54[result$:"T"]
 091  21568                       LOAD&RETURN s5, 68[result$:"h"]
 092  21565                       LOAD&RETURN s5, 65[result$:"e"]
 093  21520                       LOAD&RETURN s5, 20[result$:" "]
 094  21564                       LOAD&RETURN s5, 64[result$:"d"]
 095  21565                       LOAD&RETURN s5, 65[result$:"e"]
 096  21563                       LOAD&RETURN s5, 63[result$:"c"]
 097  21569                       LOAD&RETURN s5, 69[result$:"i"]
 098  2156D                       LOAD&RETURN s5, 6D[result$:"m"]
 099  21561                       LOAD&RETURN s5, 61[result$:"a"]
 09A  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 09B  21520                       LOAD&RETURN s5, 20[result$:" "]
 09C  21565                       LOAD&RETURN s5, 65[result$:"e"]
 09D  21571                       LOAD&RETURN s5, 71[result$:"q"]
 09E  21575                       LOAD&RETURN s5, 75[result$:"u"]
 09F  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0A0  21576                       LOAD&RETURN s5, 76[result$:"v"]
 0A1  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0A2  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0A3  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0A4  2156E                       LOAD&RETURN s5, 6E[result$:"n"]
 0A5  21574                       LOAD&RETURN s5, 74[result$:"t"]
 0A6  21520                       LOAD&RETURN s5, 20[result$:" "]
 0A7  2156F                       LOAD&RETURN s5, 6F[result$:"o"]
 0A8  21566                       LOAD&RETURN s5, 66[result$:"f"]
 0A9  21520                       LOAD&RETURN s5, 20[result$:" "]
 0AA  21500                       LOAD&RETURN s5, 00[NUL]
 0AB                              ;
 0AB                              ;
 0AB                              ;------------------------------------------------------------------------------------------
 0AB                              ; Software Delays
 0AB                              ;------------------------------------------------------------------------------------------
 0AB                              ;
 0AB                              ; All based on 50MHz clock
 0AB                              ; The number of iterations of a delay loop required to form each delay required are
 0AB                              ; loaded into the register set [s2,s1,s0] and then the delay loop is started.
 0AB                              ;
 0AB                              ; Registers used s0, s1, s2
 0AB                              ;
 0AB                              ;1ms is 50,000 clock cycles requiring 6,250 delay iterations
 0AB                              ;
 0AB  01200            delay_1ms: LOAD s2, 00
 0AC  01118                       LOAD s1, 18
 0AD  0106A                       LOAD s0, 6A
 0AE  220B7                       JUMP 0B7[software_delay]
 0AF                              ;
 0AF                              ;20ms is 1,000,000 clock cycles requiring 125,000 delay iterations
 0AF                              ;
 0AF  01201           delay_20ms: LOAD s2, 01
 0B0  011E8                       LOAD s1, E8
 0B1  01048                       LOAD s0, 48
 0B2  220B7                       JUMP 0B7[software_delay]
 0B3                              ;
 0B3                              ;1s is 50,000,000 clock cycles requiring 6,250,000 delay iterations
 0B3                              ;
 0B3  0125F             delay_1s: LOAD s2, 5F
 0B4  0115E                       LOAD s1, 5E
 0B5  01010                       LOAD s0, 10
 0B6  220B7                       JUMP 0B7[software_delay]
 0B7                              ;
 0B7                              ; The delay loop decrements [s2,s1,s0] until it reaches zero
 0B7                              ; Each decrement cycle is 4 instructions which is 8 clock cycles (160ns at 50MHz)
 0B7                              ;
 0B7  19001       software_delay: SUB s0, 01[1'd]
 0B8  1B100                       SUBCY s1, 00[0'd]
 0B9  1B200                       SUBCY s2, 00[0'd]
 0BA  360B7                       JUMP NZ, 0B7[software_delay]
 0BB  25000                       RETURN 
 0BC                              ;
 0BC                              ;
 0BC                              ;------------------------------------------------------------------------------------------
 0BC                              ; Clear terminal and home cursor sequences for HyperTerminal (or similar)
 0BC                              ;------------------------------------------------------------------------------------------
 0BC                              ;
 0BC                              ; ANSI Escape Sequences/codes (VT100)
 0BC                              ;
 0BC  0151B         clear_screen: LOAD s5, 1B[ESC]                                       ;clear terminal sequence
 0BD  20297                       CALL 297[UART_TX]
 0BE  0155B                       LOAD s5, 5B["["]
 0BF  20297                       CALL 297[UART_TX]
 0C0  01532                       LOAD s5, 32["2"]
 0C1  20297                       CALL 297[UART_TX]
 0C2  0154A                       LOAD s5, 4A["J"]
 0C3  20297                       CALL 297[UART_TX]
 0C4  200AB                       CALL 0AB[delay_1ms]                                    ;Delay for reliable operation
 0C5  25000                       RETURN 
 0C6                              ;
 0C6  0151B          cursor_home: LOAD s5, 1B[ESC]                                       ;Send cursor to upper-left of display
 0C7  20297                       CALL 297[UART_TX]
 0C8  0155B                       LOAD s5, 5B["["]
 0C9  20297                       CALL 297[UART_TX]
 0CA  01548                       LOAD s5, 48["H"]
 0CB  20297                       CALL 297[UART_TX]
 0CC  200AB                       CALL 0AB[delay_1ms]                                    ;Delay for reliable operation
 0CD  25000                       RETURN 
 0CE                              ;
 0CE                              ;
 0CE                              ;------------------------------------------------------------------------------------------
 0CE                              ; Welcome Message.
 0CE                              ;------------------------------------------------------------------------------------------
 0CE                              ;
 0CE                              ; The welcome message includes a display of the version information available from the
 0CE                              ; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
 0CE                              ;
 0CE  01B00      welcome_message: LOAD sB, 00[welcome_msg'upper]
 0CF  01AD5                       LOAD sA, D5[welcome_msg'lower]
 0D0  20218                       CALL 218[send_message]
 0D1  14580                       HWBUILD s5                                             ;hardware version defines ASCII letter
 0D2  20297                       CALL 297[UART_TX]
 0D3  2021F                       CALL 21F[send_CR]
 0D4  25000                       RETURN 
 0D5                              ;
 0D5                              ; Welcome message
 0D5                              ;
 0D5                              STRING banner1$, "  _  ______ ____  ____  __  __  __"
 0D5                              STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
 0D5                              STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
 0D5                              STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
 0D5                              STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
 0D5                              ;
 0D5                              ; Welcome message
 0D5                              ;
 0D5                              STRING welcome1$, "Example using the 'uart_tx6' and 'uart_rx6' macros"
 0D5                              STRING welcome2$, "Assembly Date: "
 0D5                              STRING welcome3$, "   Time: "
 0D5                              STRING welcome4$, "Assembler Version: "
 0D5                              STRING welcome5$, "Hardware Design: "
 0D5                              ;
 0D5                              ;
 0D5  21520          welcome_msg: LOAD&RETURN s5, 20[banner1$:" "]
 0D6  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0D7  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0D8  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0D9  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0DA  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0DB  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0DC  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0DD  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0DE  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0DF  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E0  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0E1  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E2  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E3  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E4  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E5  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0E6  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0E7  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E8  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0E9  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0EA  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0EB  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0EC  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0ED  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0EE  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0EF  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0F0  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0F1  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0F2  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0F3  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0F4  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0F5  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0F6  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0F7  2150D                       LOAD&RETURN s5, 0D[CR]
 0F8  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 0F9  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 0FA  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 0FB  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 0FC  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 0FD  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 0FE  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 0FF  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 100  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 101  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 102  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 103  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 104  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 105  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 106  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 107  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 108  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 109  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 10A  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 10B  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 10C  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 10D  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 10E  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 10F  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 110  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 111  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 112  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 113  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 114  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 115  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 116  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 117  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 118  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 119  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 11A  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 11B  2150D                       LOAD&RETURN s5, 0D[CR]
 11C  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 11D  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 11E  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 11F  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 120  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 121  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 122  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 123  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 124  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 125  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 126  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 127  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 128  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 129  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 12A  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 12B  21529                       LOAD&RETURN s5, 29[banner3$:")"]
 12C  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 12D  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 12E  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 12F  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 130  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 131  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 132  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 133  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 134  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 135  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 136  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 137  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 138  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 139  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 13A  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 13B  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 13C  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 13D  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 13E  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 13F  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 140  2150D                       LOAD&RETURN s5, 0D[CR]
 141  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 142  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 143  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 144  2152E                       LOAD&RETURN s5, 2E[banner4$:"."]
 145  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 146  2155C                       LOAD&RETURN s5, 5C[banner4$:"\"]
 147  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 148  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 149  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 14A  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 14B  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 14C  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 14D  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 14E  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 14F  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 150  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 151  2152F                       LOAD&RETURN s5, 2F[banner4$:"/"]
 152  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 153  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 154  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 155  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 156  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 157  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 158  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 159  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 15A  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 15B  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 15C  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 15D  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 15E  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 15F  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 160  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 161  21528                       LOAD&RETURN s5, 28[banner4$:"("]
 162  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 163  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 164  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 165  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 166  2150D                       LOAD&RETURN s5, 0D[CR]
 167  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 168  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 169  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 16A  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 16B  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 16C  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 16D  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 16E  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 16F  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 170  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 171  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 172  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 173  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 174  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 175  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 176  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 177  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 178  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 179  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 17A  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 17B  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 17C  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 17D  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 17E  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 17F  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 180  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 181  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 182  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 183  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 184  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 185  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 186  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 187  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 188  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 189  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 18A  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 18B  2150D                       LOAD&RETURN s5, 0D[CR]
 18C  2150D                       LOAD&RETURN s5, 0D[CR]
 18D  21545                       LOAD&RETURN s5, 45[welcome1$:"E"]
 18E  21578                       LOAD&RETURN s5, 78[welcome1$:"x"]
 18F  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 190  2156D                       LOAD&RETURN s5, 6D[welcome1$:"m"]
 191  21570                       LOAD&RETURN s5, 70[welcome1$:"p"]
 192  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 193  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 194  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 195  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 196  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 197  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 198  2156E                       LOAD&RETURN s5, 6E[welcome1$:"n"]
 199  21567                       LOAD&RETURN s5, 67[welcome1$:"g"]
 19A  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 19B  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 19C  21568                       LOAD&RETURN s5, 68[welcome1$:"h"]
 19D  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 19E  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 19F  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1A0  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1A1  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1A2  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1A3  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1A4  2155F                       LOAD&RETURN s5, 5F[welcome1$:"_"]
 1A5  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1A6  21578                       LOAD&RETURN s5, 78[welcome1$:"x"]
 1A7  21536                       LOAD&RETURN s5, 36[welcome1$:"6"]
 1A8  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1A9  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1AA  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1AB  2156E                       LOAD&RETURN s5, 6E[welcome1$:"n"]
 1AC  21564                       LOAD&RETURN s5, 64[welcome1$:"d"]
 1AD  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1AE  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1AF  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1B0  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1B1  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1B2  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1B3  2155F                       LOAD&RETURN s5, 5F[welcome1$:"_"]
 1B4  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1B5  21578                       LOAD&RETURN s5, 78[welcome1$:"x"]
 1B6  21536                       LOAD&RETURN s5, 36[welcome1$:"6"]
 1B7  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1B8  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1B9  2156D                       LOAD&RETURN s5, 6D[welcome1$:"m"]
 1BA  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1BB  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 1BC  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1BD  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 1BE  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 1BF  2150D                       LOAD&RETURN s5, 0D[CR]
 1C0  2150D                       LOAD&RETURN s5, 0D[CR]
 1C1  21541                       LOAD&RETURN s5, 41[welcome2$:"A"]
 1C2  21573                       LOAD&RETURN s5, 73[welcome2$:"s"]
 1C3  21573                       LOAD&RETURN s5, 73[welcome2$:"s"]
 1C4  21565                       LOAD&RETURN s5, 65[welcome2$:"e"]
 1C5  2156D                       LOAD&RETURN s5, 6D[welcome2$:"m"]
 1C6  21562                       LOAD&RETURN s5, 62[welcome2$:"b"]
 1C7  2156C                       LOAD&RETURN s5, 6C[welcome2$:"l"]
 1C8  21579                       LOAD&RETURN s5, 79[welcome2$:"y"]
 1C9  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 1CA  21544                       LOAD&RETURN s5, 44[welcome2$:"D"]
 1CB  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 1CC  21574                       LOAD&RETURN s5, 74[welcome2$:"t"]
 1CD  21565                       LOAD&RETURN s5, 65[welcome2$:"e"]
 1CE  2153A                       LOAD&RETURN s5, 3A[welcome2$:":"]
 1CF  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 1D0  21532                       LOAD&RETURN s5, 32[datestamp$:"2"]
 1D1  21538                       LOAD&RETURN s5, 38[datestamp$:"8"]
 1D2  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 1D3  2154F                       LOAD&RETURN s5, 4F[datestamp$:"O"]
 1D4  21563                       LOAD&RETURN s5, 63[datestamp$:"c"]
 1D5  21574                       LOAD&RETURN s5, 74[datestamp$:"t"]
 1D6  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 1D7  21532                       LOAD&RETURN s5, 32[datestamp$:"2"]
 1D8  21530                       LOAD&RETURN s5, 30[datestamp$:"0"]
 1D9  21531                       LOAD&RETURN s5, 31[datestamp$:"1"]
 1DA  21535                       LOAD&RETURN s5, 35[datestamp$:"5"]
 1DB  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 1DC  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 1DD  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 1DE  21554                       LOAD&RETURN s5, 54[welcome3$:"T"]
 1DF  21569                       LOAD&RETURN s5, 69[welcome3$:"i"]
 1E0  2156D                       LOAD&RETURN s5, 6D[welcome3$:"m"]
 1E1  21565                       LOAD&RETURN s5, 65[welcome3$:"e"]
 1E2  2153A                       LOAD&RETURN s5, 3A[welcome3$:":"]
 1E3  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 1E4  21532                       LOAD&RETURN s5, 32[timestamp$:"2"]
 1E5  21533                       LOAD&RETURN s5, 33[timestamp$:"3"]
 1E6  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 1E7  21531                       LOAD&RETURN s5, 31[timestamp$:"1"]
 1E8  21533                       LOAD&RETURN s5, 33[timestamp$:"3"]
 1E9  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 1EA  21533                       LOAD&RETURN s5, 33[timestamp$:"3"]
 1EB  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 1EC  2150D                       LOAD&RETURN s5, 0D[CR]
 1ED  21541                       LOAD&RETURN s5, 41[welcome4$:"A"]
 1EE  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 1EF  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 1F0  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 1F1  2156D                       LOAD&RETURN s5, 6D[welcome4$:"m"]
 1F2  21562                       LOAD&RETURN s5, 62[welcome4$:"b"]
 1F3  2156C                       LOAD&RETURN s5, 6C[welcome4$:"l"]
 1F4  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 1F5  21572                       LOAD&RETURN s5, 72[welcome4$:"r"]
 1F6  21520                       LOAD&RETURN s5, 20[welcome4$:" "]
 1F7  21556                       LOAD&RETURN s5, 56[welcome4$:"V"]
 1F8  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 1F9  21572                       LOAD&RETURN s5, 72[welcome4$:"r"]
 1FA  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 1FB  21569                       LOAD&RETURN s5, 69[welcome4$:"i"]
 1FC  2156F                       LOAD&RETURN s5, 6F[welcome4$:"o"]
 1FD  2156E                       LOAD&RETURN s5, 6E[welcome4$:"n"]
 1FE  2153A                       LOAD&RETURN s5, 3A[welcome4$:":"]
 1FF  21520                       LOAD&RETURN s5, 20[welcome4$:" "]
 200  21576                       LOAD&RETURN s5, 76[KCPSM6_version$:"v"]
 201  21532                       LOAD&RETURN s5, 32[KCPSM6_version$:"2"]
 202  2152E                       LOAD&RETURN s5, 2E[KCPSM6_version$:"."]
 203  21537                       LOAD&RETURN s5, 37[KCPSM6_version$:"7"]
 204  21530                       LOAD&RETURN s5, 30[KCPSM6_version$:"0"]
 205  2150D                       LOAD&RETURN s5, 0D[CR]
 206  21548                       LOAD&RETURN s5, 48[welcome5$:"H"]
 207  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 208  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 209  21564                       LOAD&RETURN s5, 64[welcome5$:"d"]
 20A  21577                       LOAD&RETURN s5, 77[welcome5$:"w"]
 20B  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 20C  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 20D  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 20E  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 20F  21544                       LOAD&RETURN s5, 44[welcome5$:"D"]
 210  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 211  21573                       LOAD&RETURN s5, 73[welcome5$:"s"]
 212  21569                       LOAD&RETURN s5, 69[welcome5$:"i"]
 213  21567                       LOAD&RETURN s5, 67[welcome5$:"g"]
 214  2156E                       LOAD&RETURN s5, 6E[welcome5$:"n"]
 215  2153A                       LOAD&RETURN s5, 3A[welcome5$:":"]
 216  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 217  21500                       LOAD&RETURN s5, 00[NUL]
 218                              ;
 218                              ;
 218                              ;------------------------------------------------------------------------------------------
 218                              ; Send a message to the UART
 218                              ;------------------------------------------------------------------------------------------
 218                              ;
 218                              ; A message is transmitted to the USB-UART.
 218                              ; The start address of the message must be provided in [sB,sA].
 218                              ; Terminate the transmission with a NULL character (00 hex).
 218                              ;
 218  24BA0         send_message: CALL@ (sB, sA)
 219  1D500                       COMPARE s5, 00                                         ;terminate on NUL character
 21A  31000                       RETURN Z
 21B  20297                       CALL 297[UART_TX]
 21C  11A01                       ADD sA, 01[1'd]
 21D  13B00                       ADDCY sB, 00[0'd]
 21E  22218                       JUMP 218[send_message]
 21F                              ;
 21F                              ;
 21F                              ;------------------------------------------------------------------------------------------
 21F                              ; Send Carriage Return to UART
 21F                              ;------------------------------------------------------------------------------------------
 21F                              ;
 21F                              ; Registers used s0, s1, s2, and s5.
 21F                              ;
 21F  0150D              send_CR: LOAD s5, 0D[CR]
 220  22297                       JUMP 297[UART_TX]                                      ;includes RETURN
 221                              ;
 221                              ;
 221                              ;------------------------------------------------------------------------------------------
 221                              ; Send a Space to UART
 221                              ;------------------------------------------------------------------------------------------
 221                              ;
 221                              ; Registers used s0, s1, s2, and s5.
 221                              ;
 221  01520           send_space: LOAD s5, 20[" "]
 222  22297                       JUMP 297[UART_TX]                                      ;includes RETURN
 223                              ;
 223                              ;
 223                              ;------------------------------------------------------------------------------------------
 223                              ; Send Hex Value of 16-bit word to UART
 223                              ;------------------------------------------------------------------------------------------
 223                              ;
 223                              ; Value provided in register pair [sB,sA] is sent as ASCII HEX to the UART
 223                              ; transmitter.
 223                              ;
 223                              ; Registers used s0, s1, s2, s4, s5, sA and sB.
 223                              ;
 223  004B0        send_hex_word: LOAD s4, sB
 224  20227                       CALL 227[send_hex_byte]
 225  004A0                       LOAD s4, sA
 226  22227                       JUMP 227[send_hex_byte]                                ;includes RETURN
 227                              ;
 227                              ;
 227                              ;------------------------------------------------------------------------------------------
 227                              ; Send Hex Value of Byte to UART
 227                              ;------------------------------------------------------------------------------------------
 227                              ;
 227                              ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
 227                              ;
 227                              ; Registers used s0, s4 (preserved) and s5.
 227                              ;
 227  00540        send_hex_byte: LOAD s5, s4                                            ;isolate upper nibble
 228  1450E                       SR0 s5
 229  1450E                       SR0 s5
 22A  1450E                       SR0 s5
 22B  1450E                       SR0 s5
 22C  20233                       CALL 233[hex_to_ASCII]                                 ; convert to ASCII
 22D  20297                       CALL 297[UART_TX]                                      ;send upper digit to UART
 22E  00540                       LOAD s5, s4                                            ;isolate lower nibble
 22F  0350F                       AND s5, 0F
 230  20233                       CALL 233[hex_to_ASCII]                                 ; convert to ASCII
 231  20297                       CALL 297[UART_TX]                                      ;send lower digit to UART
 232  25000                       RETURN 
 233                              ;
 233                              ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
 233                              ;
 233                              ; Register used s5
 233                              ;
 233  1950A         hex_to_ASCII: SUB s5, 0A                                             ;test if value is in range 0 to 9
 234  3A236                       JUMP C, 236[number_char]
 235  11507                       ADD s5, 07                                             ;ASCII char A to F in range 41 to 46
 236  1153A          number_char: ADD s5, 3A                                             ;ASCII char 0 to 9 in range 30 to 40
 237  25000                       RETURN 
 238                              ;
 238                              ;
 238                              ;------------------------------------------------------------------------------------------
 238                              ; Converts character to upper case
 238                              ;------------------------------------------------------------------------------------------
 238                              ;
 238                              ; Tests and converts character in 's5' (if necessary).
 238                              ;
 238                              ; To convert character to upper case
 238                              ;
 238                              ; If the character is in the range 'a' to 'z', it is converted
 238                              ; to the equivalent upper case character in the range 'A' to 'Z'.
 238                              ; All other characters remain unchanged.
 238                              ;
 238  1D561           upper_case: COMPARE s5, 61["a"]                                    ;eliminate character codes below 'a' (61 hex)
 239  39000                       RETURN C
 23A  1D57B                       COMPARE s5, 7B                                         ;eliminate character codes above 'z' (7A hex)
 23B  3D000                       RETURN NC
 23C  035DF                       AND s5, DF[11011111'b]                                 ;force bit5 Low to convert to upper case
 23D  25000                       RETURN 
 23E                              ;
 23E                              ;
 23E                              ;------------------------------------------------------------------------------------------
 23E                              ; Convert ASCII character to an equivalent HEX value.
 23E                              ;------------------------------------------------------------------------------------------
 23E                              ;
 23E                              ; Converts the ASCII character presented in 's5' to an equivalent HEX value.
 23E                              ; If character is not valid for hex, then CARRY is set on return.
 23E                              ;
 23E                              ; Register used s5
 23E                              ;
 23E  115B9         ASCII_to_hex: ADD s5, B9                                             ;test for above ASCII code 46 ('F')
 23F  39000                       RETURN C
 240  195E9                       SUB s5, E9                                             ;normalise 0 to 9 with A-F in 11 to 16 hex
 241  39000                       RETURN C                                               ;reject below ASCII code 30 ('0')
 242  19511                       SUB s5, 11                                             ;isolate A-F down to 00 to 05 hex
 243  3E248                       JUMP NC, 248[ASCII_letter]
 244  11507                       ADD s5, 07                                             ;test for above ASCII code 46 ('F')
 245  39000                       RETURN C
 246  195F6                       SUB s5, F6                                             ;convert to range 00 to 09
 247  25000                       RETURN 
 248  1150A         ASCII_letter: ADD s5, 0A                                             ;convert to range 0A to 0F
 249  25000                       RETURN 
 24A                              ;
 24A                              ;
 24A                              ;------------------------------------------------------------------------------------------
 24A                              ; Read ASCII-HEX value up to 8-digits (for 32-bit value) from UART
 24A                              ;------------------------------------------------------------------------------------------
 24A                              ;
 24A                              ; Read up to 8 hex characters from UART and convert to a binary value in the [sD,sC,sB,sA]
 24A                              ; register set. The number of characters to be read must be defined in sE. When less than
 24A                              ; 8 characters are read the value is returned in the least significant bits of the register
 24A                              ; set with the 8-bits above the defined value being zero to ensure ensuring that the upper
 24A                              ; nibble will be zero if an odd number of digits are read.
 24A                              ;
 24A                              ; If any character received from the UART is not in the range 0 to F then the routine will
 24A                              ; end immediately with the CARRY flag set and this should be checked by the calling process
 24A                              ; upon return.
 24A                              ;
 24A  01A00         obtain_value: LOAD sA, 00                                            ;initialise potentially unused bits to zero
 24B  202B8         obtain_digit: CALL 2B8[UART_RX]                                      ;wait for a character and return in s5
 24C  3224B                       JUMP Z, 24B[obtain_digit]                              ;continue to wait if timeout occurs
 24D  01F1B                       LOAD sF, 1B[ESC]
 24E  202A1                       CALL 2A1[LCD_send]
 24F  00F50                       LOAD sF, s5
 250  202A1                       CALL 2A1[LCD_send]
 251  20297                       CALL 297[UART_TX]                                      ;echo character as entered
 252  20297                       CALL 297[UART_TX]                                      ;echo character as entered
 253  20238                       CALL 238[upper_case]                                   ;convert to upper case if necessary
 254  2023E                       CALL 23E[ASCII_to_hex]                                 ;convert value in s5 to hex nibble
 255  39000                       RETURN C                                               ;If invalid hex digit then return immediately
 256  01004                       LOAD s0, 04[4'd]                                       ;shift [sD,sC,sB,sA] left by 4 bits
 257  14A06          build_value: SL0 sA                                                 ;  to make space for new digit value
 258  14B00                       SLA sB
 259  14C00                       SLA sC
 25A  14D00                       SLA sD
 25B  19001                       SUB s0, 01[1'd]
 25C  36257                       JUMP NZ, 257[build_value]
 25D  04A50                       OR sA, s5                                              ;merge value of new digit into existing value
 25E  19E01                       SUB sE, 01                                             ;count number of digits obtained
 25F  3624B                       JUMP NZ, 24B[obtain_digit]
 260  25000                       RETURN 
 261                              ;
 261                              ;
 261                              ;------------------------------------------------------------------------------------------
 261                              ; Send integer in decimal format to UART Tx
 261                              ;------------------------------------------------------------------------------------------
 261                              ;
 261                              ; The 16-bit value provided in [s3,s2] should be a positive integer and will be displayed
 261                              ; using 1 to 5 digits for values up to 65535 (i.e. leading zeros are blanked).
 261                              ;
 261                              ;
 261  1D200         send_integer: COMPARE s2, 00                                         ;test for special case of zero
 262  1F300                       COMPARECY s3, 00
 263  32271                       JUMP Z, 271[zero_integer]
 264                              ;
 264  20274                       CALL 274[integer16_to_BCD]                             ;Convert to BCD in SPM
 265                              ;
 265  01A06                       LOAD sA, 06[decimal4]                                  ;pointer to BCD in SPM
 266  01B00                       LOAD sB, 00[0'd]                                       ;flag for leading zero blanking
 267  0A5A0    send_integer_loop: FETCH s5, (sA)
 268  10B50                       ADD sB, s5                                             ;make sB non-zero to stop blanking
 269  1DB00                       COMPARE sB, 00[0'd]                                    ;Test for blanking
 26A  3226D                       JUMP Z, 26D[next_int_digit]
 26B  11530                       ADD s5, 30["0"]                                        ;convert to ASCII
 26C  20297                       CALL 297[UART_TX]                                      ;send digit
 26D  1DA02       next_int_digit: COMPARE sA, 02[decimal0]
 26E  31000                       RETURN Z
 26F  19A01                       SUB sA, 01[1'd]                                        ;move pointer to next digit
 270  22267                       JUMP 267[send_integer_loop]
 271                              ;
 271  01530         zero_integer: LOAD s5, 30["0"]                                       ;special response for zero
 272  20297                       CALL 297[UART_TX]
 273  25000                       RETURN 
 274                              ;
 274                              ;
 274                              ;------------------------------------------------------------------------------------------
 274                              ; 16-bit integer to BCD conversion
 274                              ;------------------------------------------------------------------------------------------
 274                              ;
 274                              ; Convert the 16 bit value up to FFFF hex in register set [s3,s2]
 274                              ; into the BCD decimal equivalent up to 65,535 located in the scratch pad memory
 274                              ; locations 'decimal0' to 'decimal4' which must be in ascending locations.
 274                              ;
 274                              ; Each digit is formed in turn starting with the least significant. The value
 274                              ; contained in [s3,s2] is divided by 10 and the remainder of that integer division
 274                              ; is the value of each digit in the range 0 to 9.
 274                              ;
 274                              ; Registers used s0,s2,s3,s4,s8,s9,sA,sB
 274                              ;
 274  01402     integer16_to_BCD: LOAD s4, 02[decimal0]                                  ;pointer for LS-Digit in scratch pad memory
 275  2027B      int_to_BCD_loop: CALL 27B[divide_16bit_by_10]
 276  2EA40                       STORE sA, (s4)                                         ;remainder is the digit value
 277  1D406                       COMPARE s4, 06[decimal4]                               ;test for MS-Digit completed
 278  31000                       RETURN Z
 279  11401                       ADD s4, 01[1'd]                                        ;advance pointer to next digit
 27A  22275                       JUMP 275[int_to_BCD_loop]
 27B                              ;
 27B                              ; Divide 16-bit binary integer by 10
 27B                              ;
 27B                              ; The value to be divided by 10 should be provided in register set [s3,s2].
 27B                              ; The routine will return the integer result [s3,s2]/10 back in[s3,s2]
 27B                              ; with any remainder in (0 to 9) in register sA.
 27B                              ;
 27B                              ; Registers used s0,s2,s3,s8,s9,sA,sB
 27B                              ;
 27B  00A20   divide_16bit_by_10: LOAD sA, s2                                            ;copy input value into [sB,sA]
 27C  00B30                       LOAD sB, s3
 27D  01200                       LOAD s2, 00                                            ;clear division result
 27E  01300                       LOAD s3, 00
 27F  019A0                       LOAD s9, A0                                            ;initialise [s9,s8] with '10' in MSBs
 280  01800                       LOAD s8, 00
 281  0100D                       LOAD s0, 0D[13'd]                                      ;13 subtract and shift iterations to be performed
 282  18A80           div10_loop: SUB sA, s8                                             ;perform 16-bit subtract [sB,sA]-[s9,s8]
 283  1AB90                       SUBCY sB, s9
 284  3A287                       JUMP C, 287[div10_restore]                             ;if carry then could not subtract from total
 285  14207                       SL1 s2                                                 ;shift '1' into result because subtract ok
 286  2228A                       JUMP 28A[div10_shifts]
 287  10A80        div10_restore: ADD sA, s8                                             ;perform 16-bit addition [sB,sA]+[s9,s8]
 288  12B90                       ADDCY sB, s9                                           ;to restore total
 289  14206                       SL0 s2                                                 ;shift '0' into result because could no subtract
 28A  14300         div10_shifts: SLA s3                                                 ;complete 16-bit shift left into [s3,s2]
 28B  1490E                       SR0 s9                                                 ;divide '10' value by 2 (shift right 1 place)
 28C  14808                       SRA s8
 28D  19001                       SUB s0, 01                                             ;count iterations
 28E  31000                       RETURN Z                                               ;on return the remainder of division is in sA
 28F  22282                       JUMP 282[div10_loop]
 290                              ;
 290                              ;
 290                              ;------------------------------------------------------------------------------------------
 290                              ; Include PSM files
 290                              ;------------------------------------------------------------------------------------------
 290                              ;
 290                              ; The INCLUDE directive enables commonly routines to be kept in their own PSM files and
 290                              ; easily reused in different programs (i.e. avoiding 'cut and paste'). It also allows
 290                              ; each PSM to remain a more manageable size.
 290                              ;
 290                              ;
 290                              ; Include routines that implement interface with UART macros.
 290                              ; -----------------------------------------------------------
 290                              ;
 290                              INCLUDE "C:\fpga_proj\mgr\PicoProgram\communication_routines.psm"["communication_routines.psm"]
 290                              ;
 290                              ;------------------------------------------------------------------------------------------
 290                              ; Copyright © 2011-2012, Xilinx, Inc.
 290                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 290                              ; protected under U.S. and international copyright and other intellectual property laws.
 290                              ;------------------------------------------------------------------------------------------
 290                              ;
 290                              ; Disclaimer:
 290                              ; This disclaimer is not a license and does not grant any rights to the materials
 290                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 290                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 290                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 290                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 290                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 290                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 290                              ; (whether in contract or tort, including negligence, or under any other theory
 290                              ; of liability) for any loss or damage of any kind or nature related to, arising
 290                              ; under or in connection with these materials, including for any direct, or any
 290                              ; indirect, special, incidental, or consequential loss or damage (including loss
 290                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 290                              ; of any action brought by a third party) even if such damage or loss was
 290                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 290                              ;
 290                              ; CRITICAL APPLICATIONS
 290                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 290                              ; application requiring fail-safe performance, such as life-support or safety
 290                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 290                              ; related to the deployment of airbags, or any other applications that could lead
 290                              ; to death, personal injury, or severe property or environmental damage
 290                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 290                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 290                              ; subject only to applicable laws and regulations governing limitations on product
 290                              ; liability.
 290                              ;
 290                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 290                              ;
 290                              ;------------------------------------------------------------------------------------------
 290                              ;
 290                              ;             _  ______ ____  ____  __  __  __
 290                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 290                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 290                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 290                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 290                              ;
 290                              ;
 290                              ;                PicoBlaze Reference Design.
 290                              ;
 290                              ;
 290                              ; Ken Chapman - Xilinx Ltd
 290                              ;
 290                              ; 23rd April 2012 - Initial Release
 290                              ; 24th July 2012 - Corrections to comments only
 290                              ;
 290                              ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
 290                              ; and was first supplied with a reference design called 'uart6_605' included in the
 290                              ; PicoBlaze package. The routines enable characters to be transmitted to and received
 290                              ; from the UART macros as well as perform a reset of the FIFO the buffers.
 290                              ;
 290                              ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
 290                              ;            the reference design stated above includes this file and calls the routines
 290                              ;            contained in this file.
 290                              ;
 290                              ;                INCLUDE "uart_interface_routines.psm"
 290                              ;
 290                              ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
 290                              ;
 290                              ;
 290                              ; Whilst the reference design stated above was presented for the UART macros connected to
 290                              ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
 290                              ; any design for any board simply by setting the appropriate values in the CONSTANT
 290                              ; directives described below.
 290                              ;
 290                              ;
 290                              ;------------------------------------------------------------------------------------------
 290                              ; Hardware Constants
 290                              ;------------------------------------------------------------------------------------------
 290                              ;
 290                              ; The CONSTANT directives below define the input and output ports assigned to the UART
 290                              ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
 290                              ; Additional constants identify the allocation of signals to bits within a port.
 290                              ;
 290                              ;
 290                              ;
 290                              ; UART Status
 290                              ; -----------
 290                              ;
 290                              CONSTANT UART_status_port, 00                          ; Read status
 290                              CONSTANT UART_Tx_data_present, 00000001'b              ; Tx   data_present - bit0
 290                              CONSTANT UART_Tx_half_full, 00000010'b                 ;         half_full - bit1
 290                              CONSTANT UART_Tx_full, 00000100'b                      ;              full - bit2
 290                              CONSTANT UART_Rx_data_present, 00001000'b              ; Rx   data_present - bit3
 290                              CONSTANT UART_Rx_half_full, 00010000'b                 ;         half_full - bit4
 290                              CONSTANT UART_Rx_full, 00100000'b                      ;              full - bit5
 290                              ;
 290                              ; Write data to UART_TX6
 290                              ; ----------------------
 290                              ;
 290                              CONSTANT UART_TX6_output_port, 01
 290                              ;
 290                              ; Read data from UART_RX6
 290                              ; -----------------------
 290                              ;
 290                              CONSTANT UART_RX6_input_port, 01
 290                              ;
 290                              ; Reset UART buffers (Constant Optimised Port)
 290                              ; --------------------------------------------
 290                              ;
 290                              CONSTANT LCD_driver_send_port, 02
 290                              CONSTANT LCD_driver_en_port, 03
 290                              CONSTANT LCD_driver_ready_port, 04
 290                              CONSTANT LPC_data_port, 05
 290                              CONSTANT LPC_data_valid_port, 06
 290                              CONSTANT LPC_ready_port, 07
 290                              CONSTANT LPC_IN_data_port, 08                          ; from LPC
 290                              CONSTANT LPC_IN_data_valid_port, 09                    ; from LPC
 290                              CONSTANT LPC_IN_ready_port, 0A                         ; to LPC
 290                              CONSTANT reset_UART_port, 01
 290                              CONSTANT UART_tx_reset, 00000001'b                     ; uart_tx6 reset - bit0
 290                              CONSTANT UART_rx_reset, 00000010'b                     ; uart_rx6 reset - bit1
 290                              CONSTANT UART_reset, 00000011'b                        ; reset Tx and Rx
 290                              CONSTANT UART_operate, 00000000'b                      ; Tx and Rx free to operate
 290                              CONSTANT LCD_en_reset, 00000000'b                      ; reset lcd en
 290                              CONSTANT LCD_en_syg, 00000001'b                        ; send lcd en
 290                              CONSTANT LCD_ready_syg, 00000001'b                     ; send lcd en
 290                              CONSTANT LCD_odebral_syg, 00000000'b
 290                              CONSTANT LPC_ready_syg, 00000001'b                     ; LPC ready to get data
 290                              CONSTANT LPC_data_valid_syg, 00000001'b                ; Pico data valid
 290                              CONSTANT LPC_dv_reset, 00000000'b                      ; reset Eth en
 290                              ;
 290                              ;
 290                              ;--------------------------------------------------------------------------------------
 290                              ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
 290                              ;--------------------------------------------------------------------------------------
 290                              ;
 290                              ; This routine will generate and apply an active High reset pulse to  the FIFO
 290                              ; buffers in both the transmitter and receiver macros.
 290                              ;
 290                              ; Note that the reset signals have been assigned to a constant optimised output port
 290                              ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
 290                              ;
 290                              ;
 290  2B031    reset_UART_macros: OUTPUTK 03[UART_reset], 1[reset_UART_port]
 291  2B001                       OUTPUTK 00[UART_operate], 1[reset_UART_port]
 292  25000                       RETURN 
 293  2B003  reset_lcd_en_status: OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 294  25000                       RETURN 
 295  2B006  reset_Eth_en_status: OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 296  25000                       RETURN 
 297                              ;
 297                              ;
 297                              ;--------------------------------------------------------------------------------------
 297                              ; Routine to send one character to the UART Transmitter 'uart_tx6'
 297                              ;--------------------------------------------------------------------------------------
 297                              ;
 297                              ; This routine will transmit the character provided in register 's5'.
 297                              ;
 297                              ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
 297                              ; is checked to see if there is space. If the buffer is full then this routine will
 297                              ; wait for space to become available (e.g. the time required for a previous character
 297                              ; to be transmitted by the UART).
 297                              ;
 297                              ; Registers used s0 and s5 for the data (which is preserved)
 297                              ;
 297  09000              UART_TX: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 298  0D004                       TEST s0, 04[UART_Tx_full]
 299  36297                       JUMP NZ, 297[UART_TX]                                  ;wait if full
 29A  2D501                       OUTPUT s5, 01[UART_TX6_output_port]
 29B  25000                       RETURN 
 29C  09000             UART_TX2: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 29D  0D004                       TEST s0, 04[UART_Tx_full]
 29E  3629C                       JUMP NZ, 29C[UART_TX2]                                 ;wait if full
 29F  2D801                       OUTPUT s8, 01[UART_TX6_output_port]
 2A0  25000                       RETURN 
 2A1                              ;--------------------------------------------------------------------------------------
 2A1                              ; Routine to wywsy³anie znaków do drivera lcd
 2A1                              ;--------------------------------------------------------------------------------------
 2A1  09004             LCD_send: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver mo¿e odbieraæ dane
 2A2  0D001                       TEST s0, 01[LCD_ready_syg]
 2A3  322A1                       JUMP Z, 2A1[LCD_send]                                  ;czeka a¿ bêdzie gotowy
 2A4  2DF02                       OUTPUT sF, 02[LCD_driver_send_port]
 2A5  2B013                       OUTPUTK 01[LCD_en_syg], 3[LCD_driver_en_port]
 2A6  09004      LCD_czy_odebral: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver odebra³ dane
 2A7  0D001                       TEST s0, 01[LCD_ready_syg]
 2A8  3A2A6                       JUMP C, 2A6[LCD_czy_odebral]
 2A9  2B003                       OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 2AA  25000                       RETURN 
 2AB  20297             LPC_send: CALL 297[UART_TX]
 2AC  09007                       INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC mo¿e odbieraæ dane
 2AD  0D001                       TEST s0, 01[LPC_ready_syg]
 2AE                              ;INPUT s5, LPC_ready_port
 2AE                              ;CALL UART_TX
 2AE  322AB                       JUMP Z, 2AB[LPC_send]
 2AF  2DF05                       OUTPUT sF, 05[LPC_data_port]
 2B0  2B016                       OUTPUTK 01[LPC_data_valid_syg], 6[LPC_data_valid_port]
 2B1  09007      LPC_czy_odebral: INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC odebra³ dane
 2B2  0D001                       TEST s0, 01[LPC_ready_syg]
 2B3  3A2B1                       JUMP C, 2B1[LPC_czy_odebral]
 2B4  2B006                       OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 2B5  25000                       RETURN 
 2B6                       petla: 
 2B6  20297                       CALL 297[UART_TX]
 2B7  222B6                       JUMP 2B6[petla]
 2B8                              ;
 2B8                              ;
 2B8                              ;--------------------------------------------------------------------------------------
 2B8                              ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
 2B8                              ;--------------------------------------------------------------------------------------
 2B8                              ;
 2B8                              ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
 2B8                              ; successful, will return that character in register 's5' and the Zero flag will be
 2B8                              ; reset (Z=0).
 2B8                              ;
 2B8                              ; If there are no characters available to be read from the FIFO buffer within the
 2B8                              ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
 2B8                              ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
 2B8                              ; cannot become stuck in this routine if no characters are received. If you do want
 2B8                              ; KCPSM6 to wait indefinitely for a character to be received then either modify this
 2B8                              ; routine or perform a test of the Zero flag and repeat the call to this routine as
 2B8                              ; shown in this example...
 2B8                              ;
 2B8                              ;          wait_for_UART_RX: CALL UART_RX
 2B8                              ;                            JUMP Z, wait_for_UART_RX
 2B8                              ;
 2B8                              ;
 2B8                              ; Registers used s0, s1 and s5.
 2B8                              ;
 2B8  011A7              UART_RX: LOAD s1, A7[167'd]                                     ;Timeout = 167 x (6 instructions x 2 clock cycles)
 2B9  09000           rx_timeout: INPUT s0, 00[UART_status_port]
 2BA  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 2BB  362BF                       JUMP NZ, 2BF[read_Rx]
 2BC  19101                       SUB s1, 01[1'd]
 2BD  31000                       RETURN Z                                               ;Timeout returns with Z=1 and C=0
 2BE  222B9                       JUMP 2B9[rx_timeout]
 2BF                              ;
 2BF  09501              read_Rx: INPUT s5, 01[UART_RX6_input_port]                      ;read character from buffer
 2C0  25000                       RETURN 
 2C1                              ;
 2C1                              ;
 2C1                              ;------------------------------------------------------------------------------------------
 2C1                              ; End of 'uart_interface_routines.psm"'
 2C1                              ;------------------------------------------------------------------------------------------
 2C1                              ;
 2C1                              ;
 2C1                              ;
 2C1                              ;------------------------------------------------------------------------------------------
 2C1                              ; End of Program
 2C1                              ;------------------------------------------------------------------------------------------
 2C1                              ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\fpga_proj\mgr\PicoProgram\program.psm
C:\fpga_proj\mgr\PicoProgram\communication_routines.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        23'd         
 timestamp_minutes      13'd         
 timestamp_seconds      34'd         
 datestamp_year         15'd         
 datestamp_month        10'd         
 datestamp_day          28'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 hex_value0             00           program.psm
 hex_value1             01           program.psm
 decimal0               02           program.psm
 decimal1               03           program.psm
 decimal2               04           program.psm
 decimal3               05           program.psm
 decimal4               06           program.psm
 UART_status_port       00           communication_routines.psm
 UART_Tx_data_present   00000001'b   communication_routines.psm
 UART_Tx_half_full      00000010'b   communication_routines.psm
 UART_Tx_full           00000100'b   communication_routines.psm
 UART_Rx_data_present   00001000'b   communication_routines.psm
 UART_Rx_half_full      00010000'b   communication_routines.psm
 UART_Rx_full           00100000'b   communication_routines.psm
 UART_TX6_output_port   01           communication_routines.psm
 UART_RX6_input_port    01           communication_routines.psm
 LCD_driver_send_port   02           communication_routines.psm
 LCD_driver_en_port     03           communication_routines.psm
 LCD_driver_ready_port  04           communication_routines.psm
 LPC_data_port          05           communication_routines.psm
 LPC_data_valid_port    06           communication_routines.psm
 LPC_ready_port         07           communication_routines.psm
 LPC_IN_data_port       08           communication_routines.psm
 LPC_IN_data_valid_port 09           communication_routines.psm
 LPC_IN_ready_port      0A           communication_routines.psm
 reset_UART_port        01           communication_routines.psm
 UART_tx_reset          00000001'b   communication_routines.psm
 UART_rx_reset          00000010'b   communication_routines.psm
 UART_reset             00000011'b   communication_routines.psm
 UART_operate           00000000'b   communication_routines.psm
 LCD_en_reset           00000000'b   communication_routines.psm
 LCD_en_syg             00000001'b   communication_routines.psm
 LCD_ready_syg          00000001'b   communication_routines.psm
 LCD_odebral_syg        00000000'b   communication_routines.psm
 LPC_ready_syg          00000001'b   communication_routines.psm
 LPC_data_valid_syg     00000001'b   communication_routines.psm
 LPC_dv_reset           00000000'b   communication_routines.psm



No TABLEs defined



List of text strings

 STRING name       String                                                    Source PSM File

 KCPSM6_version$   "v2.70"                                                   
 datestamp$        "28 Oct 2015"                                             
 timestamp$        "23:13:34"                                                
 prompt$           "Please enter a 4-digit hexadecimal value"                program.psm
 bad_hex$          "Sorry, that was not a valid 4-digit hexadecimal value!"  program.psm
 result$           "The decimal equivalent of "                              program.psm
 banner1$          "  _  ______ ____  ____  __  __  __"                      program.psm
 banner2$          " | |/ / ___|  _ \/ ___||  \/  |/ /_"                     program.psm
 banner3$          " | ' / |   | |_) \___ \| |\/| | '_ \"                    program.psm
 banner4$          " | . \ |___|  __/ ___) | |  | | (_) )"                   program.psm
 banner5$          " |_|\_\____|_|   |____/|_|  |_|\___/"                    program.psm
 welcome1$         "Example using the 'uart_tx6' and 'uart_rx6' macros"      program.psm
 welcome2$         "Assembly Date: "                                         program.psm
 welcome3$         "   Time: "                                               program.psm
 welcome4$         "Assembler Version: "                                     program.psm
 welcome5$         "Hardware Design: "                                       program.psm



List of line labels

   Label                 Addr  Source PSM File

 * cold_start            000   program.psm
   main                  006   program.psm
   LPC_THREAD            019   program.psm
   LPC_DV_down           01F   program.psm
   UART_THREAD           024   program.psm
 * bad_hex_input         02B   program.psm
 * prompt_msg            030   program.psm
   bad_hex_msg           059   program.psm
 * result_msg            090   program.psm
   delay_1ms             0AB   program.psm
 * delay_20ms            0AF   program.psm
   delay_1s              0B3   program.psm
   software_delay        0B7   program.psm
   clear_screen          0BC   program.psm
 * cursor_home           0C6   program.psm
   welcome_message       0CE   program.psm
   welcome_msg           0D5   program.psm
   send_message          218   program.psm
   send_CR               21F   program.psm
 * send_space            221   program.psm
 * send_hex_word         223   program.psm
   send_hex_byte         227   program.psm
   hex_to_ASCII          233   program.psm
   number_char           236   program.psm
   upper_case            238   program.psm
   ASCII_to_hex          23E   program.psm
   ASCII_letter          248   program.psm
 * obtain_value          24A   program.psm
   obtain_digit          24B   program.psm
   build_value           257   program.psm
 * send_integer          261   program.psm
   send_integer_loop     267   program.psm
   next_int_digit        26D   program.psm
   zero_integer          271   program.psm
   integer16_to_BCD      274   program.psm
   int_to_BCD_loop       275   program.psm
   divide_16bit_by_10    27B   program.psm
   div10_loop            282   program.psm
   div10_restore         287   program.psm
   div10_shifts          28A   program.psm
   reset_UART_macros     290   communication_routines.psm
 * reset_lcd_en_status   293   communication_routines.psm
 * reset_Eth_en_status   295   communication_routines.psm
   UART_TX               297   communication_routines.psm
   UART_TX2              29C   communication_routines.psm
   LCD_send              2A1   communication_routines.psm
   LCD_czy_odebral       2A6   communication_routines.psm
   LPC_send              2AB   communication_routines.psm
   LPC_czy_odebral       2B1   communication_routines.psm
   petla                 2B6   communication_routines.psm
   UART_RX               2B8   communication_routines.psm
   rx_timeout            2B9   communication_routines.psm
   read_Rx               2BF   communication_routines.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             50
 STAR              -

 AND               2
 OR                1
 XOR               -

 ADD              10
 ADDCY             2
 SUB              11
 SUBCY             3

 TEST             10
 TESTCY            -
 COMPARE           7
 COMPARECY         1

 SL0               2
 SL1               1
 SLX               -
 SLA               4
 RL                -
 SR0               5
 SR1               -
 SRX               -
 SRA               1
 RR                -

 REGBANK           -

 INPUT            13
 OUTPUT            4
 OUTPUTK          10

 STORE             1
 FETCH             1

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             35
 JUMP@             -
 CALL             53
 CALL@             1
 RETURN           30
 LOAD&RETURN     446

 HWBUILD           1



End of KCPSM6 log file.
