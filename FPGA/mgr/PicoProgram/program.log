KCPSM6 Assembler log file for program 'C:\studia\MGR\FPGA\mgr\PicoProgram\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 01 Dec 2015
Assembly timestamp: 22:24:44

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 3E6 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 999
Memory locations available: 3097


Assembly listing

 Addr Code                        Instruction

 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Copyright © 2011-2013, Xilinx, Inc.
 000                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 000                              ; protected under U.S. and international copyright and other intellectual property laws.
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; Disclaimer:
 000                              ; This disclaimer is not a license and does not grant any rights to the materials
 000                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 000                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 000                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 000                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 000                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 000                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 000                              ; (whether in contract or tort, including negligence, or under any other theory
 000                              ; of liability) for any loss or damage of any kind or nature related to, arising
 000                              ; under or in connection with these materials, including for any direct, or any
 000                              ; indirect, special, incidental, or consequential loss or damage (including loss
 000                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 000                              ; of any action brought by a third party) even if such damage or loss was
 000                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 000                              ;
 000                              ; CRITICAL APPLICATIONS
 000                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 000                              ; application requiring fail-safe performance, such as life-support or safety
 000                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 000                              ; related to the deployment of airbags, or any other applications that could lead
 000                              ; to death, personal injury, or severe property or environmental damage
 000                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 000                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 000                              ; subject only to applicable laws and regulations governing limitations on product
 000                              ; liability.
 000                              ;
 000                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;             _  ______ ____  ____  __  __  __
 000                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 000                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 000                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 000                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 000                              ;
 000                              ;
 000                              ; KCPSM6 reference design using 'uart_tx6' and 'uart_rx6' macros.
 000                              ;
 000                              ; Ken Chapman - Xilinx Ltd
 000                              ;
 000                              ;      11th May 2011 - Initial version
 000                              ;   6th October 2011 - Corrections to comments only
 000                              ;    23rd April 2012 - UART interface routines placed into 'uart_interface_routines.psm'
 000                              ;                      to facilitate reuse and provide an INCLUDE directive example.
 000                              ; 7th September 2012 - Corrections to comments only
 000                              ;    12th March 2013 - Constant directives defining ASCII control characters removed
 000                              ;                        (pre-defined in KCPSM6 assembler v2.43 or later).
 000                              ;     28th June 2013 - Corrections to comment only
 000                              ;
 000                              ;
 000                              ; INTRODUCTION
 000                              ;
 000                              ; This program interacts with the 'uart_tx6' and 'uart_rx6' macros providing some simple
 000                              ; and fundamental examples of UART based communication. As such, this example is intended
 000                              ; to display messages on a PC based terminal (e.g. PicoTerm or HyperTerminal) and receive
 000                              ; inputs typed on a keyboard by the user.
 000                              ;
 000                              ; The user is prompted to enter a 4-digit hexadecimal value which KCPSM6 converts to
 000                              ; decimal and displays if it is valid. It is hoped that this will also provide you with
 000                              ; several routines that you will find useful in your own programs.
 000                              ;
 000                              ; Please see 'UART6_User_Guide_30Sept12.pdf' for more detailed descriptions of the
 000                              ; hardware circuit. The 'UART_TX' and 'UART_RX' routines that form the software interface
 000                              ; with the macros are contained in 'uart_interface_routines.psm' together with a set of
 000                              ; constants which define the allocation of I/O ports and the signals within them. The
 000                              ; 'uart_interface_routines.psm' also presents an example of using the INCLUDE directive
 000                              ; introduced with KCPSM6 Assembler v2.00.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Port definitions
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; The only I/O ports used in this design are those that interface with the UART macros.
 000                              ; CONSTANT directives defining the port addresses and the allocation of signals within
 000                              ; those ports are defined in 'uart_interface_routines.psm'.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Special Register usage
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; No registers are given special names in this program.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Scratch Pad Memory Locations
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              CONSTANT hex_value0, 00                                ;16-bit value (lower byte)
 000                              CONSTANT hex_value1, 01                                ;16-bit value (upper byte)
 000                              ;
 000                              CONSTANT decimal0, 02                                  ;5 digit decimal value
 000                              CONSTANT decimal1, 03                                  ;  Suitable for 16-bit values up to
 000                              CONSTANT decimal2, 04                                  ;   65,536
 000                              CONSTANT decimal3, 05
 000                              CONSTANT decimal4, 06
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Useful data constants
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Initialise the system
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; A delay of 1 second is implemented which is intended to give time for all the hardware
 000                              ; to settle into a stable condition before starting to doing anything. This can be
 000                              ; particularly beneficial when dealing with long cables where serial lines can take some
 000                              ; time to reach the initial idle state following power being applied.
 000                              ;
 000  20167           cold_start: CALL 167[delay_1s]                                     ;
 001                              ;
 001  2017D                       CALL 17D[reset_UART_macros]                            ;Reset buffers in UART macros
 002                              ;
 002                              ;
 002                              ; Initialised terminal display and display welcome messages
 002                              ;
 002  200D3                       CALL 0D3[clear_screen]
 003  20231                       CALL 231[welcome_message]
 004                              ;
 004                              ;
 004                              ;------------------------------------------------------------------------------------------
 004                              ; Main Program
 004                              ;------------------------------------------------------------------------------------------
 004                              ;
 004                              ;
 004  200E5                 main: CALL 0E5[send_CR]
 005  01F1B                       LOAD sF, 1B[ESC]
 006  0151B                       LOAD s5, 1B[ESC]
 007  20189                       CALL 189[LCD_send]
 008  20184                       CALL 184[UART_TX]
 009  01F4C                       LOAD sF, 4C["L"]
 00A  20189                       CALL 189[LCD_send]
 00B  20184                       CALL 184[UART_TX]
 00C  01F50                       LOAD sF, 50["P"]
 00D  20189                       CALL 189[LCD_send]
 00E  20184                       CALL 184[UART_TX]
 00F  01F43                       LOAD sF, 43["C"]
 010  20189                       CALL 189[LCD_send]
 011  20184                       CALL 184[UART_TX]
 012  01F32                       LOAD sF, 32["2"]
 013  20189                       CALL 189[LCD_send]
 014  20184                       CALL 184[UART_TX]
 015  01F33                       LOAD sF, 33["3"]
 016  20189                       CALL 189[LCD_send]
 017  20184                       CALL 184[UART_TX]
 018                              ;jump UART_THREAD
 018                              ;jump LPC_THREAD
 018  01706            IR_petla1: LOAD s7, 06
 019  01A00            IR_petla2: LOAD sA, 00[00000000'b]
 01A  01B00                       LOAD sB, 00[00000000'b]
 01B  01C00                       LOAD sC, 00[00000000'b]
 01C  0900B            IR_czekaj: INPUT s0, 0B[IR_PORT]
 01D  0D001                       TEST s0, 01[00000001'b]
 01E  3A01C                       JUMP C, 01C[IR_czekaj]
 01F  2015F                       CALL 15F[delay_ir_1_8_bit]
 020  01403               IR_rx1: LOAD s4, 03                                            ;8-bits to transmit and receive
 021  20153         next_IR_bit1: CALL 153[my_delay_ir_bit]                              ;prepare next bit to transmit
 022  0930B                       INPUT s3, 0B[IR_PORT]                                  ;read input bit
 023  0D301                       TEST s3, 01[00000001'b]                                ;carry flag becomes value of received bit
 024  14A00                       SLA sA                                                 ;shift new data into result and move to next transmit bit
 025  19401                       SUB s4, 01                                             ;count bits
 026  36021                       JUMP NZ, 021[next_IR_bit1]                             ;repeat until last bit
 027  01405               IR_rx2: LOAD s4, 05                                            ;8-bits to transmit and receive
 028  20153         next_IR_bit2: CALL 153[my_delay_ir_bit]                              ;prepare next bit to transmit
 029  0930B                       INPUT s3, 0B[IR_PORT]                                  ;read input bit
 02A  0D301                       TEST s3, 01[00000001'b]                                ;carry flag becomes value of received bit
 02B  14B00                       SLA sB                                                 ;shift new data into result and move to next transmit bit
 02C  19401                       SUB s4, 01                                             ;count bits
 02D  36028                       JUMP NZ, 028[next_IR_bit2]                             ;repeat until last bit
 02E  01406               IR_rx3: LOAD s4, 06                                            ;8-bits to transmit and receive
 02F  20153         next_IR_bit3: CALL 153[my_delay_ir_bit]                              ;prepare next bit to transmit
 030  0930B                       INPUT s3, 0B[IR_PORT]                                  ;read input bit
 031  0D301                       TEST s3, 01[00000001'b]                                ;carry flag becomes value of received bit
 032  14C00                       SLA sC                                                 ;shift new data into result and move to next transmit bit
 033  19401                       SUB s4, 01                                             ;count bits
 034  3602F                       JUMP NZ, 02F[next_IR_bit3]                             ;repeat until last bit
 035  200E5                       CALL 0E5[send_CR]
 036  004A0                       LOAD s4, sA
 037  200ED                       CALL 0ED[send_hex_byte]
 038  200E7                       CALL 0E7[send_space]
 039  004B0                       LOAD s4, sB
 03A  200ED                       CALL 0ED[send_hex_byte]
 03B  200E7                       CALL 0E7[send_space]
 03C  004C0                       LOAD s4, sC
 03D  200ED                       CALL 0ED[send_hex_byte]
 03E  201A8                       CALL 1A8[convert_send]
 03F                              ;load sF, sC
 03F                              ;CALL LPC_send
 03F                              ;CALL LCD_send
 03F                              ;SUB s7, 01
 03F  36019                       JUMP NZ, 019[IR_petla2]
 040  2B01A           LPC_THREAD: OUTPUTK 01[LPC_ready_syg], A[LPC_IN_ready_port]
 041  09009                       INPUT s0, 09[LPC_IN_data_valid_port]
 042  0D001                       TEST s0, 01[LPC_data_valid_syg]                        ;Z=0 and C=1 when data present
 043  32040                       JUMP Z, 040[LPC_THREAD]
 044  09508                       INPUT s5, 08[LPC_IN_data_port]
 045                              ;CALL UART_TX
 045  2020C                       CALL 20C[which_banner]
 046                              ;LOAD s5, "C"
 046  2B00A          LPC_DV_down: OUTPUTK 00[00000000'b], A[LPC_IN_ready_port]
 047  09009                       INPUT s0, 09[LPC_IN_data_valid_port]                   ;Sprawdza czy driver odebra³ dane
 048  0D001                       TEST s0, 01[LPC_data_valid_syg]
 049  3A046                       JUMP C, 046[LPC_DV_down]
 04A                              ;CALL LPC_send
 04A                              ;CALL LCD_send
 04A                              ;CALL UART_TX
 04A  22018                       JUMP 018[IR_petla1]
 04B  09000          UART_THREAD: INPUT s0, 00[UART_status_port]
 04C  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 04D  3204B                       JUMP Z, 04B[UART_THREAD]
 04E  09501                       INPUT s5, 01[UART_RX6_input_port]
 04F  00F50                       LOAD sF, s5
 050                              ;CALL UART_TX
 050  20193                       CALL 193[LPC_send]
 051  20189                       CALL 189[LCD_send]
 052  2204B                       JUMP 04B[UART_THREAD]
 053                              ;
 053  200E5        bad_hex_input: CALL 0E5[send_CR]
 054  01B00                       LOAD sB, 00[bad_hex_msg'upper]                         ;tell user input was invalid hex
 055  01A81                       LOAD sA, 81[bad_hex_msg'lower]
 056  2039C                       CALL 39C[send_message]
 057  22004                       JUMP 004[main]
 058                              ;
 058                              ;
 058                              ; Text messages used in main section of the program
 058                              ;
 058                              STRING prompt$, "Please enter a 4-digit hexadecimal value"
 058                              STRING bad_hex$, "Sorry, that was not a valid 4-digit hexadecimal value!"
 058                              STRING result$, "The decimal equivalent of "
 058                              ;
 058  21550           prompt_msg: LOAD&RETURN s5, 50[prompt$:"P"]
 059  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 05A  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 05B  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 05C  21573                       LOAD&RETURN s5, 73[prompt$:"s"]
 05D  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 05E  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 05F  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 060  2156E                       LOAD&RETURN s5, 6E[prompt$:"n"]
 061  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 062  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 063  21572                       LOAD&RETURN s5, 72[prompt$:"r"]
 064  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 065  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 066  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 067  21534                       LOAD&RETURN s5, 34[prompt$:"4"]
 068  2152D                       LOAD&RETURN s5, 2D[prompt$:"-"]
 069  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 06A  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 06B  21567                       LOAD&RETURN s5, 67[prompt$:"g"]
 06C  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 06D  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 06E  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 06F  21568                       LOAD&RETURN s5, 68[prompt$:"h"]
 070  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 071  21578                       LOAD&RETURN s5, 78[prompt$:"x"]
 072  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 073  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 074  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 075  21563                       LOAD&RETURN s5, 63[prompt$:"c"]
 076  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 077  2156D                       LOAD&RETURN s5, 6D[prompt$:"m"]
 078  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 079  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 07A  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 07B  21576                       LOAD&RETURN s5, 76[prompt$:"v"]
 07C  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 07D  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 07E  21575                       LOAD&RETURN s5, 75[prompt$:"u"]
 07F  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 080  21500                       LOAD&RETURN s5, 00[NUL]
 081                              ;
 081  21553          bad_hex_msg: LOAD&RETURN s5, 53[bad_hex$:"S"]
 082  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 083  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 084  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 085  21579                       LOAD&RETURN s5, 79[bad_hex$:"y"]
 086  2152C                       LOAD&RETURN s5, 2C[bad_hex$:","]
 087  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 088  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 089  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 08A  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 08B  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 08C  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 08D  21577                       LOAD&RETURN s5, 77[bad_hex$:"w"]
 08E  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 08F  21573                       LOAD&RETURN s5, 73[bad_hex$:"s"]
 090  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 091  2156E                       LOAD&RETURN s5, 6E[bad_hex$:"n"]
 092  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 093  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 094  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 095  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 096  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 097  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 098  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 099  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 09A  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 09B  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 09C  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 09D  21534                       LOAD&RETURN s5, 34[bad_hex$:"4"]
 09E  2152D                       LOAD&RETURN s5, 2D[bad_hex$:"-"]
 09F  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 0A0  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0A1  21567                       LOAD&RETURN s5, 67[bad_hex$:"g"]
 0A2  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0A3  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 0A4  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0A5  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 0A6  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0A7  21578                       LOAD&RETURN s5, 78[bad_hex$:"x"]
 0A8  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0A9  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 0AA  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0AB  21563                       LOAD&RETURN s5, 63[bad_hex$:"c"]
 0AC  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0AD  2156D                       LOAD&RETURN s5, 6D[bad_hex$:"m"]
 0AE  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0AF  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0B0  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0B1  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 0B2  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0B3  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0B4  21575                       LOAD&RETURN s5, 75[bad_hex$:"u"]
 0B5  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0B6  21521                       LOAD&RETURN s5, 21[bad_hex$:"!"]
 0B7  21500                       LOAD&RETURN s5, 00[NUL]
 0B8                              ;
 0B8  21554           result_msg: LOAD&RETURN s5, 54[result$:"T"]
 0B9  21568                       LOAD&RETURN s5, 68[result$:"h"]
 0BA  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0BB  21520                       LOAD&RETURN s5, 20[result$:" "]
 0BC  21564                       LOAD&RETURN s5, 64[result$:"d"]
 0BD  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0BE  21563                       LOAD&RETURN s5, 63[result$:"c"]
 0BF  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0C0  2156D                       LOAD&RETURN s5, 6D[result$:"m"]
 0C1  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0C2  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0C3  21520                       LOAD&RETURN s5, 20[result$:" "]
 0C4  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0C5  21571                       LOAD&RETURN s5, 71[result$:"q"]
 0C6  21575                       LOAD&RETURN s5, 75[result$:"u"]
 0C7  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0C8  21576                       LOAD&RETURN s5, 76[result$:"v"]
 0C9  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0CA  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0CB  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0CC  2156E                       LOAD&RETURN s5, 6E[result$:"n"]
 0CD  21574                       LOAD&RETURN s5, 74[result$:"t"]
 0CE  21520                       LOAD&RETURN s5, 20[result$:" "]
 0CF  2156F                       LOAD&RETURN s5, 6F[result$:"o"]
 0D0  21566                       LOAD&RETURN s5, 66[result$:"f"]
 0D1  21520                       LOAD&RETURN s5, 20[result$:" "]
 0D2  21500                       LOAD&RETURN s5, 00[NUL]
 0D3                              ;
 0D3                              ;
 0D3                              ;------------------------------------------------------------------------------------------
 0D3                              ; Software Delays
 0D3                              ;------------------------------------------------------------------------------------------
 0D3                              ;
 0D3                              ; All based on 50MHz clock
 0D3                              ; The number of iterations of a delay loop required to form each delay required are
 0D3                              ; loaded into the register set [s2,s1,s0] and then the delay loop is started.
 0D3                              ;
 0D3                              ; Registers used s0, s1, s2
 0D3                              ;
 0D3                              ;1ms is 50,000 clock cycles requiring 6,250 delay iterations
 0D3                              ;
 0D3                              ;
 0D3                              ;
 0D3                              ;------------------------------------------------------------------------------------------
 0D3                              ; Clear terminal and home cursor sequences for HyperTerminal (or similar)
 0D3                              ;------------------------------------------------------------------------------------------
 0D3                              ;
 0D3                              ; ANSI Escape Sequences/codes (VT100)
 0D3                              ;
 0D3  0151B         clear_screen: LOAD s5, 1B[ESC]                                       ;clear terminal sequence
 0D4  20184                       CALL 184[UART_TX]
 0D5  0155B                       LOAD s5, 5B["["]
 0D6  20184                       CALL 184[UART_TX]
 0D7  01532                       LOAD s5, 32["2"]
 0D8  20184                       CALL 184[UART_TX]
 0D9  0154A                       LOAD s5, 4A["J"]
 0DA  20184                       CALL 184[UART_TX]
 0DB  2016B                       CALL 16B[delay_1ms]                                    ;Delay for reliable operation
 0DC  25000                       RETURN 
 0DD                              ;
 0DD  0151B          cursor_home: LOAD s5, 1B[ESC]                                       ;Send cursor to upper-left of display
 0DE  20184                       CALL 184[UART_TX]
 0DF  0155B                       LOAD s5, 5B["["]
 0E0  20184                       CALL 184[UART_TX]
 0E1  01548                       LOAD s5, 48["H"]
 0E2  20184                       CALL 184[UART_TX]
 0E3  2016B                       CALL 16B[delay_1ms]                                    ;Delay for reliable operation
 0E4  25000                       RETURN 
 0E5                              ;
 0E5                              ;
 0E5                              ;------------------------------------------------------------------------------------------
 0E5                              ; Send Carriage Return to UART
 0E5                              ;------------------------------------------------------------------------------------------
 0E5                              ;
 0E5                              ; Registers used s0, s1, s2, and s
 0E5  0150D              send_CR: LOAD s5, 0D[CR]
 0E6  22184                       JUMP 184[UART_TX]                                      ;includes RETURN
 0E7                              ;
 0E7                              ;
 0E7                              ;------------------------------------------------------------------------------------------
 0E7                              ; Send a Space to UART
 0E7                              ;------------------------------------------------------------------------------------------
 0E7                              ;
 0E7                              ; Registers used s0, s1, s2, and s5.
 0E7                              ;
 0E7  01520           send_space: LOAD s5, 20[" "]
 0E8  22184                       JUMP 184[UART_TX]                                      ;includes RETURN
 0E9                              ;
 0E9                              ;
 0E9                              ;------------------------------------------------------------------------------------------
 0E9                              ; Send Hex Value of 16-bit word to UART
 0E9                              ;------------------------------------------------------------------------------------------
 0E9                              ;
 0E9                              ; Value provided in register pair [sB,sA] is sent as ASCII HEX to the UART
 0E9                              ; transmitter.
 0E9                              ;
 0E9                              ; Registers used s0, s1, s2, s4, s5, sA and sB.
 0E9                              ;
 0E9  004B0        send_hex_word: LOAD s4, sB
 0EA  200ED                       CALL 0ED[send_hex_byte]
 0EB  004A0                       LOAD s4, sA
 0EC  220ED                       JUMP 0ED[send_hex_byte]                                ;includes RETURN
 0ED                              ;
 0ED                              ;
 0ED                              ;------------------------------------------------------------------------------------------
 0ED                              ; Send Hex Value of Byte to UART
 0ED                              ;------------------------------------------------------------------------------------------
 0ED                              ;
 0ED                              ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
 0ED                              ;
 0ED                              ; Registers used s0, s4 (preserved) and s5.
 0ED                              ;
 0ED  00540        send_hex_byte: LOAD s5, s4                                            ;isolate upper nibble
 0EE  1450E                       SR0 s5
 0EF  1450E                       SR0 s5
 0F0  1450E                       SR0 s5
 0F1  1450E                       SR0 s5
 0F2  200F9                       CALL 0F9[hex_to_ASCII]                                 ; convert to ASCII
 0F3  20184                       CALL 184[UART_TX]                                      ;send upper digit to UART
 0F4  00540                       LOAD s5, s4                                            ;isolate lower nibble
 0F5  0350F                       AND s5, 0F
 0F6  200F9                       CALL 0F9[hex_to_ASCII]                                 ; convert to ASCII
 0F7  20184                       CALL 184[UART_TX]                                      ;send lower digit to UART
 0F8  25000                       RETURN 
 0F9                              ;
 0F9                              ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
 0F9                              ;
 0F9                              ; Register used s5
 0F9                              ;
 0F9  1950A         hex_to_ASCII: SUB s5, 0A                                             ;test if value is in range 0 to 9
 0FA  3A0FC                       JUMP C, 0FC[number_char]
 0FB  11507                       ADD s5, 07                                             ;ASCII char A to F in range 41 to 46
 0FC  1153A          number_char: ADD s5, 3A                                             ;ASCII char 0 to 9 in range 30 to 40
 0FD  25000                       RETURN 
 0FE                              ;
 0FE                              ;
 0FE                              ;------------------------------------------------------------------------------------------
 0FE                              ; Converts character to upper case
 0FE                              ;------------------------------------------------------------------------------------------
 0FE                              ;
 0FE                              ; Tests and converts character in 's5' (if necessary).
 0FE                              ;
 0FE                              ; To convert character to upper case
 0FE                              ;
 0FE                              ; If the character is in the range 'a' to 'z', it is converted
 0FE                              ; to the equivalent upper case character in the range 'A' to 'Z'.
 0FE                              ; All other characters remain unchanged.
 0FE                              ;
 0FE  1D561           upper_case: COMPARE s5, 61["a"]                                    ;eliminate character codes below 'a' (61 hex)
 0FF  39000                       RETURN C
 100  1D57B                       COMPARE s5, 7B                                         ;eliminate character codes above 'z' (7A hex)
 101  3D000                       RETURN NC
 102  035DF                       AND s5, DF[11011111'b]                                 ;force bit5 Low to convert to upper case
 103  25000                       RETURN 
 104                              ;
 104                              ;
 104                              ;------------------------------------------------------------------------------------------
 104                              ; Convert ASCII character to an equivalent HEX value.
 104                              ;------------------------------------------------------------------------------------------
 104                              ;
 104                              ; Converts the ASCII character presented in 's5' to an equivalent HEX value.
 104                              ; If character is not valid for hex, then CARRY is set on return.
 104                              ;
 104                              ; Register used s5
 104                              ;
 104  115B9         ASCII_to_hex: ADD s5, B9                                             ;test for above ASCII code 46 ('F')
 105  39000                       RETURN C
 106  195E9                       SUB s5, E9                                             ;normalise 0 to 9 with A-F in 11 to 16 hex
 107  39000                       RETURN C                                               ;reject below ASCII code 30 ('0')
 108  19511                       SUB s5, 11                                             ;isolate A-F down to 00 to 05 hex
 109  3E10E                       JUMP NC, 10E[ASCII_letter]
 10A  11507                       ADD s5, 07                                             ;test for above ASCII code 46 ('F')
 10B  39000                       RETURN C
 10C  195F6                       SUB s5, F6                                             ;convert to range 00 to 09
 10D  25000                       RETURN 
 10E  1150A         ASCII_letter: ADD s5, 0A                                             ;convert to range 0A to 0F
 10F  25000                       RETURN 
 110                              ;
 110                              ;
 110                              ;------------------------------------------------------------------------------------------
 110                              ; Read ASCII-HEX value up to 8-digits (for 32-bit value) from UART
 110                              ;------------------------------------------------------------------------------------------
 110                              ;
 110                              ; Read up to 8 hex characters from UART and convert to a binary value in the [sD,sC,sB,sA]
 110                              ; register set. The number of characters to be read must be defined in sE. When less than
 110                              ; 8 characters are read the value is returned in the least significant bits of the register
 110                              ; set with the 8-bits above the defined value being zero to ensure ensuring that the upper
 110                              ; nibble will be zero if an odd number of digits are read.
 110                              ;
 110                              ; If any character received from the UART is not in the range 0 to F then the routine will
 110                              ; end immediately with the CARRY flag set and this should be checked by the calling process
 110                              ; upon return.
 110                              ;
 110  01A00         obtain_value: LOAD sA, 00                                            ;initialise potentially unused bits to zero
 111  2019F         obtain_digit: CALL 19F[UART_RX]                                      ;wait for a character and return in s5
 112  32111                       JUMP Z, 111[obtain_digit]                              ;continue to wait if timeout occurs
 113  20184                       CALL 184[UART_TX]                                      ;echo character as entered
 114  20184                       CALL 184[UART_TX]
 115  20184                       CALL 184[UART_TX]
 116  200FE                       CALL 0FE[upper_case]                                   ;convert to upper case if necessary
 117  20104                       CALL 104[ASCII_to_hex]                                 ;convert value in s5 to hex nibble
 118  39000                       RETURN C                                               ;If invalid hex digit then return immediately
 119  01004                       LOAD s0, 04[4'd]                                       ;shift [sD,sC,sB,sA] left by 4 bits
 11A  14A06          build_value: SL0 sA                                                 ;  to make space for new digit value
 11B  14B00                       SLA sB
 11C  14C00                       SLA sC
 11D  14D00                       SLA sD
 11E  19001                       SUB s0, 01[1'd]
 11F  3611A                       JUMP NZ, 11A[build_value]
 120  04A50                       OR sA, s5                                              ;merge value of new digit into existing value
 121  19E01                       SUB sE, 01                                             ;count number of digits obtained
 122  36111                       JUMP NZ, 111[obtain_digit]
 123  25000                       RETURN 
 124                              ;
 124                              ;
 124                              ;------------------------------------------------------------------------------------------
 124                              ; Send integer in decimal format to UART Tx
 124                              ;------------------------------------------------------------------------------------------
 124                              ;
 124                              ; The 16-bit value provided in [s3,s2] should be a positive integer and will be displayed
 124                              ; using 1 to 5 digits for values up to 65535 (i.e. leading zeros are blanked).
 124                              ;
 124                              ;
 124  1D200         send_integer: COMPARE s2, 00                                         ;test for special case of zero
 125  1F300                       COMPARECY s3, 00
 126  32134                       JUMP Z, 134[zero_integer]
 127                              ;
 127  20137                       CALL 137[integer16_to_BCD]                             ;Convert to BCD in SPM
 128                              ;
 128  01A06                       LOAD sA, 06[decimal4]                                  ;pointer to BCD in SPM
 129  01B00                       LOAD sB, 00[0'd]                                       ;flag for leading zero blanking
 12A  0A5A0    send_integer_loop: FETCH s5, (sA)
 12B  10B50                       ADD sB, s5                                             ;make sB non-zero to stop blanking
 12C  1DB00                       COMPARE sB, 00[0'd]                                    ;Test for blanking
 12D  32130                       JUMP Z, 130[next_int_digit]
 12E  11530                       ADD s5, 30["0"]                                        ;convert to ASCII
 12F  20184                       CALL 184[UART_TX]                                      ;send digit
 130  1DA02       next_int_digit: COMPARE sA, 02[decimal0]
 131  31000                       RETURN Z
 132  19A01                       SUB sA, 01[1'd]                                        ;move pointer to next digit
 133  2212A                       JUMP 12A[send_integer_loop]
 134                              ;
 134  01530         zero_integer: LOAD s5, 30["0"]                                       ;special response for zero
 135  20184                       CALL 184[UART_TX]
 136  25000                       RETURN 
 137                              ;
 137                              ;
 137                              ;------------------------------------------------------------------------------------------
 137                              ; 16-bit integer to BCD conversion
 137                              ;------------------------------------------------------------------------------------------
 137                              ;
 137                              ; Convert the 16 bit value up to FFFF hex in register set [s3,s2]
 137                              ; into the BCD decimal equivalent up to 65,535 located in the scratch pad memory
 137                              ; locations 'decimal0' to 'decimal4' which must be in ascending locations.
 137                              ;
 137                              ; Each digit is formed in turn starting with the least significant. The value
 137                              ; contained in [s3,s2] is divided by 10 and the remainder of that integer division
 137                              ; is the value of each digit in the range 0 to 9.
 137                              ;
 137                              ; Registers used s0,s2,s3,s4,s8,s9,sA,sB
 137                              ;
 137  01402     integer16_to_BCD: LOAD s4, 02[decimal0]                                  ;pointer for LS-Digit in scratch pad memory
 138  2013E      int_to_BCD_loop: CALL 13E[divide_16bit_by_10]
 139  2EA40                       STORE sA, (s4)                                         ;remainder is the digit value
 13A  1D406                       COMPARE s4, 06[decimal4]                               ;test for MS-Digit completed
 13B  31000                       RETURN Z
 13C  11401                       ADD s4, 01[1'd]                                        ;advance pointer to next digit
 13D  22138                       JUMP 138[int_to_BCD_loop]
 13E                              ;
 13E                              ; Divide 16-bit binary integer by 10
 13E                              ;
 13E                              ; The value to be divided by 10 should be provided in register set [s3,s2].
 13E                              ; The routine will return the integer result [s3,s2]/10 back in[s3,s2]
 13E                              ; with any remainder in (0 to 9) in register sA.
 13E                              ;
 13E                              ; Registers used s0,s2,s3,s8,s9,sA,sB
 13E                              ;
 13E  00A20   divide_16bit_by_10: LOAD sA, s2                                            ;copy input value into [sB,sA]
 13F  00B30                       LOAD sB, s3
 140  01200                       LOAD s2, 00                                            ;clear division result
 141  01300                       LOAD s3, 00
 142  019A0                       LOAD s9, A0                                            ;initialise [s9,s8] with '10' in MSBs
 143  01800                       LOAD s8, 00
 144  0100D                       LOAD s0, 0D[13'd]                                      ;13 subtract and shift iterations to be performed
 145  18A80           div10_loop: SUB sA, s8                                             ;perform 16-bit subtract [sB,sA]-[s9,s8]
 146  1AB90                       SUBCY sB, s9
 147  3A14A                       JUMP C, 14A[div10_restore]                             ;if carry then could not subtract from total
 148  14207                       SL1 s2                                                 ;shift '1' into result because subtract ok
 149  2214D                       JUMP 14D[div10_shifts]
 14A  10A80        div10_restore: ADD sA, s8                                             ;perform 16-bit addition [sB,sA]+[s9,s8]
 14B  12B90                       ADDCY sB, s9                                           ;to restore total
 14C  14206                       SL0 s2                                                 ;shift '0' into result because could no subtract
 14D  14300         div10_shifts: SLA s3                                                 ;complete 16-bit shift left into [s3,s2]
 14E  1490E                       SR0 s9                                                 ;divide '10' value by 2 (shift right 1 place)
 14F  14808                       SRA s8
 150  19001                       SUB s0, 01                                             ;count iterations
 151  31000                       RETURN Z                                               ;on return the remainder of division is in sA
 152  22145                       JUMP 145[div10_loop]
 153                              ;
 153                              ;
 153                              ;------------------------------------------------------------------------------------------
 153                              ; Include PSM files
 153                              ;------------------------------------------------------------------------------------------
 153                              ;
 153                              ; The INCLUDE directive enables commonly routines to be kept in their own PSM files and
 153                              ; easily reused in different programs (i.e. avoiding 'cut and paste'). It also allows
 153                              ; each PSM to remain a more manageable size.
 153                              ;
 153                              ;
 153  01200      my_delay_ir_bit: LOAD s2, 00
 154  01122                       LOAD s1, 22
 155  010BA                       LOAD s0, BA
 156  22177                       JUMP 177[software_delay]
 157  01200         delay_ir_bit: LOAD s2, 00
 158  01122                       LOAD s1, 22
 159  010BA                       LOAD s0, BA
 15A  22177                       JUMP 177[software_delay]
 15B  01200    delay_ir_half_bit: LOAD s2, 00
 15C  01111                       LOAD s1, 11
 15D  0105D                       LOAD s0, 5D
 15E  22177                       JUMP 177[software_delay]
 15F  01200     delay_ir_1_8_bit: LOAD s2, 00
 160  01104                       LOAD s1, 04
 161  01057                       LOAD s0, 57
 162  22177                       JUMP 177[software_delay]
 163  0121E          delay_200ms: LOAD s2, 1E
 164  01184                       LOAD s1, 84
 165  01010                       LOAD s0, 10
 166  22177                       JUMP 177[software_delay]
 167  0125F             delay_1s: LOAD s2, 5F
 168  0115E                       LOAD s1, 5E
 169  01010                       LOAD s0, 10
 16A  22177                       JUMP 177[software_delay]
 16B                              ;
 16B                              ; 2ms is 10,000 x 200ns     (10,000 = 002710 hex)
 16B  01200            delay_1ms: LOAD s2, 00                                            ;2ms !
 16C  01127                       LOAD s1, 27
 16D  01010                       LOAD s0, 10
 16E  22177                       JUMP 177[software_delay]
 16F                              ;
 16F                              ; 40ms is 200,000 x 200ns     (200,000 = 030D40 hex)
 16F                              ;
 16F  01203           delay_40ms: LOAD s2, 03
 170  0110D                       LOAD s1, 0D
 171  01040                       LOAD s0, 40
 172  22177                       JUMP 177[software_delay]
 173                              ;
 173                              ;
 173                              ; 2s is 10,000,000 x 200ns     (10,000,000 = 989680 hex)
 173                              ;
 173  01298             delay_2s: LOAD s2, 98
 174  01196                       LOAD s1, 96
 175  01080                       LOAD s0, 80
 176  22177                       JUMP 177[software_delay]
 177                              ;
 177                              ; The delay loop decrements [s2,s1,s0] until it reaches zero
 177                              ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
 177                              ;
 177  00000       software_delay: LOAD s0, s0                                            ;pad loop to make it 10 clock cycles (5 instructions) 200ns u mnie
 178  19001                       SUB s0, 01[1'd]
 179  1B100                       SUBCY s1, 00[0'd]
 17A  1B200                       SUBCY s2, 00[0'd]
 17B  36177                       JUMP NZ, 177[software_delay]
 17C  25000                       RETURN 
 17D                              ; Include routines that implement interface with UART macros.
 17D                              ; -----------------------------------------------------------
 17D                              ;
 17D                              INCLUDE "C:\studia\MGR\FPGA\mgr\PicoProgram\communication_routines.psm"["communication_routines.psm"]
 17D                              ;
 17D                              ;------------------------------------------------------------------------------------------
 17D                              ; Copyright © 2011-2012, Xilinx, Inc.
 17D                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 17D                              ; protected under U.S. and international copyright and other intellectual property laws.
 17D                              ;------------------------------------------------------------------------------------------
 17D                              ;
 17D                              ; Disclaimer:
 17D                              ; This disclaimer is not a license and does not grant any rights to the materials
 17D                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 17D                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 17D                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 17D                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 17D                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 17D                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 17D                              ; (whether in contract or tort, including negligence, or under any other theory
 17D                              ; of liability) for any loss or damage of any kind or nature related to, arising
 17D                              ; under or in connection with these materials, including for any direct, or any
 17D                              ; indirect, special, incidental, or consequential loss or damage (including loss
 17D                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 17D                              ; of any action brought by a third party) even if such damage or loss was
 17D                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 17D                              ;
 17D                              ; CRITICAL APPLICATIONS
 17D                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 17D                              ; application requiring fail-safe performance, such as life-support or safety
 17D                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 17D                              ; related to the deployment of airbags, or any other applications that could lead
 17D                              ; to death, personal injury, or severe property or environmental damage
 17D                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 17D                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 17D                              ; subject only to applicable laws and regulations governing limitations on product
 17D                              ; liability.
 17D                              ;
 17D                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 17D                              ;
 17D                              ;------------------------------------------------------------------------------------------
 17D                              ;
 17D                              ;             _  ______ ____  ____  __  __  __
 17D                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 17D                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 17D                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 17D                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 17D                              ;
 17D                              ;
 17D                              ;                PicoBlaze Reference Design.
 17D                              ;
 17D                              ;
 17D                              ; Ken Chapman - Xilinx Ltd
 17D                              ;
 17D                              ; 23rd April 2012 - Initial Release
 17D                              ; 24th July 2012 - Corrections to comments only
 17D                              ;
 17D                              ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
 17D                              ; and was first supplied with a reference design called 'uart6_605' included in the
 17D                              ; PicoBlaze package. The routines enable characters to be transmitted to and received
 17D                              ; from the UART macros as well as perform a reset of the FIFO the buffers.
 17D                              ;
 17D                              ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
 17D                              ;            the reference design stated above includes this file and calls the routines
 17D                              ;            contained in this file.
 17D                              ;
 17D                              ;                INCLUDE "uart_interface_routines.psm"
 17D                              ;
 17D                              ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
 17D                              ;
 17D                              ;
 17D                              ; Whilst the reference design stated above was presented for the UART macros connected to
 17D                              ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
 17D                              ; any design for any board simply by setting the appropriate values in the CONSTANT
 17D                              ; directives described below.
 17D                              ;
 17D                              ;
 17D                              ;------------------------------------------------------------------------------------------
 17D                              ; Hardware Constants
 17D                              ;------------------------------------------------------------------------------------------
 17D                              ;
 17D                              ; The CONSTANT directives below define the input and output ports assigned to the UART
 17D                              ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
 17D                              ; Additional constants identify the allocation of signals to bits within a port.
 17D                              ;
 17D                              ;
 17D                              ;
 17D                              ; UART Status
 17D                              ; -----------
 17D                              ;
 17D                              CONSTANT UART_status_port, 00                          ; Read status
 17D                              CONSTANT UART_Tx_data_present, 00000001'b              ; Tx   data_present - bit0
 17D                              CONSTANT UART_Tx_half_full, 00000010'b                 ;         half_full - bit1
 17D                              CONSTANT UART_Tx_full, 00000100'b                      ;              full - bit2
 17D                              CONSTANT UART_Rx_data_present, 00001000'b              ; Rx   data_present - bit3
 17D                              CONSTANT UART_Rx_half_full, 00010000'b                 ;         half_full - bit4
 17D                              CONSTANT UART_Rx_full, 00100000'b                      ;              full - bit5
 17D                              ;
 17D                              ; Write data to UART_TX6
 17D                              ; ----------------------
 17D                              ;
 17D                              CONSTANT UART_TX6_output_port, 01
 17D                              ;
 17D                              ; Read data from UART_RX6
 17D                              ; -----------------------
 17D                              ;
 17D                              CONSTANT UART_RX6_input_port, 01
 17D                              ;
 17D                              ; Reset UART buffers (Constant Optimised Port)
 17D                              ; --------------------------------------------
 17D                              ;
 17D                              CONSTANT LCD_driver_send_port, 02
 17D                              CONSTANT LCD_driver_en_port, 03
 17D                              CONSTANT LCD_driver_ready_port, 04
 17D                              CONSTANT LPC_data_port, 05
 17D                              CONSTANT LPC_data_valid_port, 06
 17D                              CONSTANT LPC_ready_port, 07
 17D                              CONSTANT LPC_IN_data_port, 08                          ; from LPC
 17D                              CONSTANT LPC_IN_data_valid_port, 09                    ; from LPC
 17D                              CONSTANT LPC_IN_ready_port, 0A                         ; to LPC
 17D                              CONSTANT IR_PORT, 0B
 17D                              CONSTANT reset_UART_port, 01
 17D                              CONSTANT UART_tx_reset, 00000001'b                     ; uart_tx6 reset - bit0
 17D                              CONSTANT UART_rx_reset, 00000010'b                     ; uart_rx6 reset - bit1
 17D                              CONSTANT UART_reset, 00000011'b                        ; reset Tx and Rx
 17D                              CONSTANT UART_operate, 00000000'b                      ; Tx and Rx free to operate
 17D                              CONSTANT LCD_en_reset, 00000000'b                      ; reset lcd en
 17D                              CONSTANT LCD_en_syg, 00000001'b                        ; send lcd en
 17D                              CONSTANT LCD_ready_syg, 00000001'b                     ; send lcd en
 17D                              CONSTANT LCD_odebral_syg, 00000000'b
 17D                              CONSTANT LPC_ready_syg, 00000001'b                     ; LPC ready to get data
 17D                              CONSTANT LPC_data_valid_syg, 00000001'b                ; Pico data valid
 17D                              CONSTANT LPC_dv_reset, 00000000'b                      ; reset Eth en
 17D                              ;
 17D                              ;
 17D                              ;--------------------------------------------------------------------------------------
 17D                              ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
 17D                              ;--------------------------------------------------------------------------------------
 17D                              ;
 17D                              ; This routine will generate and apply an active High reset pulse to  the FIFO
 17D                              ; buffers in both the transmitter and receiver macros.
 17D                              ;
 17D                              ; Note that the reset signals have been assigned to a constant optimised output port
 17D                              ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
 17D                              ;
 17D                              ;
 17D  2B031    reset_UART_macros: OUTPUTK 03[UART_reset], 1[reset_UART_port]
 17E  2B001                       OUTPUTK 00[UART_operate], 1[reset_UART_port]
 17F  25000                       RETURN 
 180  2B003  reset_lcd_en_status: OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 181  25000                       RETURN 
 182  2B006  reset_Eth_en_status: OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 183  25000                       RETURN 
 184                              ;
 184                              ;
 184                              ;--------------------------------------------------------------------------------------
 184                              ; Routine to send one character to the UART Transmitter 'uart_tx6'
 184                              ;--------------------------------------------------------------------------------------
 184                              ;
 184                              ; This routine will transmit the character provided in register 's5'.
 184                              ;
 184                              ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
 184                              ; is checked to see if there is space. If the buffer is full then this routine will
 184                              ; wait for space to become available (e.g. the time required for a previous character
 184                              ; to be transmitted by the UART).
 184                              ;
 184                              ; Registers used s0 and s5 for the data (which is preserved)
 184                              ;
 184  09000              UART_TX: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 185  0D004                       TEST s0, 04[UART_Tx_full]
 186  36184                       JUMP NZ, 184[UART_TX]                                  ;wait if full
 187  2D501                       OUTPUT s5, 01[UART_TX6_output_port]
 188  25000                       RETURN 
 189                              ;--------------------------------------------------------------------------------------
 189                              ; Routine to wywsy³anie znaków do drivera lcd
 189                              ;--------------------------------------------------------------------------------------
 189  09004             LCD_send: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver mo¿e odbieraæ dane
 18A  0D001                       TEST s0, 01[LCD_ready_syg]
 18B  32189                       JUMP Z, 189[LCD_send]                                  ;czeka a¿ bêdzie gotowy
 18C  2DF02                       OUTPUT sF, 02[LCD_driver_send_port]
 18D  2B013                       OUTPUTK 01[LCD_en_syg], 3[LCD_driver_en_port]
 18E  09004      LCD_czy_odebral: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver odebra³ dane
 18F  0D001                       TEST s0, 01[LCD_ready_syg]
 190  3A18E                       JUMP C, 18E[LCD_czy_odebral]
 191  2B003                       OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 192  25000                       RETURN 
 193                    LPC_send: ;CALL UART_TX
 193  09007                       INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC mo¿e odbieraæ dane
 194  0D001                       TEST s0, 01[LPC_ready_syg]
 195                              ;INPUT s5, LPC_ready_port
 195                              ;CALL UART_TX
 195  32193                       JUMP Z, 193[LPC_send]
 196  2DF05                       OUTPUT sF, 05[LPC_data_port]
 197  2B016                       OUTPUTK 01[LPC_data_valid_syg], 6[LPC_data_valid_port]
 198  09007      LPC_czy_odebral: INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC odebra³ dane
 199  0D001                       TEST s0, 01[LPC_ready_syg]
 19A  3A198                       JUMP C, 198[LPC_czy_odebral]
 19B  2B006                       OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 19C  25000                       RETURN 
 19D                       petla: 
 19D  20184                       CALL 184[UART_TX]
 19E  2219D                       JUMP 19D[petla]
 19F                              ;
 19F                              ;
 19F                              ;--------------------------------------------------------------------------------------
 19F                              ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
 19F                              ;--------------------------------------------------------------------------------------
 19F                              ;
 19F                              ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
 19F                              ; successful, will return that character in register 's5' and the Zero flag will be
 19F                              ; reset (Z=0).
 19F                              ;
 19F                              ; If there are no characters available to be read from the FIFO buffer within the
 19F                              ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
 19F                              ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
 19F                              ; cannot become stuck in this routine if no characters are received. If you do want
 19F                              ; KCPSM6 to wait indefinitely for a character to be received then either modify this
 19F                              ; routine or perform a test of the Zero flag and repeat the call to this routine as
 19F                              ; shown in this example...
 19F                              ;
 19F                              ;          wait_for_UART_RX: CALL UART_RX
 19F                              ;                            JUMP Z, wait_for_UART_RX
 19F                              ;
 19F                              ;
 19F                              ; Registers used s0, s1 and s5.
 19F                              ;
 19F  011A7              UART_RX: LOAD s1, A7[167'd]                                     ;Timeout = 167 x (6 instructions x 2 clock cycles)
 1A0  09000           rx_timeout: INPUT s0, 00[UART_status_port]
 1A1  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 1A2  361A6                       JUMP NZ, 1A6[read_Rx]
 1A3  19101                       SUB s1, 01[1'd]
 1A4  31000                       RETURN Z                                               ;Timeout returns with Z=1 and C=0
 1A5  221A0                       JUMP 1A0[rx_timeout]
 1A6                              ;
 1A6  09501              read_Rx: INPUT s5, 01[UART_RX6_input_port]                      ;read character from buffer
 1A7  25000                       RETURN 
 1A8                              ;
 1A8                              ;
 1A8                              ;------------------------------------------------------------------------------------------
 1A8                              ; End of 'uart_interface_routines.psm"'
 1A8                              ;------------------------------------------------------------------------------------------
 1A8                              ;
 1A8                              INCLUDE "C:\studia\MGR\FPGA\mgr\PicoProgram\banners_conversts_send.psm"["banners_conversts_send.psm"]
 1A8                              CONSTANT green, 03
 1A8                              CONSTANT red, 07
 1A8                              CONSTANT blue, 01
 1A8                              CONSTANT clear, 0F
 1A8                              CONSTANT button0, 3F
 1A8                              CONSTANT button1, 3D
 1A8                              CONSTANT button2, 3B
 1A8                              CONSTANT button3, 39
 1A8                              CONSTANT button4, 37
 1A8                              CONSTANT button5, 35
 1A8                              CONSTANT button6, 33
 1A8                              CONSTANT button7, 31
 1A8                              CONSTANT button8, 2F
 1A8                              CONSTANT button9, 2D
 1A8                              CONSTANT buttonON, 27
 1A8                              CONSTANT buttonMute, 25
 1A8                              CONSTANT buttonUp, 3F
 1A8                              CONSTANT buttonDown, 3D
 1A8                              CONSTANT buttonCenter, 09
 1A8                              CONSTANT buttonLeft, 1D
 1A8                              CONSTANT buttonRight, 1F
 1A8                convert_send: 
 1A8  006C0                       LOAD s6, sC
 1A9  1963F                       SUB s6, 3F[button0]
 1AA  3A1B2                       JUMP C, 1B2[next_button1]
 1AB  0D6FF                       TEST s6, FF[11111111'b]
 1AC  361B2                       JUMP NZ, 1B2[next_button1]
 1AD  01F30                       LOAD sF, 30["0"]
 1AE  20189                       CALL 189[LCD_send]
 1AF  20193                       CALL 193[LPC_send]
 1B0  19701                       SUB s7, 01
 1B1  25000                       RETURN 
 1B2  006C0         next_button1: LOAD s6, sC
 1B3  1963D                       SUB s6, 3D[button1]
 1B4  3A1BC                       JUMP C, 1BC[next_button2]
 1B5  0D6FF                       TEST s6, FF[11111111'b]
 1B6  361BC                       JUMP NZ, 1BC[next_button2]
 1B7  01F31                       LOAD sF, 31["1"]
 1B8  20189                       CALL 189[LCD_send]
 1B9  20193                       CALL 193[LPC_send]
 1BA  19701                       SUB s7, 01
 1BB  25000                       RETURN 
 1BC  006C0         next_button2: LOAD s6, sC
 1BD  1963B                       SUB s6, 3B[button2]
 1BE  3A1C6                       JUMP C, 1C6[next_button3]
 1BF  0D6FF                       TEST s6, FF[11111111'b]
 1C0  361C6                       JUMP NZ, 1C6[next_button3]
 1C1  01F32                       LOAD sF, 32["2"]
 1C2  20189                       CALL 189[LCD_send]
 1C3  20193                       CALL 193[LPC_send]
 1C4  19701                       SUB s7, 01
 1C5  25000                       RETURN 
 1C6  006C0         next_button3: LOAD s6, sC
 1C7  19639                       SUB s6, 39[button3]
 1C8  3A1D0                       JUMP C, 1D0[next_button4]
 1C9  0D6FF                       TEST s6, FF[11111111'b]
 1CA  361D0                       JUMP NZ, 1D0[next_button4]
 1CB  01F33                       LOAD sF, 33["3"]
 1CC  20189                       CALL 189[LCD_send]
 1CD  20193                       CALL 193[LPC_send]
 1CE  19701                       SUB s7, 01
 1CF  25000                       RETURN 
 1D0  006C0         next_button4: LOAD s6, sC
 1D1  19637                       SUB s6, 37[button4]
 1D2  3A1DA                       JUMP C, 1DA[next_button5]
 1D3  0D6FF                       TEST s6, FF[11111111'b]
 1D4  361DA                       JUMP NZ, 1DA[next_button5]
 1D5  01F34                       LOAD sF, 34["4"]
 1D6  20189                       CALL 189[LCD_send]
 1D7  20193                       CALL 193[LPC_send]
 1D8  19701                       SUB s7, 01
 1D9  25000                       RETURN 
 1DA  006C0         next_button5: LOAD s6, sC
 1DB  19635                       SUB s6, 35[button5]
 1DC  3A1E4                       JUMP C, 1E4[next_button6]
 1DD  0D6FF                       TEST s6, FF[11111111'b]
 1DE  361E4                       JUMP NZ, 1E4[next_button6]
 1DF  01F35                       LOAD sF, 35["5"]
 1E0  20189                       CALL 189[LCD_send]
 1E1  20193                       CALL 193[LPC_send]
 1E2  19701                       SUB s7, 01
 1E3  25000                       RETURN 
 1E4  006C0         next_button6: LOAD s6, sC
 1E5  19633                       SUB s6, 33[button6]
 1E6  3A1EE                       JUMP C, 1EE[next_button7]
 1E7  0D6FF                       TEST s6, FF[11111111'b]
 1E8  361EE                       JUMP NZ, 1EE[next_button7]
 1E9  01F36                       LOAD sF, 36["6"]
 1EA  20189                       CALL 189[LCD_send]
 1EB  20193                       CALL 193[LPC_send]
 1EC  19701                       SUB s7, 01
 1ED  25000                       RETURN 
 1EE  006C0         next_button7: LOAD s6, sC
 1EF  19631                       SUB s6, 31[button7]
 1F0  3A1F8                       JUMP C, 1F8[next_button8]
 1F1  0D6FF                       TEST s6, FF[11111111'b]
 1F2  361F8                       JUMP NZ, 1F8[next_button8]
 1F3  01F37                       LOAD sF, 37["7"]
 1F4  20189                       CALL 189[LCD_send]
 1F5  20193                       CALL 193[LPC_send]
 1F6  19701                       SUB s7, 01
 1F7  25000                       RETURN 
 1F8  006C0         next_button8: LOAD s6, sC
 1F9  1962F                       SUB s6, 2F[button8]
 1FA  3A202                       JUMP C, 202[next_button9]
 1FB  0D6FF                       TEST s6, FF[11111111'b]
 1FC  36202                       JUMP NZ, 202[next_button9]
 1FD  01F38                       LOAD sF, 38["8"]
 1FE  20189                       CALL 189[LCD_send]
 1FF  20193                       CALL 193[LPC_send]
 200  19701                       SUB s7, 01
 201  25000                       RETURN 
 202  006C0         next_button9: LOAD s6, sC
 203  1962D                       SUB s6, 2D[button9]
 204  3A230                       JUMP C, 230[just_return]
 205  0D6FF                       TEST s6, FF[11111111'b]
 206  36230                       JUMP NZ, 230[just_return]
 207  01F39                       LOAD sF, 39["9"]
 208  20189                       CALL 189[LCD_send]
 209  20193                       CALL 193[LPC_send]
 20A  19701                       SUB s7, 01
 20B  25000                       RETURN 
 20C  00650         which_banner: LOAD s6, s5
 20D  19603                       SUB s6, 03[green]
 20E  3A215                       JUMP C, 215[next_banner1]
 20F  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 210  36215                       JUMP NZ, 215[next_banner1]
 211  01F1B                       LOAD sF, 1B[ESC]
 212  20189                       CALL 189[LCD_send]
 213  203A3                       CALL 3A3[banner_message]
 214  25000                       RETURN 
 215  00650         next_banner1: LOAD s6, s5
 216  19601                       SUB s6, 01[blue]
 217  3A21E                       JUMP C, 21E[next_banner2]
 218  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 219  3621E                       JUMP NZ, 21E[next_banner2]
 21A  01F1B                       LOAD sF, 1B[ESC]
 21B  20189                       CALL 189[LCD_send]
 21C  203AF                       CALL 3AF[banner2_message]
 21D  25000                       RETURN 
 21E  00650         next_banner2: LOAD s6, s5
 21F  19607                       SUB s6, 07[red]
 220  3A227                       JUMP C, 227[next_banner3]
 221  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 222  36227                       JUMP NZ, 227[next_banner3]
 223  01F1B                       LOAD sF, 1B[ESC]
 224  20189                       CALL 189[LCD_send]
 225  203B9                       CALL 3B9[banner3_message]
 226  25000                       RETURN 
 227  00650         next_banner3: LOAD s6, s5
 228  1960F                       SUB s6, 0F[clear]
 229  3A230                       JUMP C, 230[just_return]
 22A  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 22B  36230                       JUMP NZ, 230[just_return]
 22C  01F1B                       LOAD sF, 1B[ESC]
 22D  20189                       CALL 189[LCD_send]
 22E  203C2                       CALL 3C2[banner4_message]
 22F  25000                       RETURN 
 230  25000          just_return: RETURN 
 231                              ;
 231                              ;
 231                              ;------------------------------------------------------------------------------------------
 231                              ; Welcome Message.
 231                              ;------------------------------------------------------------------------------------------
 231                              ;
 231                              ; The welcome message includes a display of the version information available from the
 231                              ; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
 231                              ;
 231  01B02      welcome_message: LOAD sB, 02[welcome_msg'upper]
 232  01A38                       LOAD sA, 38[welcome_msg'lower]
 233  2039C                       CALL 39C[send_message]
 234  14580                       HWBUILD s5                                             ;hardware version defines ASCII letter
 235  20184                       CALL 184[UART_TX]
 236  200E5                       CALL 0E5[send_CR]
 237  25000                       RETURN 
 238                              ;
 238                              ; Welcome message
 238                              ;
 238                              STRING banner1$, "  _  ______ ____  ____  __  __  __"
 238                              STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
 238                              STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
 238                              STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
 238                              STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
 238                              ;
 238                              ; Welcome message
 238                              ;
 238                              STRING welcome1$, "Przyklad aplikacji obslugujacej portu IR z wykorzystaniem Picoblaze"
 238                              STRING welcome11$, "Autor: Sebastian Kupis"
 238                              STRING welcome2$, "Data zbudoawania: "
 238                              STRING welcome3$, "   Czas: "
 238                              STRING welcome4$, "Version: "
 238                              STRING welcome5$, "Hardware Design: "
 238                              ;
 238                              ;
 238  21520          welcome_msg: LOAD&RETURN s5, 20[banner1$:" "]
 239  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 23A  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 23B  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 23C  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 23D  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 23E  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 23F  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 240  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 241  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 242  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 243  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 244  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 245  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 246  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 247  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 248  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 249  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 24A  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 24B  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 24C  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 24D  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 24E  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 24F  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 250  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 251  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 252  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 253  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 254  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 255  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 256  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 257  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 258  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 259  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 25A  2150D                       LOAD&RETURN s5, 0D[CR]
 25B  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 25C  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 25D  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 25E  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 25F  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 260  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 261  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 262  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 263  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 264  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 265  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 266  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 267  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 268  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 269  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 26A  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 26B  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 26C  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 26D  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 26E  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 26F  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 270  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 271  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 272  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 273  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 274  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 275  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 276  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 277  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 278  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 279  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 27A  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 27B  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 27C  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 27D  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 27E  2150D                       LOAD&RETURN s5, 0D[CR]
 27F  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 280  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 281  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 282  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 283  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 284  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 285  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 286  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 287  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 288  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 289  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 28A  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 28B  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 28C  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 28D  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 28E  21529                       LOAD&RETURN s5, 29[banner3$:")"]
 28F  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 290  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 291  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 292  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 293  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 294  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 295  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 296  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 297  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 298  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 299  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 29A  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 29B  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 29C  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 29D  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 29E  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 29F  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 2A0  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 2A1  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 2A2  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 2A3  2150D                       LOAD&RETURN s5, 0D[CR]
 2A4  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2A5  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2A6  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2A7  2152E                       LOAD&RETURN s5, 2E[banner4$:"."]
 2A8  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2A9  2155C                       LOAD&RETURN s5, 5C[banner4$:"\"]
 2AA  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2AB  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2AC  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2AD  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2AE  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2AF  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2B0  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2B1  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2B2  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2B3  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2B4  2152F                       LOAD&RETURN s5, 2F[banner4$:"/"]
 2B5  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2B6  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2B7  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2B8  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2B9  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 2BA  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2BB  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2BC  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2BD  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2BE  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2BF  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2C0  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2C1  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2C2  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 2C3  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2C4  21528                       LOAD&RETURN s5, 28[banner4$:"("]
 2C5  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 2C6  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 2C7  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 2C8  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 2C9  2150D                       LOAD&RETURN s5, 0D[CR]
 2CA  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 2CB  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2CC  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2CD  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2CE  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 2CF  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2D0  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 2D1  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2D2  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2D3  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2D4  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2D5  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2D6  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2D7  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2D8  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 2D9  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 2DA  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 2DB  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2DC  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2DD  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2DE  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2DF  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2E0  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 2E1  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2E2  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2E3  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2E4  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 2E5  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 2E6  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2E7  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2E8  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 2E9  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 2EA  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2EB  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2EC  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 2ED  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 2EE  2150D                       LOAD&RETURN s5, 0D[CR]
 2EF  2150D                       LOAD&RETURN s5, 0D[CR]
 2F0  21550                       LOAD&RETURN s5, 50[welcome1$:"P"]
 2F1  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 2F2  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 2F3  21579                       LOAD&RETURN s5, 79[welcome1$:"y"]
 2F4  2156B                       LOAD&RETURN s5, 6B[welcome1$:"k"]
 2F5  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 2F6  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 2F7  21564                       LOAD&RETURN s5, 64[welcome1$:"d"]
 2F8  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 2F9  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 2FA  21570                       LOAD&RETURN s5, 70[welcome1$:"p"]
 2FB  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 2FC  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 2FD  2156B                       LOAD&RETURN s5, 6B[welcome1$:"k"]
 2FE  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 2FF  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 300  2156A                       LOAD&RETURN s5, 6A[welcome1$:"j"]
 301  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 302  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 303  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 304  21562                       LOAD&RETURN s5, 62[welcome1$:"b"]
 305  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 306  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 307  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 308  21567                       LOAD&RETURN s5, 67[welcome1$:"g"]
 309  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 30A  2156A                       LOAD&RETURN s5, 6A[welcome1$:"j"]
 30B  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 30C  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 30D  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 30E  2156A                       LOAD&RETURN s5, 6A[welcome1$:"j"]
 30F  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 310  21570                       LOAD&RETURN s5, 70[welcome1$:"p"]
 311  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 312  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 313  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 314  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 315  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 316  21549                       LOAD&RETURN s5, 49[welcome1$:"I"]
 317  21552                       LOAD&RETURN s5, 52[welcome1$:"R"]
 318  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 319  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 31A  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 31B  21577                       LOAD&RETURN s5, 77[welcome1$:"w"]
 31C  21579                       LOAD&RETURN s5, 79[welcome1$:"y"]
 31D  2156B                       LOAD&RETURN s5, 6B[welcome1$:"k"]
 31E  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 31F  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 320  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 321  21579                       LOAD&RETURN s5, 79[welcome1$:"y"]
 322  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 323  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 324  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 325  2156E                       LOAD&RETURN s5, 6E[welcome1$:"n"]
 326  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 327  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 328  2156D                       LOAD&RETURN s5, 6D[welcome1$:"m"]
 329  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 32A  21550                       LOAD&RETURN s5, 50[welcome1$:"P"]
 32B  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 32C  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 32D  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 32E  21562                       LOAD&RETURN s5, 62[welcome1$:"b"]
 32F  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 330  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 331  2157A                       LOAD&RETURN s5, 7A[welcome1$:"z"]
 332  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 333  2150D                       LOAD&RETURN s5, 0D[CR]
 334  21541                       LOAD&RETURN s5, 41[welcome11$:"A"]
 335  21575                       LOAD&RETURN s5, 75[welcome11$:"u"]
 336  21574                       LOAD&RETURN s5, 74[welcome11$:"t"]
 337  2156F                       LOAD&RETURN s5, 6F[welcome11$:"o"]
 338  21572                       LOAD&RETURN s5, 72[welcome11$:"r"]
 339  2153A                       LOAD&RETURN s5, 3A[welcome11$:":"]
 33A  21520                       LOAD&RETURN s5, 20[welcome11$:" "]
 33B  21553                       LOAD&RETURN s5, 53[welcome11$:"S"]
 33C  21565                       LOAD&RETURN s5, 65[welcome11$:"e"]
 33D  21562                       LOAD&RETURN s5, 62[welcome11$:"b"]
 33E  21561                       LOAD&RETURN s5, 61[welcome11$:"a"]
 33F  21573                       LOAD&RETURN s5, 73[welcome11$:"s"]
 340  21574                       LOAD&RETURN s5, 74[welcome11$:"t"]
 341  21569                       LOAD&RETURN s5, 69[welcome11$:"i"]
 342  21561                       LOAD&RETURN s5, 61[welcome11$:"a"]
 343  2156E                       LOAD&RETURN s5, 6E[welcome11$:"n"]
 344  21520                       LOAD&RETURN s5, 20[welcome11$:" "]
 345  2154B                       LOAD&RETURN s5, 4B[welcome11$:"K"]
 346  21575                       LOAD&RETURN s5, 75[welcome11$:"u"]
 347  21570                       LOAD&RETURN s5, 70[welcome11$:"p"]
 348  21569                       LOAD&RETURN s5, 69[welcome11$:"i"]
 349  21573                       LOAD&RETURN s5, 73[welcome11$:"s"]
 34A  2150D                       LOAD&RETURN s5, 0D[CR]
 34B  2150D                       LOAD&RETURN s5, 0D[CR]
 34C  21544                       LOAD&RETURN s5, 44[welcome2$:"D"]
 34D  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 34E  21574                       LOAD&RETURN s5, 74[welcome2$:"t"]
 34F  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 350  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 351  2157A                       LOAD&RETURN s5, 7A[welcome2$:"z"]
 352  21562                       LOAD&RETURN s5, 62[welcome2$:"b"]
 353  21575                       LOAD&RETURN s5, 75[welcome2$:"u"]
 354  21564                       LOAD&RETURN s5, 64[welcome2$:"d"]
 355  2156F                       LOAD&RETURN s5, 6F[welcome2$:"o"]
 356  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 357  21577                       LOAD&RETURN s5, 77[welcome2$:"w"]
 358  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 359  2156E                       LOAD&RETURN s5, 6E[welcome2$:"n"]
 35A  21569                       LOAD&RETURN s5, 69[welcome2$:"i"]
 35B  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 35C  2153A                       LOAD&RETURN s5, 3A[welcome2$:":"]
 35D  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 35E  21530                       LOAD&RETURN s5, 30[datestamp$:"0"]
 35F  21531                       LOAD&RETURN s5, 31[datestamp$:"1"]
 360  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 361  21544                       LOAD&RETURN s5, 44[datestamp$:"D"]
 362  21565                       LOAD&RETURN s5, 65[datestamp$:"e"]
 363  21563                       LOAD&RETURN s5, 63[datestamp$:"c"]
 364  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 365  21532                       LOAD&RETURN s5, 32[datestamp$:"2"]
 366  21530                       LOAD&RETURN s5, 30[datestamp$:"0"]
 367  21531                       LOAD&RETURN s5, 31[datestamp$:"1"]
 368  21535                       LOAD&RETURN s5, 35[datestamp$:"5"]
 369  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 36A  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 36B  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 36C  21543                       LOAD&RETURN s5, 43[welcome3$:"C"]
 36D  2157A                       LOAD&RETURN s5, 7A[welcome3$:"z"]
 36E  21561                       LOAD&RETURN s5, 61[welcome3$:"a"]
 36F  21573                       LOAD&RETURN s5, 73[welcome3$:"s"]
 370  2153A                       LOAD&RETURN s5, 3A[welcome3$:":"]
 371  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 372  21532                       LOAD&RETURN s5, 32[timestamp$:"2"]
 373  21532                       LOAD&RETURN s5, 32[timestamp$:"2"]
 374  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 375  21532                       LOAD&RETURN s5, 32[timestamp$:"2"]
 376  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 377  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 378  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 379  21534                       LOAD&RETURN s5, 34[timestamp$:"4"]
 37A  2150D                       LOAD&RETURN s5, 0D[CR]
 37B  21556                       LOAD&RETURN s5, 56[welcome4$:"V"]
 37C  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 37D  21572                       LOAD&RETURN s5, 72[welcome4$:"r"]
 37E  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 37F  21569                       LOAD&RETURN s5, 69[welcome4$:"i"]
 380  2156F                       LOAD&RETURN s5, 6F[welcome4$:"o"]
 381  2156E                       LOAD&RETURN s5, 6E[welcome4$:"n"]
 382  2153A                       LOAD&RETURN s5, 3A[welcome4$:":"]
 383  21520                       LOAD&RETURN s5, 20[welcome4$:" "]
 384  21576                       LOAD&RETURN s5, 76[KCPSM6_version$:"v"]
 385  21532                       LOAD&RETURN s5, 32[KCPSM6_version$:"2"]
 386  2152E                       LOAD&RETURN s5, 2E[KCPSM6_version$:"."]
 387  21537                       LOAD&RETURN s5, 37[KCPSM6_version$:"7"]
 388  21530                       LOAD&RETURN s5, 30[KCPSM6_version$:"0"]
 389  2150D                       LOAD&RETURN s5, 0D[CR]
 38A  21548                       LOAD&RETURN s5, 48[welcome5$:"H"]
 38B  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 38C  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 38D  21564                       LOAD&RETURN s5, 64[welcome5$:"d"]
 38E  21577                       LOAD&RETURN s5, 77[welcome5$:"w"]
 38F  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 390  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 391  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 392  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 393  21544                       LOAD&RETURN s5, 44[welcome5$:"D"]
 394  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 395  21573                       LOAD&RETURN s5, 73[welcome5$:"s"]
 396  21569                       LOAD&RETURN s5, 69[welcome5$:"i"]
 397  21567                       LOAD&RETURN s5, 67[welcome5$:"g"]
 398  2156E                       LOAD&RETURN s5, 6E[welcome5$:"n"]
 399  2153A                       LOAD&RETURN s5, 3A[welcome5$:":"]
 39A  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 39B  21500                       LOAD&RETURN s5, 00[NUL]
 39C                              ;
 39C                              ;
 39C                              ;------------------------------------------------------------------------------------------
 39C                              ; Send a message to the UART
 39C                              ;------------------------------------------------------------------------------------------
 39C                              ;
 39C                              ; A message is transmitted to the USB-UART.
 39C                              ; The start address of the message must be provided in [sB,sA].
 39C                              ; Terminate the transmission with a NULL character (00 hex).
 39C                              ;
 39C  24BA0         send_message: CALL@ (sB, sA)
 39D  1D500                       COMPARE s5, 00                                         ;terminate on NUL character
 39E  31000                       RETURN Z
 39F  20184                       CALL 184[UART_TX]
 3A0  11A01                       ADD sA, 01[1'd]
 3A1  13B00                       ADDCY sB, 00[0'd]
 3A2  2239C                       JUMP 39C[send_message]
 3A3                              ;
 3A3                              ;
 3A3                              ;------------------------------------------------------------------------------------------
 3A3                              ; Send Carriage Return to UART
 3A3                              ;------------------------------------------------------------------------------------------
 3A3                              ;
 3A3                              ; Registers used s0, s1, s2, and s5.
 3A3                              ;
 3A3  01B03       banner_message: LOAD sB, 03[banner_msg'upper]
 3A4  01AA8                       LOAD sA, A8[banner_msg'lower]
 3A5  203E0                       CALL 3E0[send_banner]
 3A6  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 3A7                              ;CALL send_CR
 3A7  25000                       RETURN 
 3A8                              ;
 3A8                              ; Welcome message
 3A8                              ;
 3A8                              STRING bannert$, "greeen"
 3A8                              ;
 3A8                              ;
 3A8  21F67           banner_msg: LOAD&RETURN sF, 67[bannert$:"g"]
 3A9  21F72                       LOAD&RETURN sF, 72[bannert$:"r"]
 3AA  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 3AB  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 3AC  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 3AD  21F6E                       LOAD&RETURN sF, 6E[bannert$:"n"]
 3AE  21F00                       LOAD&RETURN sF, 00[NUL]
 3AF                              ;
 3AF                              ;
 3AF                              ;
 3AF  01B03      banner2_message: LOAD sB, 03[banner2_msg'upper]
 3B0  01AB4                       LOAD sA, B4[banner2_msg'lower]
 3B1  203E0                       CALL 3E0[send_banner]
 3B2  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 3B3  25000                       RETURN 
 3B4                              ;
 3B4                              ; Welcome message
 3B4                              ;
 3B4                              STRING bannert2$, "blue"
 3B4                              ;
 3B4                              ;
 3B4  21F62          banner2_msg: LOAD&RETURN sF, 62[bannert2$:"b"]
 3B5  21F6C                       LOAD&RETURN sF, 6C[bannert2$:"l"]
 3B6  21F75                       LOAD&RETURN sF, 75[bannert2$:"u"]
 3B7  21F65                       LOAD&RETURN sF, 65[bannert2$:"e"]
 3B8  21F00                       LOAD&RETURN sF, 00[NUL]
 3B9  01B03      banner3_message: LOAD sB, 03[banner3_msg'upper]
 3BA  01ABE                       LOAD sA, BE[banner3_msg'lower]
 3BB  203E0                       CALL 3E0[send_banner]
 3BC  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 3BD                              ;CALL send_CR
 3BD  25000                       RETURN 
 3BE                              ;
 3BE                              ; Welcome message
 3BE                              ;
 3BE                              STRING bannert3$, "red"
 3BE                              ;
 3BE                              ;
 3BE  21F72          banner3_msg: LOAD&RETURN sF, 72[bannert3$:"r"]
 3BF  21F65                       LOAD&RETURN sF, 65[bannert3$:"e"]
 3C0  21F64                       LOAD&RETURN sF, 64[bannert3$:"d"]
 3C1  21F00                       LOAD&RETURN sF, 00[NUL]
 3C2  01B03      banner4_message: LOAD sB, 03[banner4_msg'upper]
 3C3  01AC7                       LOAD sA, C7[banner4_msg'lower]
 3C4  203E0                       CALL 3E0[send_banner]
 3C5  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 3C6                              ;CALL send_CR
 3C6  25000                       RETURN 
 3C7                              ;
 3C7                              ; Welcome message
 3C7                              ;
 3C7                              STRING bannert4$, "i czyszcze sobiecale UOP"
 3C7                              ;
 3C7                              ;
 3C7  21F69          banner4_msg: LOAD&RETURN sF, 69[bannert4$:"i"]
 3C8  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 3C9  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 3CA  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 3CB  21F79                       LOAD&RETURN sF, 79[bannert4$:"y"]
 3CC  21F73                       LOAD&RETURN sF, 73[bannert4$:"s"]
 3CD  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 3CE  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 3CF  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 3D0  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 3D1  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 3D2  21F73                       LOAD&RETURN sF, 73[bannert4$:"s"]
 3D3  21F6F                       LOAD&RETURN sF, 6F[bannert4$:"o"]
 3D4  21F62                       LOAD&RETURN sF, 62[bannert4$:"b"]
 3D5  21F69                       LOAD&RETURN sF, 69[bannert4$:"i"]
 3D6  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 3D7  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 3D8  21F61                       LOAD&RETURN sF, 61[bannert4$:"a"]
 3D9  21F6C                       LOAD&RETURN sF, 6C[bannert4$:"l"]
 3DA  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 3DB  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 3DC  21F55                       LOAD&RETURN sF, 55[bannert4$:"U"]
 3DD  21F4F                       LOAD&RETURN sF, 4F[bannert4$:"O"]
 3DE  21F50                       LOAD&RETURN sF, 50[bannert4$:"P"]
 3DF  21F00                       LOAD&RETURN sF, 00[NUL]
 3E0                              ;
 3E0                              ;
 3E0                              ; Send a banner to LCD
 3E0                              ;------------------------------------------------------------------------------------------
 3E0                              ;
 3E0                              ; A message is transmitted to the USB-UART.
 3E0                              ; The start address of the message must be provided in [sB,sA].
 3E0                              ; Terminate the transmission with a NULL character (00 hex).
 3E0                              ;
 3E0  24BA0          send_banner: CALL@ (sB, sA)
 3E1  1DF00                       COMPARE sF, 00                                         ;terminate on NUL character
 3E2  31000                       RETURN Z
 3E3                              ;LOAD sF,s5
 3E3  20189                       CALL 189[LCD_send]
 3E4  11A01                       ADD sA, 01[1'd]
 3E5  13B00                       ADDCY sB, 00[0'd]
 3E6  223E0                       JUMP 3E0[send_banner]
 3E7                              ;
 3E7                              ;
 3E7                              ;------------------------------------------------------------------------------------------
 3E7                              ; End of Program
 3E7                              ;------------------------------------------------------------------------------------------
 3E7                              ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\studia\MGR\FPGA\mgr\PicoProgram\program.psm
C:\studia\MGR\FPGA\mgr\PicoProgram\communication_routines.psm
C:\studia\MGR\FPGA\mgr\PicoProgram\banners_conversts_send.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        22'd         
 timestamp_minutes      24'd         
 timestamp_seconds      44'd         
 datestamp_year         15'd         
 datestamp_month        12'd         
 datestamp_day          01'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 hex_value0             00           program.psm
 hex_value1             01           program.psm
 decimal0               02           program.psm
 decimal1               03           program.psm
 decimal2               04           program.psm
 decimal3               05           program.psm
 decimal4               06           program.psm
 UART_status_port       00           communication_routines.psm
 UART_Tx_data_present   00000001'b   communication_routines.psm
 UART_Tx_half_full      00000010'b   communication_routines.psm
 UART_Tx_full           00000100'b   communication_routines.psm
 UART_Rx_data_present   00001000'b   communication_routines.psm
 UART_Rx_half_full      00010000'b   communication_routines.psm
 UART_Rx_full           00100000'b   communication_routines.psm
 UART_TX6_output_port   01           communication_routines.psm
 UART_RX6_input_port    01           communication_routines.psm
 LCD_driver_send_port   02           communication_routines.psm
 LCD_driver_en_port     03           communication_routines.psm
 LCD_driver_ready_port  04           communication_routines.psm
 LPC_data_port          05           communication_routines.psm
 LPC_data_valid_port    06           communication_routines.psm
 LPC_ready_port         07           communication_routines.psm
 LPC_IN_data_port       08           communication_routines.psm
 LPC_IN_data_valid_port 09           communication_routines.psm
 LPC_IN_ready_port      0A           communication_routines.psm
 IR_PORT                0B           communication_routines.psm
 reset_UART_port        01           communication_routines.psm
 UART_tx_reset          00000001'b   communication_routines.psm
 UART_rx_reset          00000010'b   communication_routines.psm
 UART_reset             00000011'b   communication_routines.psm
 UART_operate           00000000'b   communication_routines.psm
 LCD_en_reset           00000000'b   communication_routines.psm
 LCD_en_syg             00000001'b   communication_routines.psm
 LCD_ready_syg          00000001'b   communication_routines.psm
 LCD_odebral_syg        00000000'b   communication_routines.psm
 LPC_ready_syg          00000001'b   communication_routines.psm
 LPC_data_valid_syg     00000001'b   communication_routines.psm
 LPC_dv_reset           00000000'b   communication_routines.psm
 green                  03           banners_conversts_send.psm
 red                    07           banners_conversts_send.psm
 blue                   01           banners_conversts_send.psm
 clear                  0F           banners_conversts_send.psm
 button0                3F           banners_conversts_send.psm
 button1                3D           banners_conversts_send.psm
 button2                3B           banners_conversts_send.psm
 button3                39           banners_conversts_send.psm
 button4                37           banners_conversts_send.psm
 button5                35           banners_conversts_send.psm
 button6                33           banners_conversts_send.psm
 button7                31           banners_conversts_send.psm
 button8                2F           banners_conversts_send.psm
 button9                2D           banners_conversts_send.psm
 buttonON               27           banners_conversts_send.psm
 buttonMute             25           banners_conversts_send.psm
 buttonUp               3F           banners_conversts_send.psm
 buttonDown             3D           banners_conversts_send.psm
 buttonCenter           09           banners_conversts_send.psm
 buttonLeft             1D           banners_conversts_send.psm
 buttonRight            1F           banners_conversts_send.psm



No TABLEs defined



List of text strings

 STRING name       String                                                                 Source PSM File

 KCPSM6_version$   "v2.70"                                                                
 datestamp$        "01 Dec 2015"                                                          
 timestamp$        "22:24:44"                                                             
 prompt$           "Please enter a 4-digit hexadecimal value"                             program.psm
 bad_hex$          "Sorry, that was not a valid 4-digit hexadecimal value!"               program.psm
 result$           "The decimal equivalent of "                                           program.psm
 banner1$          "  _  ______ ____  ____  __  __  __"                                   banners_conversts_send.psm
 banner2$          " | |/ / ___|  _ \/ ___||  \/  |/ /_"                                  banners_conversts_send.psm
 banner3$          " | ' / |   | |_) \___ \| |\/| | '_ \"                                 banners_conversts_send.psm
 banner4$          " | . \ |___|  __/ ___) | |  | | (_) )"                                banners_conversts_send.psm
 banner5$          " |_|\_\____|_|   |____/|_|  |_|\___/"                                 banners_conversts_send.psm
 welcome1$         "Przyklad aplikacji obslugujacej portu IR z wykorzystaniem Picoblaze"  banners_conversts_send.psm
 welcome11$        "Autor: Sebastian Kupis"                                               banners_conversts_send.psm
 welcome2$         "Data zbudoawania: "                                                   banners_conversts_send.psm
 welcome3$         "   Czas: "                                                            banners_conversts_send.psm
 welcome4$         "Version: "                                                            banners_conversts_send.psm
 welcome5$         "Hardware Design: "                                                    banners_conversts_send.psm
 bannert$          "greeen"                                                               banners_conversts_send.psm
 bannert2$         "blue"                                                                 banners_conversts_send.psm
 bannert3$         "red"                                                                  banners_conversts_send.psm
 bannert4$         "i czyszcze sobiecale UOP"                                             banners_conversts_send.psm



List of line labels

   Label                 Addr  Source PSM File

 * cold_start            000   program.psm
   main                  004   program.psm
   IR_petla1             018   program.psm
   IR_petla2             019   program.psm
   IR_czekaj             01C   program.psm
 * IR_rx1                020   program.psm
   next_IR_bit1          021   program.psm
 * IR_rx2                027   program.psm
   next_IR_bit2          028   program.psm
 * IR_rx3                02E   program.psm
   next_IR_bit3          02F   program.psm
   LPC_THREAD            040   program.psm
   LPC_DV_down           046   program.psm
   UART_THREAD           04B   program.psm
 * bad_hex_input         053   program.psm
 * prompt_msg            058   program.psm
   bad_hex_msg           081   program.psm
 * result_msg            0B8   program.psm
   clear_screen          0D3   program.psm
 * cursor_home           0DD   program.psm
   send_CR               0E5   program.psm
   send_space            0E7   program.psm
 * send_hex_word         0E9   program.psm
   send_hex_byte         0ED   program.psm
   hex_to_ASCII          0F9   program.psm
   number_char           0FC   program.psm
   upper_case            0FE   program.psm
   ASCII_to_hex          104   program.psm
   ASCII_letter          10E   program.psm
 * obtain_value          110   program.psm
   obtain_digit          111   program.psm
   build_value           11A   program.psm
 * send_integer          124   program.psm
   send_integer_loop     12A   program.psm
   next_int_digit        130   program.psm
   zero_integer          134   program.psm
   integer16_to_BCD      137   program.psm
   int_to_BCD_loop       138   program.psm
   divide_16bit_by_10    13E   program.psm
   div10_loop            145   program.psm
   div10_restore         14A   program.psm
   div10_shifts          14D   program.psm
   my_delay_ir_bit       153   program.psm
 * delay_ir_bit          157   program.psm
 * delay_ir_half_bit     15B   program.psm
   delay_ir_1_8_bit      15F   program.psm
 * delay_200ms           163   program.psm
   delay_1s              167   program.psm
   delay_1ms             16B   program.psm
 * delay_40ms            16F   program.psm
 * delay_2s              173   program.psm
   software_delay        177   program.psm
   reset_UART_macros     17D   communication_routines.psm
 * reset_lcd_en_status   180   communication_routines.psm
 * reset_Eth_en_status   182   communication_routines.psm
   UART_TX               184   communication_routines.psm
   LCD_send              189   communication_routines.psm
   LCD_czy_odebral       18E   communication_routines.psm
   LPC_send              193   communication_routines.psm
   LPC_czy_odebral       198   communication_routines.psm
   petla                 19D   communication_routines.psm
   UART_RX               19F   communication_routines.psm
   rx_timeout            1A0   communication_routines.psm
   read_Rx               1A6   communication_routines.psm
   convert_send          1A8   banners_conversts_send.psm
   next_button1          1B2   banners_conversts_send.psm
   next_button2          1BC   banners_conversts_send.psm
   next_button3          1C6   banners_conversts_send.psm
   next_button4          1D0   banners_conversts_send.psm
   next_button5          1DA   banners_conversts_send.psm
   next_button6          1E4   banners_conversts_send.psm
   next_button7          1EE   banners_conversts_send.psm
   next_button8          1F8   banners_conversts_send.psm
   next_button9          202   banners_conversts_send.psm
   which_banner          20C   banners_conversts_send.psm
   next_banner1          215   banners_conversts_send.psm
   next_banner2          21E   banners_conversts_send.psm
   next_banner3          227   banners_conversts_send.psm
   just_return           230   banners_conversts_send.psm
   welcome_message       231   banners_conversts_send.psm
   welcome_msg           238   banners_conversts_send.psm
   send_message          39C   banners_conversts_send.psm
   banner_message        3A3   banners_conversts_send.psm
   banner_msg            3A8   banners_conversts_send.psm
   banner2_message       3AF   banners_conversts_send.psm
   banner2_msg           3B4   banners_conversts_send.psm
   banner3_message       3B9   banners_conversts_send.psm
   banner3_msg           3BE   banners_conversts_send.psm
   banner4_message       3C2   banners_conversts_send.psm
   banner4_msg           3C7   banners_conversts_send.psm
   send_banner           3E0   banners_conversts_send.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD            113
 STAR              -

 AND               2
 OR                1
 XOR               -

 ADD              11
 ADDCY             3
 SUB              38
 SUBCY             3

 TEST             27
 TESTCY            -
 COMPARE           8
 COMPARECY         1

 SL0               2
 SL1               1
 SLX               -
 SLA               7
 RL                -
 SR0               5
 SR1               -
 SRX               -
 SRA               1
 RR                -

 REGBANK           -

 INPUT            16
 OUTPUT            3
 OUTPUTK          10

 STORE             1
 FETCH             1

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             74
 JUMP@             -
 CALL             95
 CALL@             2
 RETURN           49
 LOAD&RETURN     520

 HWBUILD           5



End of KCPSM6 log file.
