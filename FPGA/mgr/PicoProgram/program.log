KCPSM6 Assembler log file for program 'C:\studia\MGR\FPGA\mgr\PicoProgram\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 10 Nov 2015
Assembly timestamp: 23:07:38

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 32B hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 812
Memory locations available: 3284


Assembly listing

 Addr Code                        Instruction

 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Copyright © 2011-2013, Xilinx, Inc.
 000                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 000                              ; protected under U.S. and international copyright and other intellectual property laws.
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; Disclaimer:
 000                              ; This disclaimer is not a license and does not grant any rights to the materials
 000                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 000                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 000                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 000                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 000                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 000                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 000                              ; (whether in contract or tort, including negligence, or under any other theory
 000                              ; of liability) for any loss or damage of any kind or nature related to, arising
 000                              ; under or in connection with these materials, including for any direct, or any
 000                              ; indirect, special, incidental, or consequential loss or damage (including loss
 000                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 000                              ; of any action brought by a third party) even if such damage or loss was
 000                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 000                              ;
 000                              ; CRITICAL APPLICATIONS
 000                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 000                              ; application requiring fail-safe performance, such as life-support or safety
 000                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 000                              ; related to the deployment of airbags, or any other applications that could lead
 000                              ; to death, personal injury, or severe property or environmental damage
 000                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 000                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 000                              ; subject only to applicable laws and regulations governing limitations on product
 000                              ; liability.
 000                              ;
 000                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;             _  ______ ____  ____  __  __  __
 000                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 000                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 000                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 000                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 000                              ;
 000                              ;
 000                              ; KCPSM6 reference design using 'uart_tx6' and 'uart_rx6' macros.
 000                              ;
 000                              ; Ken Chapman - Xilinx Ltd
 000                              ;
 000                              ;      11th May 2011 - Initial version
 000                              ;   6th October 2011 - Corrections to comments only
 000                              ;    23rd April 2012 - UART interface routines placed into 'uart_interface_routines.psm'
 000                              ;                      to facilitate reuse and provide an INCLUDE directive example.
 000                              ; 7th September 2012 - Corrections to comments only
 000                              ;    12th March 2013 - Constant directives defining ASCII control characters removed
 000                              ;                        (pre-defined in KCPSM6 assembler v2.43 or later).
 000                              ;     28th June 2013 - Corrections to comment only
 000                              ;
 000                              ;
 000                              ; INTRODUCTION
 000                              ;
 000                              ; This program interacts with the 'uart_tx6' and 'uart_rx6' macros providing some simple
 000                              ; and fundamental examples of UART based communication. As such, this example is intended
 000                              ; to display messages on a PC based terminal (e.g. PicoTerm or HyperTerminal) and receive
 000                              ; inputs typed on a keyboard by the user.
 000                              ;
 000                              ; The user is prompted to enter a 4-digit hexadecimal value which KCPSM6 converts to
 000                              ; decimal and displays if it is valid. It is hoped that this will also provide you with
 000                              ; several routines that you will find useful in your own programs.
 000                              ;
 000                              ; Please see 'UART6_User_Guide_30Sept12.pdf' for more detailed descriptions of the
 000                              ; hardware circuit. The 'UART_TX' and 'UART_RX' routines that form the software interface
 000                              ; with the macros are contained in 'uart_interface_routines.psm' together with a set of
 000                              ; constants which define the allocation of I/O ports and the signals within them. The
 000                              ; 'uart_interface_routines.psm' also presents an example of using the INCLUDE directive
 000                              ; introduced with KCPSM6 Assembler v2.00.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Port definitions
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; The only I/O ports used in this design are those that interface with the UART macros.
 000                              ; CONSTANT directives defining the port addresses and the allocation of signals within
 000                              ; those ports are defined in 'uart_interface_routines.psm'.
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Special Register usage
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; No registers are given special names in this program.
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Scratch Pad Memory Locations
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              CONSTANT hex_value0, 00                                ;16-bit value (lower byte)
 000                              CONSTANT hex_value1, 01                                ;16-bit value (upper byte)
 000                              ;
 000                              CONSTANT decimal0, 02                                  ;5 digit decimal value
 000                              CONSTANT decimal1, 03                                  ;  Suitable for 16-bit values up to
 000                              CONSTANT decimal2, 04                                  ;   65,536
 000                              CONSTANT decimal3, 05
 000                              CONSTANT decimal4, 06
 000                              ; banery
 000                              CONSTANT green, 03
 000                              CONSTANT red, 07
 000                              CONSTANT blue, 01
 000                              CONSTANT clear, 0F
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Useful data constants
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ;
 000                              ;
 000                              ;------------------------------------------------------------------------------------------
 000                              ; Initialise the system
 000                              ;------------------------------------------------------------------------------------------
 000                              ;
 000                              ; A delay of 1 second is implemented which is intended to give time for all the hardware
 000                              ; to settle into a stable condition before starting to doing anything. This can be
 000                              ; particularly beneficial when dealing with long cables where serial lines can take some
 000                              ; time to reach the initial idle state following power being applied.
 000                              ;
 000  200DA           cold_start: CALL 0DA[delay_1s]                                     ;
 001                              ;
 001  202FB                       CALL 2FB[reset_UART_macros]                            ;Reset buffers in UART macros
 002                              ;
 002                              ;
 002                              ; Initialised terminal display and display welcome messages
 002                              ;
 002  200E3                       CALL 0E3[clear_screen]
 003  200F5                       CALL 0F5[welcome_message]
 004                              ;
 004                              ;
 004                              ;------------------------------------------------------------------------------------------
 004                              ; Main Program
 004                              ;------------------------------------------------------------------------------------------
 004                              ;
 004                              ;
 004  2028A                       CALL 28A[send_CR]
 005  2028A                       CALL 28A[send_CR]
 006                        main: 
 006  01F1B                       LOAD sF, 1B[ESC]
 007  0151B                       LOAD s5, 1B[ESC]
 008  2030C                       CALL 30C[LCD_send]
 009  20302                       CALL 302[UART_TX]
 00A  01F4C                       LOAD sF, 4C["L"]
 00B  2030C                       CALL 30C[LCD_send]
 00C  20302                       CALL 302[UART_TX]
 00D  01F50                       LOAD sF, 50["P"]
 00E  2030C                       CALL 30C[LCD_send]
 00F  20302                       CALL 302[UART_TX]
 010  01F43                       LOAD sF, 43["C"]
 011  2030C                       CALL 30C[LCD_send]
 012  20302                       CALL 302[UART_TX]
 013  01F32                       LOAD sF, 32["2"]
 014  2030C                       CALL 30C[LCD_send]
 015  20302                       CALL 302[UART_TX]
 016  01F33                       LOAD sF, 33["3"]
 017  2030C                       CALL 30C[LCD_send]
 018  20302                       CALL 302[UART_TX]
 019  2B01A           LPC_THREAD: OUTPUTK 01[LPC_ready_syg], A[LPC_IN_ready_port]
 01A  09009                       INPUT s0, 09[LPC_IN_data_valid_port]
 01B  0D001                       TEST s0, 01[LPC_data_valid_syg]                        ;Z=0 and C=1 when data present
 01C  32025                       JUMP Z, 025[UART_THREAD]
 01D  09508                       INPUT s5, 08[LPC_IN_data_port]
 01E  20302                       CALL 302[UART_TX]
 01F  2002D                       CALL 02D[which_banner]
 020                              ;LOAD s5, "C"
 020  2B00A          LPC_DV_down: OUTPUTK 00[00000000'b], A[LPC_IN_ready_port]
 021  09009                       INPUT s0, 09[LPC_IN_data_valid_port]                   ;Sprawdza czy driver odebra³ dane
 022  0D001                       TEST s0, 01[LPC_data_valid_syg]
 023  3A020                       JUMP C, 020[LPC_DV_down]
 024                              ;CALL LPC_send
 024                              ;CALL LCD_send
 024                              ;CALL UART_TX
 024  22019                       JUMP 019[LPC_THREAD]
 025  09000          UART_THREAD: INPUT s0, 00[UART_status_port]
 026  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 027  32019                       JUMP Z, 019[LPC_THREAD]
 028  09501                       INPUT s5, 01[UART_RX6_input_port]
 029  00F50                       LOAD sF, s5
 02A  20316                       CALL 316[LPC_send]
 02B  2030C                       CALL 30C[LCD_send]
 02C  22025                       JUMP 025[UART_THREAD]
 02D  00650         which_banner: LOAD s6, s5
 02E  19603                       SUB s6, 03[green]
 02F  3A036                       JUMP C, 036[next_banner1]
 030  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 031  36036                       JUMP NZ, 036[next_banner1]
 032  01F1B                       LOAD sF, 1B[ESC]
 033  2030C                       CALL 30C[LCD_send]
 034  2023F                       CALL 23F[banner_message]
 035  25000                       RETURN 
 036  00650         next_banner1: LOAD s6, s5
 037  19601                       SUB s6, 01[blue]
 038  3A03F                       JUMP C, 03F[next_banner2]
 039  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 03A  3603F                       JUMP NZ, 03F[next_banner2]
 03B  01F1B                       LOAD sF, 1B[ESC]
 03C  2030C                       CALL 30C[LCD_send]
 03D  2024B                       CALL 24B[banner2_message]
 03E  25000                       RETURN 
 03F  00650         next_banner2: LOAD s6, s5
 040  19607                       SUB s6, 07[red]
 041  3A048                       JUMP C, 048[next_banner3]
 042  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 043  36048                       JUMP NZ, 048[next_banner3]
 044  01F1B                       LOAD sF, 1B[ESC]
 045  2030C                       CALL 30C[LCD_send]
 046  20255                       CALL 255[banner3_message]
 047  25000                       RETURN 
 048  00650         next_banner3: LOAD s6, s5
 049  1960F                       SUB s6, 0F[clear]
 04A  3A051                       JUMP C, 051[just_return]
 04B  0D6FF                       TEST s6, FF[11111111'b]                                ;16hex'
 04C  36051                       JUMP NZ, 051[just_return]
 04D  01F1B                       LOAD sF, 1B[ESC]
 04E  2030C                       CALL 30C[LCD_send]
 04F  2025E                       CALL 25E[banner4_message]
 050  25000                       RETURN 
 051  25000          just_return: RETURN 
 052  2028A        bad_hex_input: CALL 28A[send_CR]
 053  01B00                       LOAD sB, 00[bad_hex_msg'upper]                         ;tell user input was invalid hex
 054  01A80                       LOAD sA, 80[bad_hex_msg'lower]
 055  2027C                       CALL 27C[send_message]
 056  22006                       JUMP 006[main]
 057                              ;
 057                              ;
 057                              ; Text messages used in main section of the program
 057                              ;
 057                              STRING prompt$, "Please enter a 4-digit hexadecimal value"
 057                              STRING bad_hex$, "Sorry, that was not a valid 4-digit hexadecimal value!"
 057                              STRING result$, "The decimal equivalent of "
 057                              ;
 057  21550           prompt_msg: LOAD&RETURN s5, 50[prompt$:"P"]
 058  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 059  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 05A  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 05B  21573                       LOAD&RETURN s5, 73[prompt$:"s"]
 05C  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 05D  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 05E  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 05F  2156E                       LOAD&RETURN s5, 6E[prompt$:"n"]
 060  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 061  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 062  21572                       LOAD&RETURN s5, 72[prompt$:"r"]
 063  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 064  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 065  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 066  21534                       LOAD&RETURN s5, 34[prompt$:"4"]
 067  2152D                       LOAD&RETURN s5, 2D[prompt$:"-"]
 068  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 069  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 06A  21567                       LOAD&RETURN s5, 67[prompt$:"g"]
 06B  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 06C  21574                       LOAD&RETURN s5, 74[prompt$:"t"]
 06D  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 06E  21568                       LOAD&RETURN s5, 68[prompt$:"h"]
 06F  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 070  21578                       LOAD&RETURN s5, 78[prompt$:"x"]
 071  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 072  21564                       LOAD&RETURN s5, 64[prompt$:"d"]
 073  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 074  21563                       LOAD&RETURN s5, 63[prompt$:"c"]
 075  21569                       LOAD&RETURN s5, 69[prompt$:"i"]
 076  2156D                       LOAD&RETURN s5, 6D[prompt$:"m"]
 077  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 078  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 079  21520                       LOAD&RETURN s5, 20[prompt$:" "]
 07A  21576                       LOAD&RETURN s5, 76[prompt$:"v"]
 07B  21561                       LOAD&RETURN s5, 61[prompt$:"a"]
 07C  2156C                       LOAD&RETURN s5, 6C[prompt$:"l"]
 07D  21575                       LOAD&RETURN s5, 75[prompt$:"u"]
 07E  21565                       LOAD&RETURN s5, 65[prompt$:"e"]
 07F  21500                       LOAD&RETURN s5, 00[NUL]
 080                              ;
 080  21553          bad_hex_msg: LOAD&RETURN s5, 53[bad_hex$:"S"]
 081  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 082  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 083  21572                       LOAD&RETURN s5, 72[bad_hex$:"r"]
 084  21579                       LOAD&RETURN s5, 79[bad_hex$:"y"]
 085  2152C                       LOAD&RETURN s5, 2C[bad_hex$:","]
 086  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 087  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 088  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 089  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 08A  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 08B  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 08C  21577                       LOAD&RETURN s5, 77[bad_hex$:"w"]
 08D  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 08E  21573                       LOAD&RETURN s5, 73[bad_hex$:"s"]
 08F  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 090  2156E                       LOAD&RETURN s5, 6E[bad_hex$:"n"]
 091  2156F                       LOAD&RETURN s5, 6F[bad_hex$:"o"]
 092  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 093  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 094  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 095  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 096  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 097  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 098  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 099  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 09A  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 09B  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 09C  21534                       LOAD&RETURN s5, 34[bad_hex$:"4"]
 09D  2152D                       LOAD&RETURN s5, 2D[bad_hex$:"-"]
 09E  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 09F  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0A0  21567                       LOAD&RETURN s5, 67[bad_hex$:"g"]
 0A1  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0A2  21574                       LOAD&RETURN s5, 74[bad_hex$:"t"]
 0A3  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0A4  21568                       LOAD&RETURN s5, 68[bad_hex$:"h"]
 0A5  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0A6  21578                       LOAD&RETURN s5, 78[bad_hex$:"x"]
 0A7  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0A8  21564                       LOAD&RETURN s5, 64[bad_hex$:"d"]
 0A9  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0AA  21563                       LOAD&RETURN s5, 63[bad_hex$:"c"]
 0AB  21569                       LOAD&RETURN s5, 69[bad_hex$:"i"]
 0AC  2156D                       LOAD&RETURN s5, 6D[bad_hex$:"m"]
 0AD  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0AE  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0AF  21520                       LOAD&RETURN s5, 20[bad_hex$:" "]
 0B0  21576                       LOAD&RETURN s5, 76[bad_hex$:"v"]
 0B1  21561                       LOAD&RETURN s5, 61[bad_hex$:"a"]
 0B2  2156C                       LOAD&RETURN s5, 6C[bad_hex$:"l"]
 0B3  21575                       LOAD&RETURN s5, 75[bad_hex$:"u"]
 0B4  21565                       LOAD&RETURN s5, 65[bad_hex$:"e"]
 0B5  21521                       LOAD&RETURN s5, 21[bad_hex$:"!"]
 0B6  21500                       LOAD&RETURN s5, 00[NUL]
 0B7                              ;
 0B7  21554           result_msg: LOAD&RETURN s5, 54[result$:"T"]
 0B8  21568                       LOAD&RETURN s5, 68[result$:"h"]
 0B9  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0BA  21520                       LOAD&RETURN s5, 20[result$:" "]
 0BB  21564                       LOAD&RETURN s5, 64[result$:"d"]
 0BC  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0BD  21563                       LOAD&RETURN s5, 63[result$:"c"]
 0BE  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0BF  2156D                       LOAD&RETURN s5, 6D[result$:"m"]
 0C0  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0C1  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0C2  21520                       LOAD&RETURN s5, 20[result$:" "]
 0C3  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0C4  21571                       LOAD&RETURN s5, 71[result$:"q"]
 0C5  21575                       LOAD&RETURN s5, 75[result$:"u"]
 0C6  21569                       LOAD&RETURN s5, 69[result$:"i"]
 0C7  21576                       LOAD&RETURN s5, 76[result$:"v"]
 0C8  21561                       LOAD&RETURN s5, 61[result$:"a"]
 0C9  2156C                       LOAD&RETURN s5, 6C[result$:"l"]
 0CA  21565                       LOAD&RETURN s5, 65[result$:"e"]
 0CB  2156E                       LOAD&RETURN s5, 6E[result$:"n"]
 0CC  21574                       LOAD&RETURN s5, 74[result$:"t"]
 0CD  21520                       LOAD&RETURN s5, 20[result$:" "]
 0CE  2156F                       LOAD&RETURN s5, 6F[result$:"o"]
 0CF  21566                       LOAD&RETURN s5, 66[result$:"f"]
 0D0  21520                       LOAD&RETURN s5, 20[result$:" "]
 0D1  21500                       LOAD&RETURN s5, 00[NUL]
 0D2                              ;
 0D2                              ;
 0D2                              ;------------------------------------------------------------------------------------------
 0D2                              ; Software Delays
 0D2                              ;------------------------------------------------------------------------------------------
 0D2                              ;
 0D2                              ; All based on 50MHz clock
 0D2                              ; The number of iterations of a delay loop required to form each delay required are
 0D2                              ; loaded into the register set [s2,s1,s0] and then the delay loop is started.
 0D2                              ;
 0D2                              ; Registers used s0, s1, s2
 0D2                              ;
 0D2                              ;1ms is 50,000 clock cycles requiring 6,250 delay iterations
 0D2                              ;
 0D2  01200            delay_1ms: LOAD s2, 00
 0D3  01118                       LOAD s1, 18
 0D4  0106A                       LOAD s0, 6A
 0D5  220DE                       JUMP 0DE[software_delay]
 0D6                              ;
 0D6                              ;20ms is 1,000,000 clock cycles requiring 125,000 delay iterations
 0D6                              ;
 0D6  01201           delay_20ms: LOAD s2, 01
 0D7  011E8                       LOAD s1, E8
 0D8  01048                       LOAD s0, 48
 0D9  220DE                       JUMP 0DE[software_delay]
 0DA                              ;
 0DA                              ;1s is 50,000,000 clock cycles requiring 6,250,000 delay iterations
 0DA                              ;
 0DA  0125F             delay_1s: LOAD s2, 5F
 0DB  0115E                       LOAD s1, 5E
 0DC  01010                       LOAD s0, 10
 0DD  220DE                       JUMP 0DE[software_delay]
 0DE                              ;
 0DE                              ; The delay loop decrements [s2,s1,s0] until it reaches zero
 0DE                              ; Each decrement cycle is 4 instructions which is 8 clock cycles (160ns at 50MHz)
 0DE                              ;
 0DE  19001       software_delay: SUB s0, 01[1'd]
 0DF  1B100                       SUBCY s1, 00[0'd]
 0E0  1B200                       SUBCY s2, 00[0'd]
 0E1  360DE                       JUMP NZ, 0DE[software_delay]
 0E2  25000                       RETURN 
 0E3                              ;
 0E3                              ;
 0E3                              ;------------------------------------------------------------------------------------------
 0E3                              ; Clear terminal and home cursor sequences for HyperTerminal (or similar)
 0E3                              ;------------------------------------------------------------------------------------------
 0E3                              ;
 0E3                              ; ANSI Escape Sequences/codes (VT100)
 0E3                              ;
 0E3  0151B         clear_screen: LOAD s5, 1B[ESC]                                       ;clear terminal sequence
 0E4  20302                       CALL 302[UART_TX]
 0E5  0155B                       LOAD s5, 5B["["]
 0E6  20302                       CALL 302[UART_TX]
 0E7  01532                       LOAD s5, 32["2"]
 0E8  20302                       CALL 302[UART_TX]
 0E9  0154A                       LOAD s5, 4A["J"]
 0EA  20302                       CALL 302[UART_TX]
 0EB  200D2                       CALL 0D2[delay_1ms]                                    ;Delay for reliable operation
 0EC  25000                       RETURN 
 0ED                              ;
 0ED  0151B          cursor_home: LOAD s5, 1B[ESC]                                       ;Send cursor to upper-left of display
 0EE  20302                       CALL 302[UART_TX]
 0EF  0155B                       LOAD s5, 5B["["]
 0F0  20302                       CALL 302[UART_TX]
 0F1  01548                       LOAD s5, 48["H"]
 0F2  20302                       CALL 302[UART_TX]
 0F3  200D2                       CALL 0D2[delay_1ms]                                    ;Delay for reliable operation
 0F4  25000                       RETURN 
 0F5                              ;
 0F5                              ;
 0F5                              ;------------------------------------------------------------------------------------------
 0F5                              ; Welcome Message.
 0F5                              ;------------------------------------------------------------------------------------------
 0F5                              ;
 0F5                              ; The welcome message includes a display of the version information available from the
 0F5                              ; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
 0F5                              ;
 0F5  01B00      welcome_message: LOAD sB, 00[welcome_msg'upper]
 0F6  01AFC                       LOAD sA, FC[welcome_msg'lower]
 0F7  2027C                       CALL 27C[send_message]
 0F8  14580                       HWBUILD s5                                             ;hardware version defines ASCII letter
 0F9  20302                       CALL 302[UART_TX]
 0FA  2028A                       CALL 28A[send_CR]
 0FB  25000                       RETURN 
 0FC                              ;
 0FC                              ; Welcome message
 0FC                              ;
 0FC                              STRING banner1$, "  _  ______ ____  ____  __  __  __"
 0FC                              STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
 0FC                              STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
 0FC                              STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
 0FC                              STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
 0FC                              ;
 0FC                              ; Welcome message
 0FC                              ;
 0FC                              STRING welcome1$, "Example using the 'uart_tx6' and 'uart_rx6' macros"
 0FC                              STRING welcome2$, "Assembly Date: "
 0FC                              STRING welcome3$, "   Time: "
 0FC                              STRING welcome4$, "Assembler Version: "
 0FC                              STRING welcome5$, "Hardware Design: "
 0FC                              ;
 0FC                              ;
 0FC  21520          welcome_msg: LOAD&RETURN s5, 20[banner1$:" "]
 0FD  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 0FE  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 0FF  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 100  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 101  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 102  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 103  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 104  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 105  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 106  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 107  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 108  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 109  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 10A  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 10B  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 10C  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 10D  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 10E  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 10F  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 110  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 111  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 112  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 113  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 114  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 115  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 116  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 117  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 118  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 119  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 11A  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 11B  21520                       LOAD&RETURN s5, 20[banner1$:" "]
 11C  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 11D  2155F                       LOAD&RETURN s5, 5F[banner1$:"_"]
 11E  2150D                       LOAD&RETURN s5, 0D[CR]
 11F  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 120  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 121  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 122  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 123  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 124  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 125  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 126  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 127  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 128  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 129  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 12A  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 12B  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 12C  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 12D  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 12E  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 12F  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 130  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 131  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 132  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 133  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 134  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 135  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 136  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 137  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 138  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 139  2155C                       LOAD&RETURN s5, 5C[banner2$:"\"]
 13A  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 13B  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 13C  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 13D  2157C                       LOAD&RETURN s5, 7C[banner2$:"|"]
 13E  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 13F  21520                       LOAD&RETURN s5, 20[banner2$:" "]
 140  2152F                       LOAD&RETURN s5, 2F[banner2$:"/"]
 141  2155F                       LOAD&RETURN s5, 5F[banner2$:"_"]
 142  2150D                       LOAD&RETURN s5, 0D[CR]
 143  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 144  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 145  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 146  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 147  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 148  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 149  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 14A  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 14B  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 14C  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 14D  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 14E  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 14F  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 150  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 151  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 152  21529                       LOAD&RETURN s5, 29[banner3$:")"]
 153  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 154  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 155  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 156  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 157  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 158  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 159  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 15A  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 15B  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 15C  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 15D  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 15E  2152F                       LOAD&RETURN s5, 2F[banner3$:"/"]
 15F  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 160  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 161  2157C                       LOAD&RETURN s5, 7C[banner3$:"|"]
 162  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 163  21527                       LOAD&RETURN s5, 27[banner3$:"'"]
 164  2155F                       LOAD&RETURN s5, 5F[banner3$:"_"]
 165  21520                       LOAD&RETURN s5, 20[banner3$:" "]
 166  2155C                       LOAD&RETURN s5, 5C[banner3$:"\"]
 167  2150D                       LOAD&RETURN s5, 0D[CR]
 168  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 169  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 16A  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 16B  2152E                       LOAD&RETURN s5, 2E[banner4$:"."]
 16C  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 16D  2155C                       LOAD&RETURN s5, 5C[banner4$:"\"]
 16E  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 16F  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 170  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 171  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 172  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 173  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 174  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 175  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 176  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 177  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 178  2152F                       LOAD&RETURN s5, 2F[banner4$:"/"]
 179  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 17A  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 17B  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 17C  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 17D  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 17E  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 17F  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 180  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 181  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 182  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 183  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 184  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 185  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 186  2157C                       LOAD&RETURN s5, 7C[banner4$:"|"]
 187  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 188  21528                       LOAD&RETURN s5, 28[banner4$:"("]
 189  2155F                       LOAD&RETURN s5, 5F[banner4$:"_"]
 18A  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 18B  21520                       LOAD&RETURN s5, 20[banner4$:" "]
 18C  21529                       LOAD&RETURN s5, 29[banner4$:")"]
 18D  2150D                       LOAD&RETURN s5, 0D[CR]
 18E  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 18F  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 190  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 191  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 192  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 193  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 194  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 195  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 196  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 197  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 198  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 199  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 19A  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 19B  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 19C  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 19D  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 19E  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 19F  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1A0  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1A1  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1A2  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1A3  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1A4  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 1A5  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1A6  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1A7  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1A8  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1A9  21520                       LOAD&RETURN s5, 20[banner5$:" "]
 1AA  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1AB  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1AC  2157C                       LOAD&RETURN s5, 7C[banner5$:"|"]
 1AD  2155C                       LOAD&RETURN s5, 5C[banner5$:"\"]
 1AE  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1AF  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B0  2155F                       LOAD&RETURN s5, 5F[banner5$:"_"]
 1B1  2152F                       LOAD&RETURN s5, 2F[banner5$:"/"]
 1B2  2150D                       LOAD&RETURN s5, 0D[CR]
 1B3  2150D                       LOAD&RETURN s5, 0D[CR]
 1B4  21545                       LOAD&RETURN s5, 45[welcome1$:"E"]
 1B5  21578                       LOAD&RETURN s5, 78[welcome1$:"x"]
 1B6  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1B7  2156D                       LOAD&RETURN s5, 6D[welcome1$:"m"]
 1B8  21570                       LOAD&RETURN s5, 70[welcome1$:"p"]
 1B9  2156C                       LOAD&RETURN s5, 6C[welcome1$:"l"]
 1BA  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 1BB  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1BC  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1BD  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 1BE  21569                       LOAD&RETURN s5, 69[welcome1$:"i"]
 1BF  2156E                       LOAD&RETURN s5, 6E[welcome1$:"n"]
 1C0  21567                       LOAD&RETURN s5, 67[welcome1$:"g"]
 1C1  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1C2  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1C3  21568                       LOAD&RETURN s5, 68[welcome1$:"h"]
 1C4  21565                       LOAD&RETURN s5, 65[welcome1$:"e"]
 1C5  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1C6  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1C7  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1C8  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1C9  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1CA  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1CB  2155F                       LOAD&RETURN s5, 5F[welcome1$:"_"]
 1CC  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1CD  21578                       LOAD&RETURN s5, 78[welcome1$:"x"]
 1CE  21536                       LOAD&RETURN s5, 36[welcome1$:"6"]
 1CF  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1D0  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1D1  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1D2  2156E                       LOAD&RETURN s5, 6E[welcome1$:"n"]
 1D3  21564                       LOAD&RETURN s5, 64[welcome1$:"d"]
 1D4  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1D5  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1D6  21575                       LOAD&RETURN s5, 75[welcome1$:"u"]
 1D7  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1D8  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1D9  21574                       LOAD&RETURN s5, 74[welcome1$:"t"]
 1DA  2155F                       LOAD&RETURN s5, 5F[welcome1$:"_"]
 1DB  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1DC  21578                       LOAD&RETURN s5, 78[welcome1$:"x"]
 1DD  21536                       LOAD&RETURN s5, 36[welcome1$:"6"]
 1DE  21527                       LOAD&RETURN s5, 27[welcome1$:"'"]
 1DF  21520                       LOAD&RETURN s5, 20[welcome1$:" "]
 1E0  2156D                       LOAD&RETURN s5, 6D[welcome1$:"m"]
 1E1  21561                       LOAD&RETURN s5, 61[welcome1$:"a"]
 1E2  21563                       LOAD&RETURN s5, 63[welcome1$:"c"]
 1E3  21572                       LOAD&RETURN s5, 72[welcome1$:"r"]
 1E4  2156F                       LOAD&RETURN s5, 6F[welcome1$:"o"]
 1E5  21573                       LOAD&RETURN s5, 73[welcome1$:"s"]
 1E6  2150D                       LOAD&RETURN s5, 0D[CR]
 1E7  2150D                       LOAD&RETURN s5, 0D[CR]
 1E8  21541                       LOAD&RETURN s5, 41[welcome2$:"A"]
 1E9  21573                       LOAD&RETURN s5, 73[welcome2$:"s"]
 1EA  21573                       LOAD&RETURN s5, 73[welcome2$:"s"]
 1EB  21565                       LOAD&RETURN s5, 65[welcome2$:"e"]
 1EC  2156D                       LOAD&RETURN s5, 6D[welcome2$:"m"]
 1ED  21562                       LOAD&RETURN s5, 62[welcome2$:"b"]
 1EE  2156C                       LOAD&RETURN s5, 6C[welcome2$:"l"]
 1EF  21579                       LOAD&RETURN s5, 79[welcome2$:"y"]
 1F0  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 1F1  21544                       LOAD&RETURN s5, 44[welcome2$:"D"]
 1F2  21561                       LOAD&RETURN s5, 61[welcome2$:"a"]
 1F3  21574                       LOAD&RETURN s5, 74[welcome2$:"t"]
 1F4  21565                       LOAD&RETURN s5, 65[welcome2$:"e"]
 1F5  2153A                       LOAD&RETURN s5, 3A[welcome2$:":"]
 1F6  21520                       LOAD&RETURN s5, 20[welcome2$:" "]
 1F7  21531                       LOAD&RETURN s5, 31[datestamp$:"1"]
 1F8  21530                       LOAD&RETURN s5, 30[datestamp$:"0"]
 1F9  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 1FA  2154E                       LOAD&RETURN s5, 4E[datestamp$:"N"]
 1FB  2156F                       LOAD&RETURN s5, 6F[datestamp$:"o"]
 1FC  21576                       LOAD&RETURN s5, 76[datestamp$:"v"]
 1FD  21520                       LOAD&RETURN s5, 20[datestamp$:" "]
 1FE  21532                       LOAD&RETURN s5, 32[datestamp$:"2"]
 1FF  21530                       LOAD&RETURN s5, 30[datestamp$:"0"]
 200  21531                       LOAD&RETURN s5, 31[datestamp$:"1"]
 201  21535                       LOAD&RETURN s5, 35[datestamp$:"5"]
 202  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 203  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 204  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 205  21554                       LOAD&RETURN s5, 54[welcome3$:"T"]
 206  21569                       LOAD&RETURN s5, 69[welcome3$:"i"]
 207  2156D                       LOAD&RETURN s5, 6D[welcome3$:"m"]
 208  21565                       LOAD&RETURN s5, 65[welcome3$:"e"]
 209  2153A                       LOAD&RETURN s5, 3A[welcome3$:":"]
 20A  21520                       LOAD&RETURN s5, 20[welcome3$:" "]
 20B  21532                       LOAD&RETURN s5, 32[timestamp$:"2"]
 20C  21533                       LOAD&RETURN s5, 33[timestamp$:"3"]
 20D  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 20E  21530                       LOAD&RETURN s5, 30[timestamp$:"0"]
 20F  21537                       LOAD&RETURN s5, 37[timestamp$:"7"]
 210  2153A                       LOAD&RETURN s5, 3A[timestamp$:":"]
 211  21533                       LOAD&RETURN s5, 33[timestamp$:"3"]
 212  21538                       LOAD&RETURN s5, 38[timestamp$:"8"]
 213  2150D                       LOAD&RETURN s5, 0D[CR]
 214  21541                       LOAD&RETURN s5, 41[welcome4$:"A"]
 215  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 216  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 217  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 218  2156D                       LOAD&RETURN s5, 6D[welcome4$:"m"]
 219  21562                       LOAD&RETURN s5, 62[welcome4$:"b"]
 21A  2156C                       LOAD&RETURN s5, 6C[welcome4$:"l"]
 21B  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 21C  21572                       LOAD&RETURN s5, 72[welcome4$:"r"]
 21D  21520                       LOAD&RETURN s5, 20[welcome4$:" "]
 21E  21556                       LOAD&RETURN s5, 56[welcome4$:"V"]
 21F  21565                       LOAD&RETURN s5, 65[welcome4$:"e"]
 220  21572                       LOAD&RETURN s5, 72[welcome4$:"r"]
 221  21573                       LOAD&RETURN s5, 73[welcome4$:"s"]
 222  21569                       LOAD&RETURN s5, 69[welcome4$:"i"]
 223  2156F                       LOAD&RETURN s5, 6F[welcome4$:"o"]
 224  2156E                       LOAD&RETURN s5, 6E[welcome4$:"n"]
 225  2153A                       LOAD&RETURN s5, 3A[welcome4$:":"]
 226  21520                       LOAD&RETURN s5, 20[welcome4$:" "]
 227  21576                       LOAD&RETURN s5, 76[KCPSM6_version$:"v"]
 228  21532                       LOAD&RETURN s5, 32[KCPSM6_version$:"2"]
 229  2152E                       LOAD&RETURN s5, 2E[KCPSM6_version$:"."]
 22A  21537                       LOAD&RETURN s5, 37[KCPSM6_version$:"7"]
 22B  21530                       LOAD&RETURN s5, 30[KCPSM6_version$:"0"]
 22C  2150D                       LOAD&RETURN s5, 0D[CR]
 22D  21548                       LOAD&RETURN s5, 48[welcome5$:"H"]
 22E  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 22F  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 230  21564                       LOAD&RETURN s5, 64[welcome5$:"d"]
 231  21577                       LOAD&RETURN s5, 77[welcome5$:"w"]
 232  21561                       LOAD&RETURN s5, 61[welcome5$:"a"]
 233  21572                       LOAD&RETURN s5, 72[welcome5$:"r"]
 234  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 235  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 236  21544                       LOAD&RETURN s5, 44[welcome5$:"D"]
 237  21565                       LOAD&RETURN s5, 65[welcome5$:"e"]
 238  21573                       LOAD&RETURN s5, 73[welcome5$:"s"]
 239  21569                       LOAD&RETURN s5, 69[welcome5$:"i"]
 23A  21567                       LOAD&RETURN s5, 67[welcome5$:"g"]
 23B  2156E                       LOAD&RETURN s5, 6E[welcome5$:"n"]
 23C  2153A                       LOAD&RETURN s5, 3A[welcome5$:":"]
 23D  21520                       LOAD&RETURN s5, 20[welcome5$:" "]
 23E  21500                       LOAD&RETURN s5, 00[NUL]
 23F  01B02       banner_message: LOAD sB, 02[banner_msg'upper]
 240  01A44                       LOAD sA, 44[banner_msg'lower]
 241  20283                       CALL 283[send_banner]
 242  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 243                              ;CALL send_CR
 243  25000                       RETURN 
 244                              ;
 244                              ; Welcome message
 244                              ;
 244                              STRING bannert$, "greeen"
 244                              ;
 244                              ;
 244  21F67           banner_msg: LOAD&RETURN sF, 67[bannert$:"g"]
 245  21F72                       LOAD&RETURN sF, 72[bannert$:"r"]
 246  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 247  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 248  21F65                       LOAD&RETURN sF, 65[bannert$:"e"]
 249  21F6E                       LOAD&RETURN sF, 6E[bannert$:"n"]
 24A  21F00                       LOAD&RETURN sF, 00[NUL]
 24B                              ;
 24B                              ;
 24B                              ;
 24B  01B02      banner2_message: LOAD sB, 02[banner2_msg'upper]
 24C  01A50                       LOAD sA, 50[banner2_msg'lower]
 24D  20283                       CALL 283[send_banner]
 24E  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 24F  25000                       RETURN 
 250                              ;
 250                              ; Welcome message
 250                              ;
 250                              STRING bannert2$, "blue"
 250                              ;
 250                              ;
 250  21F62          banner2_msg: LOAD&RETURN sF, 62[bannert2$:"b"]
 251  21F6C                       LOAD&RETURN sF, 6C[bannert2$:"l"]
 252  21F75                       LOAD&RETURN sF, 75[bannert2$:"u"]
 253  21F65                       LOAD&RETURN sF, 65[bannert2$:"e"]
 254  21F00                       LOAD&RETURN sF, 00[NUL]
 255  01B02      banner3_message: LOAD sB, 02[banner3_msg'upper]
 256  01A5A                       LOAD sA, 5A[banner3_msg'lower]
 257  20283                       CALL 283[send_banner]
 258  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 259                              ;CALL send_CR
 259  25000                       RETURN 
 25A                              ;
 25A                              ; Welcome message
 25A                              ;
 25A                              STRING bannert3$, "red"
 25A                              ;
 25A                              ;
 25A  21F72          banner3_msg: LOAD&RETURN sF, 72[bannert3$:"r"]
 25B  21F65                       LOAD&RETURN sF, 65[bannert3$:"e"]
 25C  21F64                       LOAD&RETURN sF, 64[bannert3$:"d"]
 25D  21F00                       LOAD&RETURN sF, 00[NUL]
 25E  01B02      banner4_message: LOAD sB, 02[banner4_msg'upper]
 25F  01A63                       LOAD sA, 63[banner4_msg'lower]
 260  20283                       CALL 283[send_banner]
 261  14F80                       HWBUILD sF                                             ;hardware version defines ASCII letter
 262                              ;CALL send_CR
 262  25000                       RETURN 
 263                              ;
 263                              ; Welcome message
 263                              ;
 263                              STRING bannert4$, "i czyszcze sobiecale UOP"
 263                              ;
 263                              ;
 263  21F69          banner4_msg: LOAD&RETURN sF, 69[bannert4$:"i"]
 264  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 265  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 266  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 267  21F79                       LOAD&RETURN sF, 79[bannert4$:"y"]
 268  21F73                       LOAD&RETURN sF, 73[bannert4$:"s"]
 269  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 26A  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 26B  21F7A                       LOAD&RETURN sF, 7A[bannert4$:"z"]
 26C  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 26D  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 26E  21F73                       LOAD&RETURN sF, 73[bannert4$:"s"]
 26F  21F6F                       LOAD&RETURN sF, 6F[bannert4$:"o"]
 270  21F62                       LOAD&RETURN sF, 62[bannert4$:"b"]
 271  21F69                       LOAD&RETURN sF, 69[bannert4$:"i"]
 272  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 273  21F63                       LOAD&RETURN sF, 63[bannert4$:"c"]
 274  21F61                       LOAD&RETURN sF, 61[bannert4$:"a"]
 275  21F6C                       LOAD&RETURN sF, 6C[bannert4$:"l"]
 276  21F65                       LOAD&RETURN sF, 65[bannert4$:"e"]
 277  21F20                       LOAD&RETURN sF, 20[bannert4$:" "]
 278  21F55                       LOAD&RETURN sF, 55[bannert4$:"U"]
 279  21F4F                       LOAD&RETURN sF, 4F[bannert4$:"O"]
 27A  21F50                       LOAD&RETURN sF, 50[bannert4$:"P"]
 27B  21F00                       LOAD&RETURN sF, 00[NUL]
 27C                              ;
 27C                              ;
 27C                              ;------------------------------------------------------------------------------------------
 27C                              ; Send a message to the UART
 27C                              ;------------------------------------------------------------------------------------------
 27C                              ;
 27C                              ; A message is transmitted to the USB-UART.
 27C                              ; The start address of the message must be provided in [sB,sA].
 27C                              ; Terminate the transmission with a NULL character (00 hex).
 27C                              ;
 27C  24BA0         send_message: CALL@ (sB, sA)
 27D  1D500                       COMPARE s5, 00                                         ;terminate on NUL character
 27E  31000                       RETURN Z
 27F  20302                       CALL 302[UART_TX]
 280  11A01                       ADD sA, 01[1'd]
 281  13B00                       ADDCY sB, 00[0'd]
 282  2227C                       JUMP 27C[send_message]
 283                              ; Send a banner to LCD
 283                              ;------------------------------------------------------------------------------------------
 283                              ;
 283                              ; A message is transmitted to the USB-UART.
 283                              ; The start address of the message must be provided in [sB,sA].
 283                              ; Terminate the transmission with a NULL character (00 hex).
 283                              ;
 283  24BA0          send_banner: CALL@ (sB, sA)
 284  1DF00                       COMPARE sF, 00                                         ;terminate on NUL character
 285  31000                       RETURN Z
 286                              ;LOAD sF,s5
 286  2030C                       CALL 30C[LCD_send]
 287  11A01                       ADD sA, 01[1'd]
 288  13B00                       ADDCY sB, 00[0'd]
 289  22283                       JUMP 283[send_banner]
 28A                              ;
 28A                              ;
 28A                              ;------------------------------------------------------------------------------------------
 28A                              ; Send Carriage Return to UART
 28A                              ;------------------------------------------------------------------------------------------
 28A                              ;
 28A                              ; Registers used s0, s1, s2, and s5.
 28A                              ;
 28A  0150D              send_CR: LOAD s5, 0D[CR]
 28B  22302                       JUMP 302[UART_TX]                                      ;includes RETURN
 28C                              ;
 28C                              ;
 28C                              ;------------------------------------------------------------------------------------------
 28C                              ; Send a Space to UART
 28C                              ;------------------------------------------------------------------------------------------
 28C                              ;
 28C                              ; Registers used s0, s1, s2, and s5.
 28C                              ;
 28C  01520           send_space: LOAD s5, 20[" "]
 28D  22302                       JUMP 302[UART_TX]                                      ;includes RETURN
 28E                              ;
 28E                              ;
 28E                              ;------------------------------------------------------------------------------------------
 28E                              ; Send Hex Value of 16-bit word to UART
 28E                              ;------------------------------------------------------------------------------------------
 28E                              ;
 28E                              ; Value provided in register pair [sB,sA] is sent as ASCII HEX to the UART
 28E                              ; transmitter.
 28E                              ;
 28E                              ; Registers used s0, s1, s2, s4, s5, sA and sB.
 28E                              ;
 28E  004B0        send_hex_word: LOAD s4, sB
 28F  20292                       CALL 292[send_hex_byte]
 290  004A0                       LOAD s4, sA
 291  22292                       JUMP 292[send_hex_byte]                                ;includes RETURN
 292                              ;
 292                              ;
 292                              ;------------------------------------------------------------------------------------------
 292                              ; Send Hex Value of Byte to UART
 292                              ;------------------------------------------------------------------------------------------
 292                              ;
 292                              ; Value provided in register 's4' is sent as ASCII HEX to the UART transmitter.
 292                              ;
 292                              ; Registers used s0, s4 (preserved) and s5.
 292                              ;
 292  00540        send_hex_byte: LOAD s5, s4                                            ;isolate upper nibble
 293  1450E                       SR0 s5
 294  1450E                       SR0 s5
 295  1450E                       SR0 s5
 296  1450E                       SR0 s5
 297  2029E                       CALL 29E[hex_to_ASCII]                                 ; convert to ASCII
 298  20302                       CALL 302[UART_TX]                                      ;send upper digit to UART
 299  00540                       LOAD s5, s4                                            ;isolate lower nibble
 29A  0350F                       AND s5, 0F
 29B  2029E                       CALL 29E[hex_to_ASCII]                                 ; convert to ASCII
 29C  20302                       CALL 302[UART_TX]                                      ;send lower digit to UART
 29D  25000                       RETURN 
 29E                              ;
 29E                              ; Convert value 00 to 0F provided in 's5' into ASCII character in 's5'
 29E                              ;
 29E                              ; Register used s5
 29E                              ;
 29E  1950A         hex_to_ASCII: SUB s5, 0A                                             ;test if value is in range 0 to 9
 29F  3A2A1                       JUMP C, 2A1[number_char]
 2A0  11507                       ADD s5, 07                                             ;ASCII char A to F in range 41 to 46
 2A1  1153A          number_char: ADD s5, 3A                                             ;ASCII char 0 to 9 in range 30 to 40
 2A2  25000                       RETURN 
 2A3                              ;
 2A3                              ;
 2A3                              ;------------------------------------------------------------------------------------------
 2A3                              ; Converts character to upper case
 2A3                              ;------------------------------------------------------------------------------------------
 2A3                              ;
 2A3                              ; Tests and converts character in 's5' (if necessary).
 2A3                              ;
 2A3                              ; To convert character to upper case
 2A3                              ;
 2A3                              ; If the character is in the range 'a' to 'z', it is converted
 2A3                              ; to the equivalent upper case character in the range 'A' to 'Z'.
 2A3                              ; All other characters remain unchanged.
 2A3                              ;
 2A3  1D561           upper_case: COMPARE s5, 61["a"]                                    ;eliminate character codes below 'a' (61 hex)
 2A4  39000                       RETURN C
 2A5  1D57B                       COMPARE s5, 7B                                         ;eliminate character codes above 'z' (7A hex)
 2A6  3D000                       RETURN NC
 2A7  035DF                       AND s5, DF[11011111'b]                                 ;force bit5 Low to convert to upper case
 2A8  25000                       RETURN 
 2A9                              ;
 2A9                              ;
 2A9                              ;------------------------------------------------------------------------------------------
 2A9                              ; Convert ASCII character to an equivalent HEX value.
 2A9                              ;------------------------------------------------------------------------------------------
 2A9                              ;
 2A9                              ; Converts the ASCII character presented in 's5' to an equivalent HEX value.
 2A9                              ; If character is not valid for hex, then CARRY is set on return.
 2A9                              ;
 2A9                              ; Register used s5
 2A9                              ;
 2A9  115B9         ASCII_to_hex: ADD s5, B9                                             ;test for above ASCII code 46 ('F')
 2AA  39000                       RETURN C
 2AB  195E9                       SUB s5, E9                                             ;normalise 0 to 9 with A-F in 11 to 16 hex
 2AC  39000                       RETURN C                                               ;reject below ASCII code 30 ('0')
 2AD  19511                       SUB s5, 11                                             ;isolate A-F down to 00 to 05 hex
 2AE  3E2B3                       JUMP NC, 2B3[ASCII_letter]
 2AF  11507                       ADD s5, 07                                             ;test for above ASCII code 46 ('F')
 2B0  39000                       RETURN C
 2B1  195F6                       SUB s5, F6                                             ;convert to range 00 to 09
 2B2  25000                       RETURN 
 2B3  1150A         ASCII_letter: ADD s5, 0A                                             ;convert to range 0A to 0F
 2B4  25000                       RETURN 
 2B5                              ;
 2B5                              ;
 2B5                              ;------------------------------------------------------------------------------------------
 2B5                              ; Read ASCII-HEX value up to 8-digits (for 32-bit value) from UART
 2B5                              ;------------------------------------------------------------------------------------------
 2B5                              ;
 2B5                              ; Read up to 8 hex characters from UART and convert to a binary value in the [sD,sC,sB,sA]
 2B5                              ; register set. The number of characters to be read must be defined in sE. When less than
 2B5                              ; 8 characters are read the value is returned in the least significant bits of the register
 2B5                              ; set with the 8-bits above the defined value being zero to ensure ensuring that the upper
 2B5                              ; nibble will be zero if an odd number of digits are read.
 2B5                              ;
 2B5                              ; If any character received from the UART is not in the range 0 to F then the routine will
 2B5                              ; end immediately with the CARRY flag set and this should be checked by the calling process
 2B5                              ; upon return.
 2B5                              ;
 2B5  01A00         obtain_value: LOAD sA, 00                                            ;initialise potentially unused bits to zero
 2B6  20323         obtain_digit: CALL 323[UART_RX]                                      ;wait for a character and return in s5
 2B7  322B6                       JUMP Z, 2B6[obtain_digit]                              ;continue to wait if timeout occurs
 2B8  01F1B                       LOAD sF, 1B[ESC]
 2B9  2030C                       CALL 30C[LCD_send]
 2BA  00F50                       LOAD sF, s5
 2BB  2030C                       CALL 30C[LCD_send]
 2BC  20302                       CALL 302[UART_TX]                                      ;echo character as entered
 2BD  20302                       CALL 302[UART_TX]                                      ;echo character as entered
 2BE  202A3                       CALL 2A3[upper_case]                                   ;convert to upper case if necessary
 2BF  202A9                       CALL 2A9[ASCII_to_hex]                                 ;convert value in s5 to hex nibble
 2C0  39000                       RETURN C                                               ;If invalid hex digit then return immediately
 2C1  01004                       LOAD s0, 04[4'd]                                       ;shift [sD,sC,sB,sA] left by 4 bits
 2C2  14A06          build_value: SL0 sA                                                 ;  to make space for new digit value
 2C3  14B00                       SLA sB
 2C4  14C00                       SLA sC
 2C5  14D00                       SLA sD
 2C6  19001                       SUB s0, 01[1'd]
 2C7  362C2                       JUMP NZ, 2C2[build_value]
 2C8  04A50                       OR sA, s5                                              ;merge value of new digit into existing value
 2C9  19E01                       SUB sE, 01                                             ;count number of digits obtained
 2CA  362B6                       JUMP NZ, 2B6[obtain_digit]
 2CB  25000                       RETURN 
 2CC                              ;
 2CC                              ;
 2CC                              ;------------------------------------------------------------------------------------------
 2CC                              ; Send integer in decimal format to UART Tx
 2CC                              ;------------------------------------------------------------------------------------------
 2CC                              ;
 2CC                              ; The 16-bit value provided in [s3,s2] should be a positive integer and will be displayed
 2CC                              ; using 1 to 5 digits for values up to 65535 (i.e. leading zeros are blanked).
 2CC                              ;
 2CC                              ;
 2CC  1D200         send_integer: COMPARE s2, 00                                         ;test for special case of zero
 2CD  1F300                       COMPARECY s3, 00
 2CE  322DC                       JUMP Z, 2DC[zero_integer]
 2CF                              ;
 2CF  202DF                       CALL 2DF[integer16_to_BCD]                             ;Convert to BCD in SPM
 2D0                              ;
 2D0  01A06                       LOAD sA, 06[decimal4]                                  ;pointer to BCD in SPM
 2D1  01B00                       LOAD sB, 00[0'd]                                       ;flag for leading zero blanking
 2D2  0A5A0    send_integer_loop: FETCH s5, (sA)
 2D3  10B50                       ADD sB, s5                                             ;make sB non-zero to stop blanking
 2D4  1DB00                       COMPARE sB, 00[0'd]                                    ;Test for blanking
 2D5  322D8                       JUMP Z, 2D8[next_int_digit]
 2D6  11530                       ADD s5, 30["0"]                                        ;convert to ASCII
 2D7  20302                       CALL 302[UART_TX]                                      ;send digit
 2D8  1DA02       next_int_digit: COMPARE sA, 02[decimal0]
 2D9  31000                       RETURN Z
 2DA  19A01                       SUB sA, 01[1'd]                                        ;move pointer to next digit
 2DB  222D2                       JUMP 2D2[send_integer_loop]
 2DC                              ;
 2DC  01530         zero_integer: LOAD s5, 30["0"]                                       ;special response for zero
 2DD  20302                       CALL 302[UART_TX]
 2DE  25000                       RETURN 
 2DF                              ;
 2DF                              ;
 2DF                              ;------------------------------------------------------------------------------------------
 2DF                              ; 16-bit integer to BCD conversion
 2DF                              ;------------------------------------------------------------------------------------------
 2DF                              ;
 2DF                              ; Convert the 16 bit value up to FFFF hex in register set [s3,s2]
 2DF                              ; into the BCD decimal equivalent up to 65,535 located in the scratch pad memory
 2DF                              ; locations 'decimal0' to 'decimal4' which must be in ascending locations.
 2DF                              ;
 2DF                              ; Each digit is formed in turn starting with the least significant. The value
 2DF                              ; contained in [s3,s2] is divided by 10 and the remainder of that integer division
 2DF                              ; is the value of each digit in the range 0 to 9.
 2DF                              ;
 2DF                              ; Registers used s0,s2,s3,s4,s8,s9,sA,sB
 2DF                              ;
 2DF  01402     integer16_to_BCD: LOAD s4, 02[decimal0]                                  ;pointer for LS-Digit in scratch pad memory
 2E0  202E6      int_to_BCD_loop: CALL 2E6[divide_16bit_by_10]
 2E1  2EA40                       STORE sA, (s4)                                         ;remainder is the digit value
 2E2  1D406                       COMPARE s4, 06[decimal4]                               ;test for MS-Digit completed
 2E3  31000                       RETURN Z
 2E4  11401                       ADD s4, 01[1'd]                                        ;advance pointer to next digit
 2E5  222E0                       JUMP 2E0[int_to_BCD_loop]
 2E6                              ;
 2E6                              ; Divide 16-bit binary integer by 10
 2E6                              ;
 2E6                              ; The value to be divided by 10 should be provided in register set [s3,s2].
 2E6                              ; The routine will return the integer result [s3,s2]/10 back in[s3,s2]
 2E6                              ; with any remainder in (0 to 9) in register sA.
 2E6                              ;
 2E6                              ; Registers used s0,s2,s3,s8,s9,sA,sB
 2E6                              ;
 2E6  00A20   divide_16bit_by_10: LOAD sA, s2                                            ;copy input value into [sB,sA]
 2E7  00B30                       LOAD sB, s3
 2E8  01200                       LOAD s2, 00                                            ;clear division result
 2E9  01300                       LOAD s3, 00
 2EA  019A0                       LOAD s9, A0                                            ;initialise [s9,s8] with '10' in MSBs
 2EB  01800                       LOAD s8, 00
 2EC  0100D                       LOAD s0, 0D[13'd]                                      ;13 subtract and shift iterations to be performed
 2ED  18A80           div10_loop: SUB sA, s8                                             ;perform 16-bit subtract [sB,sA]-[s9,s8]
 2EE  1AB90                       SUBCY sB, s9
 2EF  3A2F2                       JUMP C, 2F2[div10_restore]                             ;if carry then could not subtract from total
 2F0  14207                       SL1 s2                                                 ;shift '1' into result because subtract ok
 2F1  222F5                       JUMP 2F5[div10_shifts]
 2F2  10A80        div10_restore: ADD sA, s8                                             ;perform 16-bit addition [sB,sA]+[s9,s8]
 2F3  12B90                       ADDCY sB, s9                                           ;to restore total
 2F4  14206                       SL0 s2                                                 ;shift '0' into result because could no subtract
 2F5  14300         div10_shifts: SLA s3                                                 ;complete 16-bit shift left into [s3,s2]
 2F6  1490E                       SR0 s9                                                 ;divide '10' value by 2 (shift right 1 place)
 2F7  14808                       SRA s8
 2F8  19001                       SUB s0, 01                                             ;count iterations
 2F9  31000                       RETURN Z                                               ;on return the remainder of division is in sA
 2FA  222ED                       JUMP 2ED[div10_loop]
 2FB                              ;
 2FB                              ;
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ; Include PSM files
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ;
 2FB                              ; The INCLUDE directive enables commonly routines to be kept in their own PSM files and
 2FB                              ; easily reused in different programs (i.e. avoiding 'cut and paste'). It also allows
 2FB                              ; each PSM to remain a more manageable size.
 2FB                              ;
 2FB                              ;
 2FB                              ; Include routines that implement interface with UART macros.
 2FB                              ; -----------------------------------------------------------
 2FB                              ;
 2FB                              INCLUDE "C:\studia\MGR\FPGA\mgr\PicoProgram\communication_routines.psm"["communication_routines.psm"]
 2FB                              ;
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ; Copyright © 2011-2012, Xilinx, Inc.
 2FB                              ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 2FB                              ; protected under U.S. and international copyright and other intellectual property laws.
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ;
 2FB                              ; Disclaimer:
 2FB                              ; This disclaimer is not a license and does not grant any rights to the materials
 2FB                              ; distributed herewith. Except as otherwise provided in a valid license issued to
 2FB                              ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 2FB                              ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 2FB                              ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 2FB                              ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 2FB                              ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 2FB                              ; (whether in contract or tort, including negligence, or under any other theory
 2FB                              ; of liability) for any loss or damage of any kind or nature related to, arising
 2FB                              ; under or in connection with these materials, including for any direct, or any
 2FB                              ; indirect, special, incidental, or consequential loss or damage (including loss
 2FB                              ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 2FB                              ; of any action brought by a third party) even if such damage or loss was
 2FB                              ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 2FB                              ;
 2FB                              ; CRITICAL APPLICATIONS
 2FB                              ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 2FB                              ; application requiring fail-safe performance, such as life-support or safety
 2FB                              ; devices or systems, Class III medical devices, nuclear facilities, applications
 2FB                              ; related to the deployment of airbags, or any other applications that could lead
 2FB                              ; to death, personal injury, or severe property or environmental damage
 2FB                              ; (individually and collectively, "Critical Applications"). Customer assumes the
 2FB                              ; sole risk and liability of any use of Xilinx products in Critical Applications,
 2FB                              ; subject only to applicable laws and regulations governing limitations on product
 2FB                              ; liability.
 2FB                              ;
 2FB                              ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 2FB                              ;
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ;
 2FB                              ;             _  ______ ____  ____  __  __  __
 2FB                              ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 2FB                              ;            | ' / |   | |_) \___ \| |\/| | '_ \
 2FB                              ;            | . \ |___|  __/ ___) | |  | | (_) )
 2FB                              ;            |_|\_\____|_|   |____/|_|  |_|\___/
 2FB                              ;
 2FB                              ;
 2FB                              ;                PicoBlaze Reference Design.
 2FB                              ;
 2FB                              ;
 2FB                              ; Ken Chapman - Xilinx Ltd
 2FB                              ;
 2FB                              ; 23rd April 2012 - Initial Release
 2FB                              ; 24th July 2012 - Corrections to comments only
 2FB                              ;
 2FB                              ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
 2FB                              ; and was first supplied with a reference design called 'uart6_605' included in the
 2FB                              ; PicoBlaze package. The routines enable characters to be transmitted to and received
 2FB                              ; from the UART macros as well as perform a reset of the FIFO the buffers.
 2FB                              ;
 2FB                              ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
 2FB                              ;            the reference design stated above includes this file and calls the routines
 2FB                              ;            contained in this file.
 2FB                              ;
 2FB                              ;                INCLUDE "uart_interface_routines.psm"
 2FB                              ;
 2FB                              ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
 2FB                              ;
 2FB                              ;
 2FB                              ; Whilst the reference design stated above was presented for the UART macros connected to
 2FB                              ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
 2FB                              ; any design for any board simply by setting the appropriate values in the CONSTANT
 2FB                              ; directives described below.
 2FB                              ;
 2FB                              ;
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ; Hardware Constants
 2FB                              ;------------------------------------------------------------------------------------------
 2FB                              ;
 2FB                              ; The CONSTANT directives below define the input and output ports assigned to the UART
 2FB                              ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
 2FB                              ; Additional constants identify the allocation of signals to bits within a port.
 2FB                              ;
 2FB                              ;
 2FB                              ;
 2FB                              ; UART Status
 2FB                              ; -----------
 2FB                              ;
 2FB                              CONSTANT UART_status_port, 00                          ; Read status
 2FB                              CONSTANT UART_Tx_data_present, 00000001'b              ; Tx   data_present - bit0
 2FB                              CONSTANT UART_Tx_half_full, 00000010'b                 ;         half_full - bit1
 2FB                              CONSTANT UART_Tx_full, 00000100'b                      ;              full - bit2
 2FB                              CONSTANT UART_Rx_data_present, 00001000'b              ; Rx   data_present - bit3
 2FB                              CONSTANT UART_Rx_half_full, 00010000'b                 ;         half_full - bit4
 2FB                              CONSTANT UART_Rx_full, 00100000'b                      ;              full - bit5
 2FB                              ;
 2FB                              ; Write data to UART_TX6
 2FB                              ; ----------------------
 2FB                              ;
 2FB                              CONSTANT UART_TX6_output_port, 01
 2FB                              ;
 2FB                              ; Read data from UART_RX6
 2FB                              ; -----------------------
 2FB                              ;
 2FB                              CONSTANT UART_RX6_input_port, 01
 2FB                              ;
 2FB                              ; Reset UART buffers (Constant Optimised Port)
 2FB                              ; --------------------------------------------
 2FB                              ;
 2FB                              CONSTANT LCD_driver_send_port, 02
 2FB                              CONSTANT LCD_driver_en_port, 03
 2FB                              CONSTANT LCD_driver_ready_port, 04
 2FB                              CONSTANT LPC_data_port, 05
 2FB                              CONSTANT LPC_data_valid_port, 06
 2FB                              CONSTANT LPC_ready_port, 07
 2FB                              CONSTANT LPC_IN_data_port, 08                          ; from LPC
 2FB                              CONSTANT LPC_IN_data_valid_port, 09                    ; from LPC
 2FB                              CONSTANT LPC_IN_ready_port, 0A                         ; to LPC
 2FB                              CONSTANT reset_UART_port, 01
 2FB                              CONSTANT UART_tx_reset, 00000001'b                     ; uart_tx6 reset - bit0
 2FB                              CONSTANT UART_rx_reset, 00000010'b                     ; uart_rx6 reset - bit1
 2FB                              CONSTANT UART_reset, 00000011'b                        ; reset Tx and Rx
 2FB                              CONSTANT UART_operate, 00000000'b                      ; Tx and Rx free to operate
 2FB                              CONSTANT LCD_en_reset, 00000000'b                      ; reset lcd en
 2FB                              CONSTANT LCD_en_syg, 00000001'b                        ; send lcd en
 2FB                              CONSTANT LCD_ready_syg, 00000001'b                     ; send lcd en
 2FB                              CONSTANT LCD_odebral_syg, 00000000'b
 2FB                              CONSTANT LPC_ready_syg, 00000001'b                     ; LPC ready to get data
 2FB                              CONSTANT LPC_data_valid_syg, 00000001'b                ; Pico data valid
 2FB                              CONSTANT LPC_dv_reset, 00000000'b                      ; reset Eth en
 2FB                              ;
 2FB                              ;
 2FB                              ;--------------------------------------------------------------------------------------
 2FB                              ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
 2FB                              ;--------------------------------------------------------------------------------------
 2FB                              ;
 2FB                              ; This routine will generate and apply an active High reset pulse to  the FIFO
 2FB                              ; buffers in both the transmitter and receiver macros.
 2FB                              ;
 2FB                              ; Note that the reset signals have been assigned to a constant optimised output port
 2FB                              ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
 2FB                              ;
 2FB                              ;
 2FB  2B031    reset_UART_macros: OUTPUTK 03[UART_reset], 1[reset_UART_port]
 2FC  2B001                       OUTPUTK 00[UART_operate], 1[reset_UART_port]
 2FD  25000                       RETURN 
 2FE  2B003  reset_lcd_en_status: OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 2FF  25000                       RETURN 
 300  2B006  reset_Eth_en_status: OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 301  25000                       RETURN 
 302                              ;
 302                              ;
 302                              ;--------------------------------------------------------------------------------------
 302                              ; Routine to send one character to the UART Transmitter 'uart_tx6'
 302                              ;--------------------------------------------------------------------------------------
 302                              ;
 302                              ; This routine will transmit the character provided in register 's5'.
 302                              ;
 302                              ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
 302                              ; is checked to see if there is space. If the buffer is full then this routine will
 302                              ; wait for space to become available (e.g. the time required for a previous character
 302                              ; to be transmitted by the UART).
 302                              ;
 302                              ; Registers used s0 and s5 for the data (which is preserved)
 302                              ;
 302  09000              UART_TX: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 303  0D004                       TEST s0, 04[UART_Tx_full]
 304  36302                       JUMP NZ, 302[UART_TX]                                  ;wait if full
 305  2D501                       OUTPUT s5, 01[UART_TX6_output_port]
 306  25000                       RETURN 
 307  09000             UART_TX2: INPUT s0, 00[UART_status_port]                         ;Check if buffer is full
 308  0D004                       TEST s0, 04[UART_Tx_full]
 309  36307                       JUMP NZ, 307[UART_TX2]                                 ;wait if full
 30A  2D801                       OUTPUT s8, 01[UART_TX6_output_port]
 30B  25000                       RETURN 
 30C                              ;--------------------------------------------------------------------------------------
 30C                              ; Routine to wywsy³anie znaków do drivera lcd
 30C                              ;--------------------------------------------------------------------------------------
 30C  09004             LCD_send: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver mo¿e odbieraæ dane
 30D  0D001                       TEST s0, 01[LCD_ready_syg]
 30E  3230C                       JUMP Z, 30C[LCD_send]                                  ;czeka a¿ bêdzie gotowy
 30F  2DF02                       OUTPUT sF, 02[LCD_driver_send_port]
 310  2B013                       OUTPUTK 01[LCD_en_syg], 3[LCD_driver_en_port]
 311  09004      LCD_czy_odebral: INPUT s0, 04[LCD_driver_ready_port]                    ;Sprawdza czy driver odebra³ dane
 312  0D001                       TEST s0, 01[LCD_ready_syg]
 313  3A311                       JUMP C, 311[LCD_czy_odebral]
 314  2B003                       OUTPUTK 00[LCD_en_reset], 3[LCD_driver_en_port]
 315  25000                       RETURN 
 316  20302             LPC_send: CALL 302[UART_TX]
 317  09007                       INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC mo¿e odbieraæ dane
 318  0D001                       TEST s0, 01[LPC_ready_syg]
 319                              ;INPUT s5, LPC_ready_port
 319                              ;CALL UART_TX
 319  32316                       JUMP Z, 316[LPC_send]
 31A  2DF05                       OUTPUT sF, 05[LPC_data_port]
 31B  2B016                       OUTPUTK 01[LPC_data_valid_syg], 6[LPC_data_valid_port]
 31C  09007      LPC_czy_odebral: INPUT s0, 07[LPC_ready_port]                           ;Sprawdza czy LPC odebra³ dane
 31D  0D001                       TEST s0, 01[LPC_ready_syg]
 31E  3A31C                       JUMP C, 31C[LPC_czy_odebral]
 31F  2B006                       OUTPUTK 00[LPC_dv_reset], 6[LPC_data_valid_port]
 320  25000                       RETURN 
 321                       petla: 
 321  20302                       CALL 302[UART_TX]
 322  22321                       JUMP 321[petla]
 323                              ;
 323                              ;
 323                              ;--------------------------------------------------------------------------------------
 323                              ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
 323                              ;--------------------------------------------------------------------------------------
 323                              ;
 323                              ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
 323                              ; successful, will return that character in register 's5' and the Zero flag will be
 323                              ; reset (Z=0).
 323                              ;
 323                              ; If there are no characters available to be read from the FIFO buffer within the
 323                              ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
 323                              ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
 323                              ; cannot become stuck in this routine if no characters are received. If you do want
 323                              ; KCPSM6 to wait indefinitely for a character to be received then either modify this
 323                              ; routine or perform a test of the Zero flag and repeat the call to this routine as
 323                              ; shown in this example...
 323                              ;
 323                              ;          wait_for_UART_RX: CALL UART_RX
 323                              ;                            JUMP Z, wait_for_UART_RX
 323                              ;
 323                              ;
 323                              ; Registers used s0, s1 and s5.
 323                              ;
 323  011A7              UART_RX: LOAD s1, A7[167'd]                                     ;Timeout = 167 x (6 instructions x 2 clock cycles)
 324  09000           rx_timeout: INPUT s0, 00[UART_status_port]
 325  0D008                       TEST s0, 08[UART_Rx_data_present]                      ;Z=0 and C=1 when data present
 326  3632A                       JUMP NZ, 32A[read_Rx]
 327  19101                       SUB s1, 01[1'd]
 328  31000                       RETURN Z                                               ;Timeout returns with Z=1 and C=0
 329  22324                       JUMP 324[rx_timeout]
 32A                              ;
 32A  09501              read_Rx: INPUT s5, 01[UART_RX6_input_port]                      ;read character from buffer
 32B  25000                       RETURN 
 32C                              ;
 32C                              ;
 32C                              ;------------------------------------------------------------------------------------------
 32C                              ; End of 'uart_interface_routines.psm"'
 32C                              ;------------------------------------------------------------------------------------------
 32C                              ;
 32C                              ;
 32C                              ;
 32C                              ;------------------------------------------------------------------------------------------
 32C                              ; End of Program
 32C                              ;------------------------------------------------------------------------------------------
 32C                              ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\studia\MGR\FPGA\mgr\PicoProgram\program.psm
C:\studia\MGR\FPGA\mgr\PicoProgram\communication_routines.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        23'd         
 timestamp_minutes      07'd         
 timestamp_seconds      38'd         
 datestamp_year         15'd         
 datestamp_month        11'd         
 datestamp_day          10'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 hex_value0             00           program.psm
 hex_value1             01           program.psm
 decimal0               02           program.psm
 decimal1               03           program.psm
 decimal2               04           program.psm
 decimal3               05           program.psm
 decimal4               06           program.psm
 green                  03           program.psm
 red                    07           program.psm
 blue                   01           program.psm
 clear                  0F           program.psm
 UART_status_port       00           communication_routines.psm
 UART_Tx_data_present   00000001'b   communication_routines.psm
 UART_Tx_half_full      00000010'b   communication_routines.psm
 UART_Tx_full           00000100'b   communication_routines.psm
 UART_Rx_data_present   00001000'b   communication_routines.psm
 UART_Rx_half_full      00010000'b   communication_routines.psm
 UART_Rx_full           00100000'b   communication_routines.psm
 UART_TX6_output_port   01           communication_routines.psm
 UART_RX6_input_port    01           communication_routines.psm
 LCD_driver_send_port   02           communication_routines.psm
 LCD_driver_en_port     03           communication_routines.psm
 LCD_driver_ready_port  04           communication_routines.psm
 LPC_data_port          05           communication_routines.psm
 LPC_data_valid_port    06           communication_routines.psm
 LPC_ready_port         07           communication_routines.psm
 LPC_IN_data_port       08           communication_routines.psm
 LPC_IN_data_valid_port 09           communication_routines.psm
 LPC_IN_ready_port      0A           communication_routines.psm
 reset_UART_port        01           communication_routines.psm
 UART_tx_reset          00000001'b   communication_routines.psm
 UART_rx_reset          00000010'b   communication_routines.psm
 UART_reset             00000011'b   communication_routines.psm
 UART_operate           00000000'b   communication_routines.psm
 LCD_en_reset           00000000'b   communication_routines.psm
 LCD_en_syg             00000001'b   communication_routines.psm
 LCD_ready_syg          00000001'b   communication_routines.psm
 LCD_odebral_syg        00000000'b   communication_routines.psm
 LPC_ready_syg          00000001'b   communication_routines.psm
 LPC_data_valid_syg     00000001'b   communication_routines.psm
 LPC_dv_reset           00000000'b   communication_routines.psm



No TABLEs defined



List of text strings

 STRING name       String                                                    Source PSM File

 KCPSM6_version$   "v2.70"                                                   
 datestamp$        "10 Nov 2015"                                             
 timestamp$        "23:07:38"                                                
 prompt$           "Please enter a 4-digit hexadecimal value"                program.psm
 bad_hex$          "Sorry, that was not a valid 4-digit hexadecimal value!"  program.psm
 result$           "The decimal equivalent of "                              program.psm
 banner1$          "  _  ______ ____  ____  __  __  __"                      program.psm
 banner2$          " | |/ / ___|  _ \/ ___||  \/  |/ /_"                     program.psm
 banner3$          " | ' / |   | |_) \___ \| |\/| | '_ \"                    program.psm
 banner4$          " | . \ |___|  __/ ___) | |  | | (_) )"                   program.psm
 banner5$          " |_|\_\____|_|   |____/|_|  |_|\___/"                    program.psm
 welcome1$         "Example using the 'uart_tx6' and 'uart_rx6' macros"      program.psm
 welcome2$         "Assembly Date: "                                         program.psm
 welcome3$         "   Time: "                                               program.psm
 welcome4$         "Assembler Version: "                                     program.psm
 welcome5$         "Hardware Design: "                                       program.psm
 bannert$          "greeen"                                                  program.psm
 bannert2$         "blue"                                                    program.psm
 bannert3$         "red"                                                     program.psm
 bannert4$         "i czyszcze sobiecale UOP"                                program.psm



List of line labels

   Label                 Addr  Source PSM File

 * cold_start            000   program.psm
   main                  006   program.psm
   LPC_THREAD            019   program.psm
   LPC_DV_down           020   program.psm
   UART_THREAD           025   program.psm
   which_banner          02D   program.psm
   next_banner1          036   program.psm
   next_banner2          03F   program.psm
   next_banner3          048   program.psm
   just_return           051   program.psm
 * bad_hex_input         052   program.psm
 * prompt_msg            057   program.psm
   bad_hex_msg           080   program.psm
 * result_msg            0B7   program.psm
   delay_1ms             0D2   program.psm
 * delay_20ms            0D6   program.psm
   delay_1s              0DA   program.psm
   software_delay        0DE   program.psm
   clear_screen          0E3   program.psm
 * cursor_home           0ED   program.psm
   welcome_message       0F5   program.psm
   welcome_msg           0FC   program.psm
   banner_message        23F   program.psm
   banner_msg            244   program.psm
   banner2_message       24B   program.psm
   banner2_msg           250   program.psm
   banner3_message       255   program.psm
   banner3_msg           25A   program.psm
   banner4_message       25E   program.psm
   banner4_msg           263   program.psm
   send_message          27C   program.psm
   send_banner           283   program.psm
   send_CR               28A   program.psm
 * send_space            28C   program.psm
 * send_hex_word         28E   program.psm
   send_hex_byte         292   program.psm
   hex_to_ASCII          29E   program.psm
   number_char           2A1   program.psm
   upper_case            2A3   program.psm
   ASCII_to_hex          2A9   program.psm
   ASCII_letter          2B3   program.psm
   obtain_value          2B5   program.psm
   obtain_digit          2B6   program.psm
   build_value           2C2   program.psm
 * send_integer          2CC   program.psm
   send_integer_loop     2D2   program.psm
   next_int_digit        2D8   program.psm
   zero_integer          2DC   program.psm
   integer16_to_BCD      2DF   program.psm
   int_to_BCD_loop       2E0   program.psm
   divide_16bit_by_10    2E6   program.psm
   div10_loop            2ED   program.psm
   div10_restore         2F2   program.psm
   div10_shifts          2F5   program.psm
   reset_UART_macros     2FB   communication_routines.psm
 * reset_lcd_en_status   2FE   communication_routines.psm
   reset_Eth_en_status   300   communication_routines.psm
   UART_TX               302   communication_routines.psm
   UART_TX2              307   communication_routines.psm
   LCD_send              30C   communication_routines.psm
   LCD_czy_odebral       311   communication_routines.psm
   LPC_send              316   communication_routines.psm
   LPC_czy_odebral       31C   communication_routines.psm
   petla                 321   communication_routines.psm
   UART_RX               323   communication_routines.psm
   rx_timeout            324   communication_routines.psm
   read_Rx               32A   communication_routines.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             66
 STAR              -

 AND               2
 OR                1
 XOR               -

 ADD              11
 ADDCY             3
 SUB              15
 SUBCY             3

 TEST             14
 TESTCY            -
 COMPARE           8
 COMPARECY         1

 SL0               2
 SL1               1
 SLX               -
 SLA               4
 RL                -
 SR0               5
 SR1               -
 SRX               -
 SRA               1
 RR                -

 REGBANK           -

 INPUT            13
 OUTPUT            4
 OUTPUTK          10

 STORE             1
 FETCH             1

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             44
 JUMP@             -
 CALL             68
 CALL@             2
 RETURN           40
 LOAD&RETURN     487

 HWBUILD           5



End of KCPSM6 log file.
